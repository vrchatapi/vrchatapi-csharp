/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRChat.API.Client;
using VRChat.API.Model;

namespace VRChat.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFavoritesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Favorite
        /// </summary>
        /// <remarks>
        /// Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFavoriteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Favorite</returns>
        Favorite AddFavorite(AddFavoriteRequest addFavoriteRequest = default(AddFavoriteRequest), int operationIndex = 0);

        /// <summary>
        /// Add Favorite
        /// </summary>
        /// <remarks>
        /// Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFavoriteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Favorite</returns>
        ApiResponse<Favorite> AddFavoriteWithHttpInfo(AddFavoriteRequest addFavoriteRequest = default(AddFavoriteRequest), int operationIndex = 0);
        /// <summary>
        /// Clear Favorite Group
        /// </summary>
        /// <remarks>
        /// Clear ALL contents of a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success ClearFavoriteGroup(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0);

        /// <summary>
        /// Clear Favorite Group
        /// </summary>
        /// <remarks>
        /// Clear ALL contents of a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> ClearFavoriteGroupWithHttpInfo(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0);
        /// <summary>
        /// Show Favorite Group
        /// </summary>
        /// <remarks>
        /// Fetch information about a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FavoriteGroup</returns>
        FavoriteGroup GetFavoriteGroup(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0);

        /// <summary>
        /// Show Favorite Group
        /// </summary>
        /// <remarks>
        /// Fetch information about a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FavoriteGroup</returns>
        ApiResponse<FavoriteGroup> GetFavoriteGroupWithHttpInfo(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0);
        /// <summary>
        /// List Favorite Groups
        /// </summary>
        /// <remarks>
        /// Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FavoriteGroup&gt;</returns>
        List<FavoriteGroup> GetFavoriteGroups(int? n = default(int?), int? offset = default(int?), string userId = default(string), string ownerId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Favorite Groups
        /// </summary>
        /// <remarks>
        /// Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FavoriteGroup&gt;</returns>
        ApiResponse<List<FavoriteGroup>> GetFavoriteGroupsWithHttpInfo(int? n = default(int?), int? offset = default(int?), string userId = default(string), string ownerId = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Favorite Limits
        /// </summary>
        /// <remarks>
        /// Return information about a specific Favorite.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FavoriteLimits</returns>
        FavoriteLimits GetFavoriteLimits(int operationIndex = 0);

        /// <summary>
        /// Get Favorite Limits
        /// </summary>
        /// <remarks>
        /// Return information about a specific Favorite.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FavoriteLimits</returns>
        ApiResponse<FavoriteLimits> GetFavoriteLimitsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List Favorites
        /// </summary>
        /// <remarks>
        /// Returns a list of favorites.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Favorite&gt;</returns>
        List<Favorite> GetFavorites(int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), int operationIndex = 0);

        /// <summary>
        /// List Favorites
        /// </summary>
        /// <remarks>
        /// Returns a list of favorites.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Favorite&gt;</returns>
        ApiResponse<List<Favorite>> GetFavoritesWithHttpInfo(int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), int operationIndex = 0);
        /// <summary>
        /// Remove Favorite
        /// </summary>
        /// <remarks>
        /// Remove a favorite from your favorites list.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId">Must be a valid favorite ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success RemoveFavorite(string favoriteId, int operationIndex = 0);

        /// <summary>
        /// Remove Favorite
        /// </summary>
        /// <remarks>
        /// Remove a favorite from your favorites list.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId">Must be a valid favorite ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> RemoveFavoriteWithHttpInfo(string favoriteId, int operationIndex = 0);
        /// <summary>
        /// Update Favorite Group
        /// </summary>
        /// <remarks>
        /// Update information about a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateFavoriteGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateFavoriteGroup(string favoriteGroupType, string favoriteGroupName, string userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest = default(UpdateFavoriteGroupRequest), int operationIndex = 0);

        /// <summary>
        /// Update Favorite Group
        /// </summary>
        /// <remarks>
        /// Update information about a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateFavoriteGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFavoriteGroupWithHttpInfo(string favoriteGroupType, string favoriteGroupName, string userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest = default(UpdateFavoriteGroupRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFavoritesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Favorite
        /// </summary>
        /// <remarks>
        /// Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFavoriteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Favorite</returns>
        System.Threading.Tasks.Task<Favorite> AddFavoriteAsync(AddFavoriteRequest addFavoriteRequest = default(AddFavoriteRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Favorite
        /// </summary>
        /// <remarks>
        /// Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFavoriteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Favorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<Favorite>> AddFavoriteWithHttpInfoAsync(AddFavoriteRequest addFavoriteRequest = default(AddFavoriteRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear Favorite Group
        /// </summary>
        /// <remarks>
        /// Clear ALL contents of a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> ClearFavoriteGroupAsync(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear Favorite Group
        /// </summary>
        /// <remarks>
        /// Clear ALL contents of a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> ClearFavoriteGroupWithHttpInfoAsync(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Favorite Group
        /// </summary>
        /// <remarks>
        /// Fetch information about a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FavoriteGroup</returns>
        System.Threading.Tasks.Task<FavoriteGroup> GetFavoriteGroupAsync(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Favorite Group
        /// </summary>
        /// <remarks>
        /// Fetch information about a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FavoriteGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<FavoriteGroup>> GetFavoriteGroupWithHttpInfoAsync(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Favorite Groups
        /// </summary>
        /// <remarks>
        /// Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FavoriteGroup&gt;</returns>
        System.Threading.Tasks.Task<List<FavoriteGroup>> GetFavoriteGroupsAsync(int? n = default(int?), int? offset = default(int?), string userId = default(string), string ownerId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Favorite Groups
        /// </summary>
        /// <remarks>
        /// Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FavoriteGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FavoriteGroup>>> GetFavoriteGroupsWithHttpInfoAsync(int? n = default(int?), int? offset = default(int?), string userId = default(string), string ownerId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Favorite Limits
        /// </summary>
        /// <remarks>
        /// Return information about a specific Favorite.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FavoriteLimits</returns>
        System.Threading.Tasks.Task<FavoriteLimits> GetFavoriteLimitsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Favorite Limits
        /// </summary>
        /// <remarks>
        /// Return information about a specific Favorite.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FavoriteLimits)</returns>
        System.Threading.Tasks.Task<ApiResponse<FavoriteLimits>> GetFavoriteLimitsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Favorites
        /// </summary>
        /// <remarks>
        /// Returns a list of favorites.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Favorite&gt;</returns>
        System.Threading.Tasks.Task<List<Favorite>> GetFavoritesAsync(int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Favorites
        /// </summary>
        /// <remarks>
        /// Returns a list of favorites.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Favorite&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Favorite>>> GetFavoritesWithHttpInfoAsync(int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Favorite
        /// </summary>
        /// <remarks>
        /// Remove a favorite from your favorites list.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId">Must be a valid favorite ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> RemoveFavoriteAsync(string favoriteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Favorite
        /// </summary>
        /// <remarks>
        /// Remove a favorite from your favorites list.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId">Must be a valid favorite ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> RemoveFavoriteWithHttpInfoAsync(string favoriteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Favorite Group
        /// </summary>
        /// <remarks>
        /// Update information about a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateFavoriteGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFavoriteGroupAsync(string favoriteGroupType, string favoriteGroupName, string userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest = default(UpdateFavoriteGroupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Favorite Group
        /// </summary>
        /// <remarks>
        /// Update information about a specific favorite group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateFavoriteGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFavoriteGroupWithHttpInfoAsync(string favoriteGroupType, string favoriteGroupName, string userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest = default(UpdateFavoriteGroupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFavoritesApi : IFavoritesApiSync, IFavoritesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FavoritesApi : IFavoritesApi
    {
        private VRChat.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FavoritesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FavoritesApi(string basePath)
        {
            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                new VRChat.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FavoritesApi(VRChat.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FavoritesApi(VRChat.API.Client.ISynchronousClient client, VRChat.API.Client.IAsynchronousClient asyncClient, VRChat.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRChat.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRChat.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRChat.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRChat.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFavoriteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Favorite</returns>
        public Favorite AddFavorite(AddFavoriteRequest addFavoriteRequest = default(AddFavoriteRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Favorite> localVarResponse = AddFavoriteWithHttpInfo(addFavoriteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFavoriteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Favorite</returns>
        public VRChat.API.Client.ApiResponse<Favorite> AddFavoriteWithHttpInfo(AddFavoriteRequest addFavoriteRequest = default(AddFavoriteRequest), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addFavoriteRequest;

            localVarRequestOptions.Operation = "FavoritesApi.AddFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Favorite>("/favorites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFavoriteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Favorite</returns>
        public async System.Threading.Tasks.Task<Favorite> AddFavoriteAsync(AddFavoriteRequest addFavoriteRequest = default(AddFavoriteRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Favorite> localVarResponse = await AddFavoriteWithHttpInfoAsync(addFavoriteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFavoriteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Favorite)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Favorite>> AddFavoriteWithHttpInfoAsync(AddFavoriteRequest addFavoriteRequest = default(AddFavoriteRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addFavoriteRequest;

            localVarRequestOptions.Operation = "FavoritesApi.AddFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Favorite>("/favorites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Favorite Group Clear ALL contents of a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success ClearFavoriteGroup(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = ClearFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear Favorite Group Clear ALL contents of a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> ClearFavoriteGroupWithHttpInfo(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->ClearFavoriteGroup");
            }

            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->ClearFavoriteGroup");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->ClearFavoriteGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("favoriteGroupType", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("favoriteGroupName", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.ClearFavoriteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearFavoriteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Favorite Group Clear ALL contents of a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> ClearFavoriteGroupAsync(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await ClearFavoriteGroupWithHttpInfoAsync(favoriteGroupType, favoriteGroupName, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear Favorite Group Clear ALL contents of a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> ClearFavoriteGroupWithHttpInfoAsync(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->ClearFavoriteGroup");
            }

            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->ClearFavoriteGroup");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->ClearFavoriteGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("favoriteGroupType", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("favoriteGroupName", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.ClearFavoriteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearFavoriteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Favorite Group Fetch information about a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FavoriteGroup</returns>
        public FavoriteGroup GetFavoriteGroup(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<FavoriteGroup> localVarResponse = GetFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Favorite Group Fetch information about a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FavoriteGroup</returns>
        public VRChat.API.Client.ApiResponse<FavoriteGroup> GetFavoriteGroupWithHttpInfo(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->GetFavoriteGroup");
            }

            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->GetFavoriteGroup");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->GetFavoriteGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("favoriteGroupType", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("favoriteGroupName", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetFavoriteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FavoriteGroup>("/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFavoriteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Favorite Group Fetch information about a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FavoriteGroup</returns>
        public async System.Threading.Tasks.Task<FavoriteGroup> GetFavoriteGroupAsync(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<FavoriteGroup> localVarResponse = await GetFavoriteGroupWithHttpInfoAsync(favoriteGroupType, favoriteGroupName, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Favorite Group Fetch information about a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FavoriteGroup)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<FavoriteGroup>> GetFavoriteGroupWithHttpInfoAsync(string favoriteGroupType, string favoriteGroupName, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->GetFavoriteGroup");
            }

            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->GetFavoriteGroup");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->GetFavoriteGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("favoriteGroupType", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("favoriteGroupName", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetFavoriteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FavoriteGroup>("/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFavoriteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FavoriteGroup&gt;</returns>
        public List<FavoriteGroup> GetFavoriteGroups(int? n = default(int?), int? offset = default(int?), string userId = default(string), string ownerId = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<FavoriteGroup>> localVarResponse = GetFavoriteGroupsWithHttpInfo(n, offset, userId, ownerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FavoriteGroup&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<FavoriteGroup>> GetFavoriteGroupsWithHttpInfo(int? n = default(int?), int? offset = default(int?), string userId = default(string), string ownerId = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (ownerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "ownerId", ownerId));
            }

            localVarRequestOptions.Operation = "FavoritesApi.GetFavoriteGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FavoriteGroup>>("/favorite/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFavoriteGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FavoriteGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<FavoriteGroup>> GetFavoriteGroupsAsync(int? n = default(int?), int? offset = default(int?), string userId = default(string), string ownerId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<FavoriteGroup>> localVarResponse = await GetFavoriteGroupsWithHttpInfoAsync(n, offset, userId, ownerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="userId">Target user to see information on, admin-only. (optional)</param>
        /// <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FavoriteGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<FavoriteGroup>>> GetFavoriteGroupsWithHttpInfoAsync(int? n = default(int?), int? offset = default(int?), string userId = default(string), string ownerId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (ownerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "ownerId", ownerId));
            }

            localVarRequestOptions.Operation = "FavoritesApi.GetFavoriteGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FavoriteGroup>>("/favorite/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFavoriteGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Favorite Limits Return information about a specific Favorite.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FavoriteLimits</returns>
        public FavoriteLimits GetFavoriteLimits(int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<FavoriteLimits> localVarResponse = GetFavoriteLimitsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Favorite Limits Return information about a specific Favorite.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FavoriteLimits</returns>
        public VRChat.API.Client.ApiResponse<FavoriteLimits> GetFavoriteLimitsWithHttpInfo(int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.GetFavoriteLimits";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FavoriteLimits>("/auth/user/favoritelimits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFavoriteLimits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Favorite Limits Return information about a specific Favorite.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FavoriteLimits</returns>
        public async System.Threading.Tasks.Task<FavoriteLimits> GetFavoriteLimitsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<FavoriteLimits> localVarResponse = await GetFavoriteLimitsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Favorite Limits Return information about a specific Favorite.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FavoriteLimits)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<FavoriteLimits>> GetFavoriteLimitsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.GetFavoriteLimits";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FavoriteLimits>("/auth/user/favoritelimits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFavoriteLimits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Favorites Returns a list of favorites.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Favorite&gt;</returns>
        public List<Favorite> GetFavorites(int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<Favorite>> localVarResponse = GetFavoritesWithHttpInfo(n, offset, type, tag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Favorites Returns a list of favorites.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Favorite&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<Favorite>> GetFavoritesWithHttpInfo(int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }

            localVarRequestOptions.Operation = "FavoritesApi.GetFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Favorite>>("/favorites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Favorites Returns a list of favorites.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Favorite&gt;</returns>
        public async System.Threading.Tasks.Task<List<Favorite>> GetFavoritesAsync(int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<Favorite>> localVarResponse = await GetFavoritesWithHttpInfoAsync(n, offset, type, tag, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Favorites Returns a list of favorites.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
        /// <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Favorite&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<Favorite>>> GetFavoritesWithHttpInfoAsync(int? n = default(int?), int? offset = default(int?), string type = default(string), string tag = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }

            localVarRequestOptions.Operation = "FavoritesApi.GetFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Favorite>>("/favorites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Favorite Remove a favorite from your favorites list.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId">Must be a valid favorite ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success RemoveFavorite(string favoriteId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = RemoveFavoriteWithHttpInfo(favoriteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Favorite Remove a favorite from your favorites list.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId">Must be a valid favorite ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> RemoveFavoriteWithHttpInfo(string favoriteId, int operationIndex = 0)
        {
            // verify the required parameter 'favoriteId' is set
            if (favoriteId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteId' when calling FavoritesApi->RemoveFavorite");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("favoriteId", VRChat.API.Client.ClientUtils.ParameterToString(favoriteId)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.RemoveFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/favorites/{favoriteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Favorite Remove a favorite from your favorites list.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId">Must be a valid favorite ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> RemoveFavoriteAsync(string favoriteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await RemoveFavoriteWithHttpInfoAsync(favoriteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Favorite Remove a favorite from your favorites list.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteId">Must be a valid favorite ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> RemoveFavoriteWithHttpInfoAsync(string favoriteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'favoriteId' is set
            if (favoriteId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteId' when calling FavoritesApi->RemoveFavorite");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("favoriteId", VRChat.API.Client.ClientUtils.ParameterToString(favoriteId)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.RemoveFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/favorites/{favoriteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Favorite Group Update information about a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateFavoriteGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateFavoriteGroup(string favoriteGroupType, string favoriteGroupName, string userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest = default(UpdateFavoriteGroupRequest), int operationIndex = 0)
        {
            UpdateFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest);
        }

        /// <summary>
        /// Update Favorite Group Update information about a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateFavoriteGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRChat.API.Client.ApiResponse<Object> UpdateFavoriteGroupWithHttpInfo(string favoriteGroupType, string favoriteGroupName, string userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest = default(UpdateFavoriteGroupRequest), int operationIndex = 0)
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->UpdateFavoriteGroup");
            }

            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->UpdateFavoriteGroup");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->UpdateFavoriteGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("favoriteGroupType", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("favoriteGroupName", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = updateFavoriteGroupRequest;

            localVarRequestOptions.Operation = "FavoritesApi.UpdateFavoriteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFavoriteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Favorite Group Update information about a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateFavoriteGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFavoriteGroupAsync(string favoriteGroupType, string favoriteGroupName, string userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest = default(UpdateFavoriteGroupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateFavoriteGroupWithHttpInfoAsync(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Favorite Group Update information about a specific favorite group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
        /// <param name="favoriteGroupName">The name of the group to fetch, must be a name of a FavoriteGroup.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateFavoriteGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Object>> UpdateFavoriteGroupWithHttpInfoAsync(string favoriteGroupType, string favoriteGroupName, string userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest = default(UpdateFavoriteGroupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'favoriteGroupType' is set
            if (favoriteGroupType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupType' when calling FavoritesApi->UpdateFavoriteGroup");
            }

            // verify the required parameter 'favoriteGroupName' is set
            if (favoriteGroupName == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'favoriteGroupName' when calling FavoritesApi->UpdateFavoriteGroup");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling FavoritesApi->UpdateFavoriteGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("favoriteGroupType", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("favoriteGroupName", VRChat.API.Client.ClientUtils.ParameterToString(favoriteGroupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = updateFavoriteGroupRequest;

            localVarRequestOptions.Operation = "FavoritesApi.UpdateFavoriteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFavoriteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
