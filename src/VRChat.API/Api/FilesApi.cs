/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRChat.API.Client;
using VRChat.API.Model;

namespace VRChat.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create File
        /// </summary>
        /// <remarks>
        /// Creates a new File object
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File CreateFile(CreateFileRequest createFileRequest = default(CreateFileRequest), int operationIndex = 0);

        /// <summary>
        /// Create File
        /// </summary>
        /// <remarks>
        /// Creates a new File object
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> CreateFileWithHttpInfo(CreateFileRequest createFileRequest = default(CreateFileRequest), int operationIndex = 0);
        /// <summary>
        /// Create File Version
        /// </summary>
        /// <remarks>
        /// Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="createFileVersionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File CreateFileVersion(string fileId, CreateFileVersionRequest createFileVersionRequest = default(CreateFileVersionRequest), int operationIndex = 0);

        /// <summary>
        /// Create File Version
        /// </summary>
        /// <remarks>
        /// Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="createFileVersionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> CreateFileVersionWithHttpInfo(string fileId, CreateFileVersionRequest createFileVersionRequest = default(CreateFileVersionRequest), int operationIndex = 0);
        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Deletes a File object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File DeleteFile(string fileId, int operationIndex = 0);

        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Deletes a File object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> DeleteFileWithHttpInfo(string fileId, int operationIndex = 0);
        /// <summary>
        /// Delete File Version
        /// </summary>
        /// <remarks>
        /// Delete a specific version of a file. You can only delete the latest version.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File DeleteFileVersion(string fileId, int versionId, int operationIndex = 0);

        /// <summary>
        /// Delete File Version
        /// </summary>
        /// <remarks>
        /// Delete a specific version of a file. You can only delete the latest version.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> DeleteFileVersionWithHttpInfo(string fileId, int versionId, int operationIndex = 0);
        /// <summary>
        /// Download File Version
        /// </summary>
        /// <remarks>
        /// Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadFileVersion(string fileId, int versionId, int operationIndex = 0);

        /// <summary>
        /// Download File Version
        /// </summary>
        /// <remarks>
        /// Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadFileVersionWithHttpInfo(string fileId, int versionId, int operationIndex = 0);
        /// <summary>
        /// Finish FileData Upload
        /// </summary>
        /// <remarks>
        /// Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File FinishFileDataUpload(string fileId, int versionId, string fileType, FinishFileDataUploadRequest finishFileDataUploadRequest = default(FinishFileDataUploadRequest), int operationIndex = 0);

        /// <summary>
        /// Finish FileData Upload
        /// </summary>
        /// <remarks>
        /// Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> FinishFileDataUploadWithHttpInfo(string fileId, int versionId, string fileType, FinishFileDataUploadRequest finishFileDataUploadRequest = default(FinishFileDataUploadRequest), int operationIndex = 0);
        /// <summary>
        /// Get AdminAssetBundle
        /// </summary>
        /// <remarks>
        /// Returns an AdminAssetBundle
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminAssetBundleId">Must be a valid admin asset bundle ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AdminAssetBundle</returns>
        AdminAssetBundle GetAdminAssetBundle(string adminAssetBundleId, int operationIndex = 0);

        /// <summary>
        /// Get AdminAssetBundle
        /// </summary>
        /// <remarks>
        /// Returns an AdminAssetBundle
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminAssetBundleId">Must be a valid admin asset bundle ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AdminAssetBundle</returns>
        ApiResponse<AdminAssetBundle> GetAdminAssetBundleWithHttpInfo(string adminAssetBundleId, int operationIndex = 0);
        /// <summary>
        /// Show File
        /// </summary>
        /// <remarks>
        /// Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File GetFile(string fileId, int operationIndex = 0);

        /// <summary>
        /// Show File
        /// </summary>
        /// <remarks>
        /// Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> GetFileWithHttpInfo(string fileId, int operationIndex = 0);
        /// <summary>
        /// Get File Version Analysis
        /// </summary>
        /// <remarks>
        /// Get the performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileAnalysis</returns>
        FileAnalysis GetFileAnalysis(string fileId, int versionId, int operationIndex = 0);

        /// <summary>
        /// Get File Version Analysis
        /// </summary>
        /// <remarks>
        /// Get the performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileAnalysis</returns>
        ApiResponse<FileAnalysis> GetFileAnalysisWithHttpInfo(string fileId, int versionId, int operationIndex = 0);
        /// <summary>
        /// Get File Version Analysis Security
        /// </summary>
        /// <remarks>
        /// Get the security performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileAnalysis</returns>
        FileAnalysis GetFileAnalysisSecurity(string fileId, int versionId, int operationIndex = 0);

        /// <summary>
        /// Get File Version Analysis Security
        /// </summary>
        /// <remarks>
        /// Get the security performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileAnalysis</returns>
        ApiResponse<FileAnalysis> GetFileAnalysisSecurityWithHttpInfo(string fileId, int versionId, int operationIndex = 0);
        /// <summary>
        /// Get File Version Analysis Standard
        /// </summary>
        /// <remarks>
        /// Get the standard performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileAnalysis</returns>
        FileAnalysis GetFileAnalysisStandard(string fileId, int versionId, int operationIndex = 0);

        /// <summary>
        /// Get File Version Analysis Standard
        /// </summary>
        /// <remarks>
        /// Get the standard performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileAnalysis</returns>
        ApiResponse<FileAnalysis> GetFileAnalysisStandardWithHttpInfo(string fileId, int versionId, int operationIndex = 0);
        /// <summary>
        /// Check FileData Upload Status
        /// </summary>
        /// <remarks>
        /// Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileVersionUploadStatus</returns>
        FileVersionUploadStatus GetFileDataUploadStatus(string fileId, int versionId, string fileType, int operationIndex = 0);

        /// <summary>
        /// Check FileData Upload Status
        /// </summary>
        /// <remarks>
        /// Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileVersionUploadStatus</returns>
        ApiResponse<FileVersionUploadStatus> GetFileDataUploadStatusWithHttpInfo(string fileId, int versionId, string fileType, int operationIndex = 0);
        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>
        /// Returns a list of files
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
        /// <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;File&gt;</returns>
        List<File> GetFiles(string tag = default(string), string userId = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>
        /// Returns a list of files
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
        /// <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;File&gt;</returns>
        ApiResponse<List<File>> GetFilesWithHttpInfo(string tag = default(string), string userId = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Start FileData Upload
        /// </summary>
        /// <remarks>
        /// Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="partNumber">The part number to start uploading. If not provided, the first part will be started. (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileUploadURL</returns>
        FileUploadURL StartFileDataUpload(string fileId, int versionId, string fileType, int? partNumber = default(int?), int operationIndex = 0);

        /// <summary>
        /// Start FileData Upload
        /// </summary>
        /// <remarks>
        /// Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="partNumber">The part number to start uploading. If not provided, the first part will be started. (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileUploadURL</returns>
        ApiResponse<FileUploadURL> StartFileDataUploadWithHttpInfo(string fileId, int versionId, string fileType, int? partNumber = default(int?), int operationIndex = 0);
        /// <summary>
        /// Upload gallery image
        /// </summary>
        /// <remarks>
        /// Upload a gallery image
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File UploadGalleryImage(System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Upload gallery image
        /// </summary>
        /// <remarks>
        /// Upload a gallery image
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> UploadGalleryImageWithHttpInfo(System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Upload icon
        /// </summary>
        /// <remarks>
        /// Upload an icon
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File UploadIcon(System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Upload icon
        /// </summary>
        /// <remarks>
        /// Upload an icon
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> UploadIconWithHttpInfo(System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Upload gallery image, icon, emoji or sticker
        /// </summary>
        /// <remarks>
        /// Upload an image, which can be an icon, gallery image, sticker or emoji
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="tag">Needs to be either icon, gallery, sticker, emoji, or emojianimated</param>
        /// <param name="frames">Required for emojianimated. Total number of frames to be animated (2-64) (optional)</param>
        /// <param name="framesOverTime">Required for emojianimated. Animation frames per second (1-64) (optional)</param>
        /// <param name="animationStyle">Animation style for sticker, required for emoji. (optional)</param>
        /// <param name="maskTag">Mask of the sticker, optional for emoji. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File UploadImage(System.IO.Stream file, string tag, int? frames = default(int?), int? framesOverTime = default(int?), string animationStyle = default(string), string maskTag = default(string), int operationIndex = 0);

        /// <summary>
        /// Upload gallery image, icon, emoji or sticker
        /// </summary>
        /// <remarks>
        /// Upload an image, which can be an icon, gallery image, sticker or emoji
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="tag">Needs to be either icon, gallery, sticker, emoji, or emojianimated</param>
        /// <param name="frames">Required for emojianimated. Total number of frames to be animated (2-64) (optional)</param>
        /// <param name="framesOverTime">Required for emojianimated. Animation frames per second (1-64) (optional)</param>
        /// <param name="animationStyle">Animation style for sticker, required for emoji. (optional)</param>
        /// <param name="maskTag">Mask of the sticker, optional for emoji. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> UploadImageWithHttpInfo(System.IO.Stream file, string tag, int? frames = default(int?), int? framesOverTime = default(int?), string animationStyle = default(string), string maskTag = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create File
        /// </summary>
        /// <remarks>
        /// Creates a new File object
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> CreateFileAsync(CreateFileRequest createFileRequest = default(CreateFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create File
        /// </summary>
        /// <remarks>
        /// Creates a new File object
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> CreateFileWithHttpInfoAsync(CreateFileRequest createFileRequest = default(CreateFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create File Version
        /// </summary>
        /// <remarks>
        /// Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="createFileVersionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> CreateFileVersionAsync(string fileId, CreateFileVersionRequest createFileVersionRequest = default(CreateFileVersionRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create File Version
        /// </summary>
        /// <remarks>
        /// Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="createFileVersionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> CreateFileVersionWithHttpInfoAsync(string fileId, CreateFileVersionRequest createFileVersionRequest = default(CreateFileVersionRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Deletes a File object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> DeleteFileAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Deletes a File object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> DeleteFileWithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete File Version
        /// </summary>
        /// <remarks>
        /// Delete a specific version of a file. You can only delete the latest version.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> DeleteFileVersionAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete File Version
        /// </summary>
        /// <remarks>
        /// Delete a specific version of a file. You can only delete the latest version.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> DeleteFileVersionWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download File Version
        /// </summary>
        /// <remarks>
        /// Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileVersionAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download File Version
        /// </summary>
        /// <remarks>
        /// Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadFileVersionWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Finish FileData Upload
        /// </summary>
        /// <remarks>
        /// Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> FinishFileDataUploadAsync(string fileId, int versionId, string fileType, FinishFileDataUploadRequest finishFileDataUploadRequest = default(FinishFileDataUploadRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finish FileData Upload
        /// </summary>
        /// <remarks>
        /// Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> FinishFileDataUploadWithHttpInfoAsync(string fileId, int versionId, string fileType, FinishFileDataUploadRequest finishFileDataUploadRequest = default(FinishFileDataUploadRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get AdminAssetBundle
        /// </summary>
        /// <remarks>
        /// Returns an AdminAssetBundle
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminAssetBundleId">Must be a valid admin asset bundle ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AdminAssetBundle</returns>
        System.Threading.Tasks.Task<AdminAssetBundle> GetAdminAssetBundleAsync(string adminAssetBundleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get AdminAssetBundle
        /// </summary>
        /// <remarks>
        /// Returns an AdminAssetBundle
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminAssetBundleId">Must be a valid admin asset bundle ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AdminAssetBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminAssetBundle>> GetAdminAssetBundleWithHttpInfoAsync(string adminAssetBundleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show File
        /// </summary>
        /// <remarks>
        /// Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> GetFileAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show File
        /// </summary>
        /// <remarks>
        /// Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> GetFileWithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get File Version Analysis
        /// </summary>
        /// <remarks>
        /// Get the performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileAnalysis</returns>
        System.Threading.Tasks.Task<FileAnalysis> GetFileAnalysisAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get File Version Analysis
        /// </summary>
        /// <remarks>
        /// Get the performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileAnalysis)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileAnalysis>> GetFileAnalysisWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get File Version Analysis Security
        /// </summary>
        /// <remarks>
        /// Get the security performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileAnalysis</returns>
        System.Threading.Tasks.Task<FileAnalysis> GetFileAnalysisSecurityAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get File Version Analysis Security
        /// </summary>
        /// <remarks>
        /// Get the security performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileAnalysis)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileAnalysis>> GetFileAnalysisSecurityWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get File Version Analysis Standard
        /// </summary>
        /// <remarks>
        /// Get the standard performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileAnalysis</returns>
        System.Threading.Tasks.Task<FileAnalysis> GetFileAnalysisStandardAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get File Version Analysis Standard
        /// </summary>
        /// <remarks>
        /// Get the standard performance analysis for the uploaded assets of an avatar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileAnalysis)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileAnalysis>> GetFileAnalysisStandardWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check FileData Upload Status
        /// </summary>
        /// <remarks>
        /// Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileVersionUploadStatus</returns>
        System.Threading.Tasks.Task<FileVersionUploadStatus> GetFileDataUploadStatusAsync(string fileId, int versionId, string fileType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check FileData Upload Status
        /// </summary>
        /// <remarks>
        /// Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileVersionUploadStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileVersionUploadStatus>> GetFileDataUploadStatusWithHttpInfoAsync(string fileId, int versionId, string fileType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>
        /// Returns a list of files
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
        /// <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;File&gt;</returns>
        System.Threading.Tasks.Task<List<File>> GetFilesAsync(string tag = default(string), string userId = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>
        /// Returns a list of files
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
        /// <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<File>>> GetFilesWithHttpInfoAsync(string tag = default(string), string userId = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start FileData Upload
        /// </summary>
        /// <remarks>
        /// Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="partNumber">The part number to start uploading. If not provided, the first part will be started. (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUploadURL</returns>
        System.Threading.Tasks.Task<FileUploadURL> StartFileDataUploadAsync(string fileId, int versionId, string fileType, int? partNumber = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start FileData Upload
        /// </summary>
        /// <remarks>
        /// Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="partNumber">The part number to start uploading. If not provided, the first part will be started. (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUploadURL)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUploadURL>> StartFileDataUploadWithHttpInfoAsync(string fileId, int versionId, string fileType, int? partNumber = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload gallery image
        /// </summary>
        /// <remarks>
        /// Upload a gallery image
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> UploadGalleryImageAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload gallery image
        /// </summary>
        /// <remarks>
        /// Upload a gallery image
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> UploadGalleryImageWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload icon
        /// </summary>
        /// <remarks>
        /// Upload an icon
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> UploadIconAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload icon
        /// </summary>
        /// <remarks>
        /// Upload an icon
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> UploadIconWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload gallery image, icon, emoji or sticker
        /// </summary>
        /// <remarks>
        /// Upload an image, which can be an icon, gallery image, sticker or emoji
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="tag">Needs to be either icon, gallery, sticker, emoji, or emojianimated</param>
        /// <param name="frames">Required for emojianimated. Total number of frames to be animated (2-64) (optional)</param>
        /// <param name="framesOverTime">Required for emojianimated. Animation frames per second (1-64) (optional)</param>
        /// <param name="animationStyle">Animation style for sticker, required for emoji. (optional)</param>
        /// <param name="maskTag">Mask of the sticker, optional for emoji. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> UploadImageAsync(System.IO.Stream file, string tag, int? frames = default(int?), int? framesOverTime = default(int?), string animationStyle = default(string), string maskTag = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload gallery image, icon, emoji or sticker
        /// </summary>
        /// <remarks>
        /// Upload an image, which can be an icon, gallery image, sticker or emoji
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="tag">Needs to be either icon, gallery, sticker, emoji, or emojianimated</param>
        /// <param name="frames">Required for emojianimated. Total number of frames to be animated (2-64) (optional)</param>
        /// <param name="framesOverTime">Required for emojianimated. Animation frames per second (1-64) (optional)</param>
        /// <param name="animationStyle">Animation style for sticker, required for emoji. (optional)</param>
        /// <param name="maskTag">Mask of the sticker, optional for emoji. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> UploadImageWithHttpInfoAsync(System.IO.Stream file, string tag, int? frames = default(int?), int? framesOverTime = default(int?), string animationStyle = default(string), string maskTag = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IFilesApiSync, IFilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private VRChat.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(string basePath)
        {
            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                new VRChat.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(VRChat.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilesApi(VRChat.API.Client.ISynchronousClient client, VRChat.API.Client.IAsynchronousClient asyncClient, VRChat.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRChat.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRChat.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRChat.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRChat.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create File Creates a new File object
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File CreateFile(CreateFileRequest createFileRequest = default(CreateFileRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = CreateFileWithHttpInfo(createFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create File Creates a new File object
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> CreateFileWithHttpInfo(CreateFileRequest createFileRequest = default(CreateFileRequest), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFileRequest;

            localVarRequestOptions.Operation = "FilesApi.CreateFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create File Creates a new File object
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> CreateFileAsync(CreateFileRequest createFileRequest = default(CreateFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await CreateFileWithHttpInfoAsync(createFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create File Creates a new File object
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> CreateFileWithHttpInfoAsync(CreateFileRequest createFileRequest = default(CreateFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFileRequest;

            localVarRequestOptions.Operation = "FilesApi.CreateFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create File Version Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="createFileVersionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File CreateFileVersion(string fileId, CreateFileVersionRequest createFileVersionRequest = default(CreateFileVersionRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = CreateFileVersionWithHttpInfo(fileId, createFileVersionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create File Version Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="createFileVersionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> CreateFileVersionWithHttpInfo(string fileId, CreateFileVersionRequest createFileVersionRequest = default(CreateFileVersionRequest), int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->CreateFileVersion");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.Data = createFileVersionRequest;

            localVarRequestOptions.Operation = "FilesApi.CreateFileVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/file/{fileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFileVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create File Version Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="createFileVersionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> CreateFileVersionAsync(string fileId, CreateFileVersionRequest createFileVersionRequest = default(CreateFileVersionRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await CreateFileVersionWithHttpInfoAsync(fileId, createFileVersionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create File Version Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="createFileVersionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> CreateFileVersionWithHttpInfoAsync(string fileId, CreateFileVersionRequest createFileVersionRequest = default(CreateFileVersionRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->CreateFileVersion");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.Data = createFileVersionRequest;

            localVarRequestOptions.Operation = "FilesApi.CreateFileVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/file/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFileVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File Deletes a File object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File DeleteFile(string fileId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = DeleteFileWithHttpInfo(fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete File Deletes a File object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> DeleteFileWithHttpInfo(string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->DeleteFile");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.DeleteFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<File>("/file/{fileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File Deletes a File object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> DeleteFileAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await DeleteFileWithHttpInfoAsync(fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete File Deletes a File object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> DeleteFileWithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->DeleteFile");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.DeleteFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<File>("/file/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File Version Delete a specific version of a file. You can only delete the latest version.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File DeleteFileVersion(string fileId, int versionId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = DeleteFileVersionWithHttpInfo(fileId, versionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete File Version Delete a specific version of a file. You can only delete the latest version.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> DeleteFileVersionWithHttpInfo(string fileId, int versionId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->DeleteFileVersion");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.DeleteFileVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<File>("/file/{fileId}/{versionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File Version Delete a specific version of a file. You can only delete the latest version.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> DeleteFileVersionAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await DeleteFileVersionWithHttpInfoAsync(fileId, versionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete File Version Delete a specific version of a file. You can only delete the latest version.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> DeleteFileVersionWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->DeleteFileVersion");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.DeleteFileVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<File>("/file/{fileId}/{versionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download File Version Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadFileVersion(string fileId, int versionId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadFileVersionWithHttpInfo(fileId, versionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download File Version Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public VRChat.API.Client.ApiResponse<System.IO.Stream> DownloadFileVersionWithHttpInfo(string fileId, int versionId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->DownloadFileVersion");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/*",
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.DownloadFileVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/file/{fileId}/{versionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadFileVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download File Version Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadFileVersionAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadFileVersionWithHttpInfoAsync(fileId, versionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download File Version Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<System.IO.Stream>> DownloadFileVersionWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->DownloadFileVersion");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/*",
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.DownloadFileVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/file/{fileId}/{versionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadFileVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finish FileData Upload Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File FinishFileDataUpload(string fileId, int versionId, string fileType, FinishFileDataUploadRequest finishFileDataUploadRequest = default(FinishFileDataUploadRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = FinishFileDataUploadWithHttpInfo(fileId, versionId, fileType, finishFileDataUploadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finish FileData Upload Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> FinishFileDataUploadWithHttpInfo(string fileId, int versionId, string fileType, FinishFileDataUploadRequest finishFileDataUploadRequest = default(FinishFileDataUploadRequest), int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FinishFileDataUpload");
            }

            // verify the required parameter 'fileType' is set
            if (fileType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileType' when calling FilesApi->FinishFileDataUpload");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileType", VRChat.API.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            localVarRequestOptions.Data = finishFileDataUploadRequest;

            localVarRequestOptions.Operation = "FilesApi.FinishFileDataUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<File>("/file/{fileId}/{versionId}/{fileType}/finish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinishFileDataUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finish FileData Upload Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> FinishFileDataUploadAsync(string fileId, int versionId, string fileType, FinishFileDataUploadRequest finishFileDataUploadRequest = default(FinishFileDataUploadRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await FinishFileDataUploadWithHttpInfoAsync(fileId, versionId, fileType, finishFileDataUploadRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finish FileData Upload Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> FinishFileDataUploadWithHttpInfoAsync(string fileId, int versionId, string fileType, FinishFileDataUploadRequest finishFileDataUploadRequest = default(FinishFileDataUploadRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FinishFileDataUpload");
            }

            // verify the required parameter 'fileType' is set
            if (fileType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileType' when calling FilesApi->FinishFileDataUpload");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileType", VRChat.API.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            localVarRequestOptions.Data = finishFileDataUploadRequest;

            localVarRequestOptions.Operation = "FilesApi.FinishFileDataUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<File>("/file/{fileId}/{versionId}/{fileType}/finish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinishFileDataUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get AdminAssetBundle Returns an AdminAssetBundle
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminAssetBundleId">Must be a valid admin asset bundle ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AdminAssetBundle</returns>
        public AdminAssetBundle GetAdminAssetBundle(string adminAssetBundleId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<AdminAssetBundle> localVarResponse = GetAdminAssetBundleWithHttpInfo(adminAssetBundleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get AdminAssetBundle Returns an AdminAssetBundle
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminAssetBundleId">Must be a valid admin asset bundle ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AdminAssetBundle</returns>
        public VRChat.API.Client.ApiResponse<AdminAssetBundle> GetAdminAssetBundleWithHttpInfo(string adminAssetBundleId, int operationIndex = 0)
        {
            // verify the required parameter 'adminAssetBundleId' is set
            if (adminAssetBundleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'adminAssetBundleId' when calling FilesApi->GetAdminAssetBundle");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("adminAssetBundleId", VRChat.API.Client.ClientUtils.ParameterToString(adminAssetBundleId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetAdminAssetBundle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AdminAssetBundle>("/adminassetbundles/{adminAssetBundleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdminAssetBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get AdminAssetBundle Returns an AdminAssetBundle
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminAssetBundleId">Must be a valid admin asset bundle ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AdminAssetBundle</returns>
        public async System.Threading.Tasks.Task<AdminAssetBundle> GetAdminAssetBundleAsync(string adminAssetBundleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<AdminAssetBundle> localVarResponse = await GetAdminAssetBundleWithHttpInfoAsync(adminAssetBundleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get AdminAssetBundle Returns an AdminAssetBundle
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminAssetBundleId">Must be a valid admin asset bundle ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AdminAssetBundle)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<AdminAssetBundle>> GetAdminAssetBundleWithHttpInfoAsync(string adminAssetBundleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'adminAssetBundleId' is set
            if (adminAssetBundleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'adminAssetBundleId' when calling FilesApi->GetAdminAssetBundle");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("adminAssetBundleId", VRChat.API.Client.ClientUtils.ParameterToString(adminAssetBundleId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetAdminAssetBundle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AdminAssetBundle>("/adminassetbundles/{adminAssetBundleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdminAssetBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show File Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File GetFile(string fileId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = GetFileWithHttpInfo(fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show File Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> GetFileWithHttpInfo(string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFile");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<File>("/file/{fileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show File Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> GetFileAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await GetFileWithHttpInfoAsync(fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show File Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> GetFileWithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFile");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<File>("/file/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Version Analysis Get the performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileAnalysis</returns>
        public FileAnalysis GetFileAnalysis(string fileId, int versionId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<FileAnalysis> localVarResponse = GetFileAnalysisWithHttpInfo(fileId, versionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Version Analysis Get the performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileAnalysis</returns>
        public VRChat.API.Client.ApiResponse<FileAnalysis> GetFileAnalysisWithHttpInfo(string fileId, int versionId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileAnalysis");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFileAnalysis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileAnalysis>("/analysis/{fileId}/{versionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileAnalysis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Version Analysis Get the performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileAnalysis</returns>
        public async System.Threading.Tasks.Task<FileAnalysis> GetFileAnalysisAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<FileAnalysis> localVarResponse = await GetFileAnalysisWithHttpInfoAsync(fileId, versionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Version Analysis Get the performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileAnalysis)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<FileAnalysis>> GetFileAnalysisWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileAnalysis");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFileAnalysis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileAnalysis>("/analysis/{fileId}/{versionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileAnalysis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Version Analysis Security Get the security performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileAnalysis</returns>
        public FileAnalysis GetFileAnalysisSecurity(string fileId, int versionId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<FileAnalysis> localVarResponse = GetFileAnalysisSecurityWithHttpInfo(fileId, versionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Version Analysis Security Get the security performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileAnalysis</returns>
        public VRChat.API.Client.ApiResponse<FileAnalysis> GetFileAnalysisSecurityWithHttpInfo(string fileId, int versionId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileAnalysisSecurity");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFileAnalysisSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileAnalysis>("/analysis/{fileId}/{versionId}/security", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileAnalysisSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Version Analysis Security Get the security performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileAnalysis</returns>
        public async System.Threading.Tasks.Task<FileAnalysis> GetFileAnalysisSecurityAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<FileAnalysis> localVarResponse = await GetFileAnalysisSecurityWithHttpInfoAsync(fileId, versionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Version Analysis Security Get the security performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileAnalysis)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<FileAnalysis>> GetFileAnalysisSecurityWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileAnalysisSecurity");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFileAnalysisSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileAnalysis>("/analysis/{fileId}/{versionId}/security", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileAnalysisSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Version Analysis Standard Get the standard performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileAnalysis</returns>
        public FileAnalysis GetFileAnalysisStandard(string fileId, int versionId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<FileAnalysis> localVarResponse = GetFileAnalysisStandardWithHttpInfo(fileId, versionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Version Analysis Standard Get the standard performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileAnalysis</returns>
        public VRChat.API.Client.ApiResponse<FileAnalysis> GetFileAnalysisStandardWithHttpInfo(string fileId, int versionId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileAnalysisStandard");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFileAnalysisStandard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileAnalysis>("/analysis/{fileId}/{versionId}/standard", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileAnalysisStandard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Version Analysis Standard Get the standard performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileAnalysis</returns>
        public async System.Threading.Tasks.Task<FileAnalysis> GetFileAnalysisStandardAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<FileAnalysis> localVarResponse = await GetFileAnalysisStandardWithHttpInfoAsync(fileId, versionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Version Analysis Standard Get the standard performance analysis for the uploaded assets of an avatar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileAnalysis)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<FileAnalysis>> GetFileAnalysisStandardWithHttpInfoAsync(string fileId, int versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileAnalysisStandard");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFileAnalysisStandard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileAnalysis>("/analysis/{fileId}/{versionId}/standard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileAnalysisStandard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check FileData Upload Status Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileVersionUploadStatus</returns>
        public FileVersionUploadStatus GetFileDataUploadStatus(string fileId, int versionId, string fileType, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<FileVersionUploadStatus> localVarResponse = GetFileDataUploadStatusWithHttpInfo(fileId, versionId, fileType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check FileData Upload Status Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileVersionUploadStatus</returns>
        public VRChat.API.Client.ApiResponse<FileVersionUploadStatus> GetFileDataUploadStatusWithHttpInfo(string fileId, int versionId, string fileType, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileDataUploadStatus");
            }

            // verify the required parameter 'fileType' is set
            if (fileType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileType' when calling FilesApi->GetFileDataUploadStatus");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileType", VRChat.API.Client.ClientUtils.ParameterToString(fileType)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFileDataUploadStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileVersionUploadStatus>("/file/{fileId}/{versionId}/{fileType}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileDataUploadStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check FileData Upload Status Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileVersionUploadStatus</returns>
        public async System.Threading.Tasks.Task<FileVersionUploadStatus> GetFileDataUploadStatusAsync(string fileId, int versionId, string fileType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<FileVersionUploadStatus> localVarResponse = await GetFileDataUploadStatusWithHttpInfoAsync(fileId, versionId, fileType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check FileData Upload Status Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileVersionUploadStatus)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<FileVersionUploadStatus>> GetFileDataUploadStatusWithHttpInfoAsync(string fileId, int versionId, string fileType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileDataUploadStatus");
            }

            // verify the required parameter 'fileType' is set
            if (fileType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileType' when calling FilesApi->GetFileDataUploadStatus");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileType", VRChat.API.Client.ClientUtils.ParameterToString(fileType)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.GetFileDataUploadStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileVersionUploadStatus>("/file/{fileId}/{versionId}/{fileType}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileDataUploadStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Files Returns a list of files
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
        /// <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;File&gt;</returns>
        public List<File> GetFiles(string tag = default(string), string userId = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<File>> localVarResponse = GetFilesWithHttpInfo(tag, userId, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Files Returns a list of files
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
        /// <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;File&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<File>> GetFilesWithHttpInfo(string tag = default(string), string userId = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "FilesApi.GetFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<File>>("/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Files Returns a list of files
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
        /// <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;File&gt;</returns>
        public async System.Threading.Tasks.Task<List<File>> GetFilesAsync(string tag = default(string), string userId = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<File>> localVarResponse = await GetFilesWithHttpInfoAsync(tag, userId, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Files Returns a list of files
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
        /// <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<File>>> GetFilesWithHttpInfoAsync(string tag = default(string), string userId = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "FilesApi.GetFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<File>>("/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start FileData Upload Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="partNumber">The part number to start uploading. If not provided, the first part will be started. (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileUploadURL</returns>
        public FileUploadURL StartFileDataUpload(string fileId, int versionId, string fileType, int? partNumber = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<FileUploadURL> localVarResponse = StartFileDataUploadWithHttpInfo(fileId, versionId, fileType, partNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start FileData Upload Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="partNumber">The part number to start uploading. If not provided, the first part will be started. (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileUploadURL</returns>
        public VRChat.API.Client.ApiResponse<FileUploadURL> StartFileDataUploadWithHttpInfo(string fileId, int versionId, string fileType, int? partNumber = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->StartFileDataUpload");
            }

            // verify the required parameter 'fileType' is set
            if (fileType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileType' when calling FilesApi->StartFileDataUpload");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileType", VRChat.API.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            if (partNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "partNumber", partNumber));
            }

            localVarRequestOptions.Operation = "FilesApi.StartFileDataUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<FileUploadURL>("/file/{fileId}/{versionId}/{fileType}/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartFileDataUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start FileData Upload Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="partNumber">The part number to start uploading. If not provided, the first part will be started. (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUploadURL</returns>
        public async System.Threading.Tasks.Task<FileUploadURL> StartFileDataUploadAsync(string fileId, int versionId, string fileType, int? partNumber = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<FileUploadURL> localVarResponse = await StartFileDataUploadWithHttpInfoAsync(fileId, versionId, fileType, partNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start FileData Upload Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Must be a valid file ID.</param>
        /// <param name="versionId">Version ID of the asset.</param>
        /// <param name="fileType">Type of file.</param>
        /// <param name="partNumber">The part number to start uploading. If not provided, the first part will be started. (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUploadURL)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<FileUploadURL>> StartFileDataUploadWithHttpInfoAsync(string fileId, int versionId, string fileType, int? partNumber = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->StartFileDataUpload");
            }

            // verify the required parameter 'fileType' is set
            if (fileType == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'fileType' when calling FilesApi->StartFileDataUpload");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fileId", VRChat.API.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", VRChat.API.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileType", VRChat.API.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            if (partNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "partNumber", partNumber));
            }

            localVarRequestOptions.Operation = "FilesApi.StartFileDataUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<FileUploadURL>("/file/{fileId}/{versionId}/{fileType}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartFileDataUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload gallery image Upload a gallery image
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File UploadGalleryImage(System.IO.Stream file, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = UploadGalleryImageWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload gallery image Upload a gallery image
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> UploadGalleryImageWithHttpInfo(System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'file' when calling FilesApi->UploadGalleryImage");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "FilesApi.UploadGalleryImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/gallery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadGalleryImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload gallery image Upload a gallery image
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> UploadGalleryImageAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await UploadGalleryImageWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload gallery image Upload a gallery image
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> UploadGalleryImageWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'file' when calling FilesApi->UploadGalleryImage");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "FilesApi.UploadGalleryImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/gallery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadGalleryImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload icon Upload an icon
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File UploadIcon(System.IO.Stream file, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = UploadIconWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload icon Upload an icon
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> UploadIconWithHttpInfo(System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'file' when calling FilesApi->UploadIcon");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "FilesApi.UploadIcon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/icon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadIcon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload icon Upload an icon
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> UploadIconAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await UploadIconWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload icon Upload an icon
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> UploadIconWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'file' when calling FilesApi->UploadIcon");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "FilesApi.UploadIcon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/icon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadIcon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload gallery image, icon, emoji or sticker Upload an image, which can be an icon, gallery image, sticker or emoji
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="tag">Needs to be either icon, gallery, sticker, emoji, or emojianimated</param>
        /// <param name="frames">Required for emojianimated. Total number of frames to be animated (2-64) (optional)</param>
        /// <param name="framesOverTime">Required for emojianimated. Animation frames per second (1-64) (optional)</param>
        /// <param name="animationStyle">Animation style for sticker, required for emoji. (optional)</param>
        /// <param name="maskTag">Mask of the sticker, optional for emoji. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File UploadImage(System.IO.Stream file, string tag, int? frames = default(int?), int? framesOverTime = default(int?), string animationStyle = default(string), string maskTag = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = UploadImageWithHttpInfo(file, tag, frames, framesOverTime, animationStyle, maskTag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload gallery image, icon, emoji or sticker Upload an image, which can be an icon, gallery image, sticker or emoji
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="tag">Needs to be either icon, gallery, sticker, emoji, or emojianimated</param>
        /// <param name="frames">Required for emojianimated. Total number of frames to be animated (2-64) (optional)</param>
        /// <param name="framesOverTime">Required for emojianimated. Animation frames per second (1-64) (optional)</param>
        /// <param name="animationStyle">Animation style for sticker, required for emoji. (optional)</param>
        /// <param name="maskTag">Mask of the sticker, optional for emoji. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public VRChat.API.Client.ApiResponse<File> UploadImageWithHttpInfo(System.IO.Stream file, string tag, int? frames = default(int?), int? framesOverTime = default(int?), string animationStyle = default(string), string maskTag = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'file' when calling FilesApi->UploadImage");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'tag' when calling FilesApi->UploadImage");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("tag", VRChat.API.Client.ClientUtils.ParameterToString(tag)); // form parameter
            if (frames != null)
            {
                localVarRequestOptions.FormParameters.Add("frames", VRChat.API.Client.ClientUtils.ParameterToString(frames)); // form parameter
            }
            if (framesOverTime != null)
            {
                localVarRequestOptions.FormParameters.Add("framesOverTime", VRChat.API.Client.ClientUtils.ParameterToString(framesOverTime)); // form parameter
            }
            if (animationStyle != null)
            {
                localVarRequestOptions.FormParameters.Add("animationStyle", VRChat.API.Client.ClientUtils.ParameterToString(animationStyle)); // form parameter
            }
            if (maskTag != null)
            {
                localVarRequestOptions.FormParameters.Add("maskTag", VRChat.API.Client.ClientUtils.ParameterToString(maskTag)); // form parameter
            }

            localVarRequestOptions.Operation = "FilesApi.UploadImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/file/image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload gallery image, icon, emoji or sticker Upload an image, which can be an icon, gallery image, sticker or emoji
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="tag">Needs to be either icon, gallery, sticker, emoji, or emojianimated</param>
        /// <param name="frames">Required for emojianimated. Total number of frames to be animated (2-64) (optional)</param>
        /// <param name="framesOverTime">Required for emojianimated. Animation frames per second (1-64) (optional)</param>
        /// <param name="animationStyle">Animation style for sticker, required for emoji. (optional)</param>
        /// <param name="maskTag">Mask of the sticker, optional for emoji. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> UploadImageAsync(System.IO.Stream file, string tag, int? frames = default(int?), int? framesOverTime = default(int?), string animationStyle = default(string), string maskTag = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<File> localVarResponse = await UploadImageWithHttpInfoAsync(file, tag, frames, framesOverTime, animationStyle, maskTag, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload gallery image, icon, emoji or sticker Upload an image, which can be an icon, gallery image, sticker or emoji
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The binary blob of the png file.</param>
        /// <param name="tag">Needs to be either icon, gallery, sticker, emoji, or emojianimated</param>
        /// <param name="frames">Required for emojianimated. Total number of frames to be animated (2-64) (optional)</param>
        /// <param name="framesOverTime">Required for emojianimated. Animation frames per second (1-64) (optional)</param>
        /// <param name="animationStyle">Animation style for sticker, required for emoji. (optional)</param>
        /// <param name="maskTag">Mask of the sticker, optional for emoji. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<File>> UploadImageWithHttpInfoAsync(System.IO.Stream file, string tag, int? frames = default(int?), int? framesOverTime = default(int?), string animationStyle = default(string), string maskTag = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'file' when calling FilesApi->UploadImage");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'tag' when calling FilesApi->UploadImage");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("tag", VRChat.API.Client.ClientUtils.ParameterToString(tag)); // form parameter
            if (frames != null)
            {
                localVarRequestOptions.FormParameters.Add("frames", VRChat.API.Client.ClientUtils.ParameterToString(frames)); // form parameter
            }
            if (framesOverTime != null)
            {
                localVarRequestOptions.FormParameters.Add("framesOverTime", VRChat.API.Client.ClientUtils.ParameterToString(framesOverTime)); // form parameter
            }
            if (animationStyle != null)
            {
                localVarRequestOptions.FormParameters.Add("animationStyle", VRChat.API.Client.ClientUtils.ParameterToString(animationStyle)); // form parameter
            }
            if (maskTag != null)
            {
                localVarRequestOptions.FormParameters.Add("maskTag", VRChat.API.Client.ClientUtils.ParameterToString(maskTag)); // form parameter
            }

            localVarRequestOptions.Operation = "FilesApi.UploadImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/file/image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
