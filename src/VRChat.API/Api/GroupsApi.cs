/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRChat.API.Client;
using VRChat.API.Model;

namespace VRChat.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Group Gallery Image
        /// </summary>
        /// <remarks>
        /// Adds an image to a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="addGroupGalleryImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupGalleryImage</returns>
        GroupGalleryImage AddGroupGalleryImage(string groupId, string groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, int operationIndex = 0);

        /// <summary>
        /// Add Group Gallery Image
        /// </summary>
        /// <remarks>
        /// Adds an image to a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="addGroupGalleryImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupGalleryImage</returns>
        ApiResponse<GroupGalleryImage> AddGroupGalleryImageWithHttpInfo(string groupId, string groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, int operationIndex = 0);
        /// <summary>
        /// Add Role to GroupMember
        /// </summary>
        /// <remarks>
        /// Adds a Role to a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> AddGroupMemberRole(string groupId, string userId, string groupRoleId, int operationIndex = 0);

        /// <summary>
        /// Add Role to GroupMember
        /// </summary>
        /// <remarks>
        /// Adds a Role to a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> AddGroupMemberRoleWithHttpInfo(string groupId, string userId, string groupRoleId, int operationIndex = 0);
        /// <summary>
        /// Create a post in a Group
        /// </summary>
        /// <remarks>
        /// Create a post in a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupPost</returns>
        GroupPost AddGroupPost(string groupId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0);

        /// <summary>
        /// Create a post in a Group
        /// </summary>
        /// <remarks>
        /// Create a post in a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupPost</returns>
        ApiResponse<GroupPost> AddGroupPostWithHttpInfo(string groupId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0);
        /// <summary>
        /// Ban Group Member
        /// </summary>
        /// <remarks>
        /// Bans a user from a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="banGroupMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupMember</returns>
        GroupMember BanGroupMember(string groupId, BanGroupMemberRequest banGroupMemberRequest, int operationIndex = 0);

        /// <summary>
        /// Ban Group Member
        /// </summary>
        /// <remarks>
        /// Bans a user from a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="banGroupMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupMember</returns>
        ApiResponse<GroupMember> BanGroupMemberWithHttpInfo(string groupId, BanGroupMemberRequest banGroupMemberRequest, int operationIndex = 0);
        /// <summary>
        /// Cancel Group Join Request
        /// </summary>
        /// <remarks>
        /// Cancels a request sent to join the group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelGroupRequest(string groupId, int operationIndex = 0);

        /// <summary>
        /// Cancel Group Join Request
        /// </summary>
        /// <remarks>
        /// Cancels a request sent to join the group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelGroupRequestWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group CreateGroup(CreateGroupRequest createGroupRequest, int operationIndex = 0);

        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> CreateGroupWithHttpInfo(CreateGroupRequest createGroupRequest, int operationIndex = 0);
        /// <summary>
        /// Create Group Announcement
        /// </summary>
        /// <remarks>
        /// Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupAnnouncementRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupAnnouncement</returns>
        GroupAnnouncement CreateGroupAnnouncement(string groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, int operationIndex = 0);

        /// <summary>
        /// Create Group Announcement
        /// </summary>
        /// <remarks>
        /// Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupAnnouncementRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupAnnouncement</returns>
        ApiResponse<GroupAnnouncement> CreateGroupAnnouncementWithHttpInfo(string groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, int operationIndex = 0);
        /// <summary>
        /// Create Group Gallery
        /// </summary>
        /// <remarks>
        /// Creates a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupGalleryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupGallery</returns>
        GroupGallery CreateGroupGallery(string groupId, CreateGroupGalleryRequest createGroupGalleryRequest, int operationIndex = 0);

        /// <summary>
        /// Create Group Gallery
        /// </summary>
        /// <remarks>
        /// Creates a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupGalleryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupGallery</returns>
        ApiResponse<GroupGallery> CreateGroupGalleryWithHttpInfo(string groupId, CreateGroupGalleryRequest createGroupGalleryRequest, int operationIndex = 0);
        /// <summary>
        /// Invite User to Group
        /// </summary>
        /// <remarks>
        /// Sends an invite to a user to join the group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupInviteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateGroupInvite(string groupId, CreateGroupInviteRequest createGroupInviteRequest, int operationIndex = 0);

        /// <summary>
        /// Invite User to Group
        /// </summary>
        /// <remarks>
        /// Sends an invite to a user to join the group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupInviteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateGroupInviteWithHttpInfo(string groupId, CreateGroupInviteRequest createGroupInviteRequest, int operationIndex = 0);
        /// <summary>
        /// Create GroupRole
        /// </summary>
        /// <remarks>
        /// Create a Group role.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupRole</returns>
        GroupRole CreateGroupRole(string groupId, CreateGroupRoleRequest createGroupRoleRequest, int operationIndex = 0);

        /// <summary>
        /// Create GroupRole
        /// </summary>
        /// <remarks>
        /// Create a Group role.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupRole</returns>
        ApiResponse<GroupRole> CreateGroupRoleWithHttpInfo(string groupId, CreateGroupRoleRequest createGroupRoleRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Deletes a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success DeleteGroup(string groupId, int operationIndex = 0);

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Deletes a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteGroupWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Delete Group Announcement
        /// </summary>
        /// <remarks>
        /// Deletes the announcement for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success DeleteGroupAnnouncement(string groupId, int operationIndex = 0);

        /// <summary>
        /// Delete Group Announcement
        /// </summary>
        /// <remarks>
        /// Deletes the announcement for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteGroupAnnouncementWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Delete Group Gallery
        /// </summary>
        /// <remarks>
        /// Deletes a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success DeleteGroupGallery(string groupId, string groupGalleryId, int operationIndex = 0);

        /// <summary>
        /// Delete Group Gallery
        /// </summary>
        /// <remarks>
        /// Deletes a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteGroupGalleryWithHttpInfo(string groupId, string groupGalleryId, int operationIndex = 0);
        /// <summary>
        /// Delete Group Gallery Image
        /// </summary>
        /// <remarks>
        /// Deletes an image from a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="groupGalleryImageId">Must be a valid group gallery image ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success DeleteGroupGalleryImage(string groupId, string groupGalleryId, string groupGalleryImageId, int operationIndex = 0);

        /// <summary>
        /// Delete Group Gallery Image
        /// </summary>
        /// <remarks>
        /// Deletes an image from a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="groupGalleryImageId">Must be a valid group gallery image ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteGroupGalleryImageWithHttpInfo(string groupId, string groupGalleryId, string groupGalleryImageId, int operationIndex = 0);
        /// <summary>
        /// Delete User Invite
        /// </summary>
        /// <remarks>
        /// Deletes an Group invite sent to a User
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteGroupInvite(string groupId, string userId, int operationIndex = 0);

        /// <summary>
        /// Delete User Invite
        /// </summary>
        /// <remarks>
        /// Deletes an Group invite sent to a User
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupInviteWithHttpInfo(string groupId, string userId, int operationIndex = 0);
        /// <summary>
        /// Delete a Group post
        /// </summary>
        /// <remarks>
        /// Delete a Group post
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success DeleteGroupPost(string groupId, string notificationId, int operationIndex = 0);

        /// <summary>
        /// Delete a Group post
        /// </summary>
        /// <remarks>
        /// Delete a Group post
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteGroupPostWithHttpInfo(string groupId, string notificationId, int operationIndex = 0);
        /// <summary>
        /// Delete Group Role
        /// </summary>
        /// <remarks>
        /// Deletes a Group Role by ID and returns the remaining roles.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupRole&gt;</returns>
        List<GroupRole> DeleteGroupRole(string groupId, string groupRoleId, int operationIndex = 0);

        /// <summary>
        /// Delete Group Role
        /// </summary>
        /// <remarks>
        /// Deletes a Group Role by ID and returns the remaining roles.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupRole&gt;</returns>
        ApiResponse<List<GroupRole>> DeleteGroupRoleWithHttpInfo(string groupId, string groupRoleId, int operationIndex = 0);
        /// <summary>
        /// Get Group by ID
        /// </summary>
        /// <remarks>
        /// Returns a single Group by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="includeRoles">Include roles for the Group object. Defaults to false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group GetGroup(string groupId, bool? includeRoles = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Group by ID
        /// </summary>
        /// <remarks>
        /// Returns a single Group by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="includeRoles">Include roles for the Group object. Defaults to false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetGroupWithHttpInfo(string groupId, bool? includeRoles = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Group Announcement
        /// </summary>
        /// <remarks>
        /// Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupAnnouncement</returns>
        GroupAnnouncement GetGroupAnnouncements(string groupId, int operationIndex = 0);

        /// <summary>
        /// Get Group Announcement
        /// </summary>
        /// <remarks>
        /// Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupAnnouncement</returns>
        ApiResponse<GroupAnnouncement> GetGroupAnnouncementsWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Get Group Audit Logs
        /// </summary>
        /// <remarks>
        /// Returns a list of audit logs for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="startDate">The start date of the search range. (optional)</param>
        /// <param name="endDate">The end date of the search range. (optional)</param>
        /// <param name="actorIds">The comma-separated actor ids to search for. (optional)</param>
        /// <param name="eventTypes">The comma-separated event types to search for. (optional)</param>
        /// <param name="targetIds">The comma-separated target ids to search for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedGroupAuditLogEntryList</returns>
        PaginatedGroupAuditLogEntryList GetGroupAuditLogs(string groupId, int? n = default(int?), int? offset = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string actorIds = default(string), string eventTypes = default(string), string targetIds = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Group Audit Logs
        /// </summary>
        /// <remarks>
        /// Returns a list of audit logs for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="startDate">The start date of the search range. (optional)</param>
        /// <param name="endDate">The end date of the search range. (optional)</param>
        /// <param name="actorIds">The comma-separated actor ids to search for. (optional)</param>
        /// <param name="eventTypes">The comma-separated event types to search for. (optional)</param>
        /// <param name="targetIds">The comma-separated target ids to search for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedGroupAuditLogEntryList</returns>
        ApiResponse<PaginatedGroupAuditLogEntryList> GetGroupAuditLogsWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string actorIds = default(string), string eventTypes = default(string), string targetIds = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Group Bans
        /// </summary>
        /// <remarks>
        /// Returns a list of banned users for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupMember&gt;</returns>
        List<GroupMember> GetGroupBans(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Group Bans
        /// </summary>
        /// <remarks>
        /// Returns a list of banned users for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupMember&gt;</returns>
        ApiResponse<List<GroupMember>> GetGroupBansWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Group Gallery Images
        /// </summary>
        /// <remarks>
        /// Returns a list of images for a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="approved">If specified, only returns images that have been approved or not approved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupGalleryImage&gt;</returns>
        List<GroupGalleryImage> GetGroupGalleryImages(string groupId, string groupGalleryId, int? n = default(int?), int? offset = default(int?), bool? approved = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Group Gallery Images
        /// </summary>
        /// <remarks>
        /// Returns a list of images for a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="approved">If specified, only returns images that have been approved or not approved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupGalleryImage&gt;</returns>
        ApiResponse<List<GroupGalleryImage>> GetGroupGalleryImagesWithHttpInfo(string groupId, string groupGalleryId, int? n = default(int?), int? offset = default(int?), bool? approved = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Group Instances
        /// </summary>
        /// <remarks>
        /// Returns a list of group instances
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupInstance&gt;</returns>
        List<GroupInstance> GetGroupInstances(string groupId, int operationIndex = 0);

        /// <summary>
        /// Get Group Instances
        /// </summary>
        /// <remarks>
        /// Returns a list of group instances
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupInstance&gt;</returns>
        ApiResponse<List<GroupInstance>> GetGroupInstancesWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Get Group Invites Sent
        /// </summary>
        /// <remarks>
        /// Returns a list of members that have been invited to the Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupMember&gt;</returns>
        List<GroupMember> GetGroupInvites(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Group Invites Sent
        /// </summary>
        /// <remarks>
        /// Returns a list of members that have been invited to the Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupMember&gt;</returns>
        ApiResponse<List<GroupMember>> GetGroupInvitesWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Group Member
        /// </summary>
        /// <remarks>
        /// Returns a LimitedGroup Member.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupLimitedMember</returns>
        GroupLimitedMember GetGroupMember(string groupId, string userId, int operationIndex = 0);

        /// <summary>
        /// Get Group Member
        /// </summary>
        /// <remarks>
        /// Returns a LimitedGroup Member.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupLimitedMember</returns>
        ApiResponse<GroupLimitedMember> GetGroupMemberWithHttpInfo(string groupId, string userId, int operationIndex = 0);
        /// <summary>
        /// List Group Members
        /// </summary>
        /// <remarks>
        /// Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="sort">The sort order of Group Member results (optional)</param>
        /// <param name="roleId">Only returns members with a specific groupRoleId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupMember&gt;</returns>
        List<GroupMember> GetGroupMembers(string groupId, int? n = default(int?), int? offset = default(int?), GroupSearchSort? sort = default(GroupSearchSort?), string roleId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Group Members
        /// </summary>
        /// <remarks>
        /// Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="sort">The sort order of Group Member results (optional)</param>
        /// <param name="roleId">Only returns members with a specific groupRoleId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupMember&gt;</returns>
        ApiResponse<List<GroupMember>> GetGroupMembersWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), GroupSearchSort? sort = default(GroupSearchSort?), string roleId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Group Permissions
        /// </summary>
        /// <remarks>
        /// Returns a List of all possible/available permissions for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupPermission&gt;</returns>
        List<GroupPermission> GetGroupPermissions(string groupId, int operationIndex = 0);

        /// <summary>
        /// List Group Permissions
        /// </summary>
        /// <remarks>
        /// Returns a List of all possible/available permissions for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupPermission&gt;</returns>
        ApiResponse<List<GroupPermission>> GetGroupPermissionsWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Get posts from a Group
        /// </summary>
        /// <remarks>
        /// Get posts from a Group
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="publicOnly">See public posts only. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGroupPosts200Response</returns>
        GetGroupPosts200Response GetGroupPosts(string groupId, int? n = default(int?), int? offset = default(int?), bool? publicOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get posts from a Group
        /// </summary>
        /// <remarks>
        /// Get posts from a Group
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="publicOnly">See public posts only. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGroupPosts200Response</returns>
        ApiResponse<GetGroupPosts200Response> GetGroupPostsWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), bool? publicOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Group Join Requests
        /// </summary>
        /// <remarks>
        /// Returns a list of members that have requested to join the Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="blocked">See blocked join requests (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupMember&gt;</returns>
        List<GroupMember> GetGroupRequests(string groupId, int? n = default(int?), int? offset = default(int?), bool? blocked = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Group Join Requests
        /// </summary>
        /// <remarks>
        /// Returns a list of members that have requested to join the Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="blocked">See blocked join requests (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupMember&gt;</returns>
        ApiResponse<List<GroupMember>> GetGroupRequestsWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), bool? blocked = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Group Role Templates
        /// </summary>
        /// <remarks>
        /// Obtain predefined templates for group roles
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, GroupRoleTemplateValues&gt;</returns>
        Dictionary<string, GroupRoleTemplateValues> GetGroupRoleTemplates(int operationIndex = 0);

        /// <summary>
        /// Get Group Role Templates
        /// </summary>
        /// <remarks>
        /// Obtain predefined templates for group roles
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, GroupRoleTemplateValues&gt;</returns>
        ApiResponse<Dictionary<string, GroupRoleTemplateValues>> GetGroupRoleTemplatesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Group Roles
        /// </summary>
        /// <remarks>
        /// Returns a Group Role by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupRole&gt;</returns>
        List<GroupRole> GetGroupRoles(string groupId, int operationIndex = 0);

        /// <summary>
        /// Get Group Roles
        /// </summary>
        /// <remarks>
        /// Returns a Group Role by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupRole&gt;</returns>
        ApiResponse<List<GroupRole>> GetGroupRolesWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Join Group
        /// </summary>
        /// <remarks>
        /// Join a Group by ID and returns the member object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupMember</returns>
        GroupMember JoinGroup(string groupId, int operationIndex = 0);

        /// <summary>
        /// Join Group
        /// </summary>
        /// <remarks>
        /// Join a Group by ID and returns the member object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupMember</returns>
        ApiResponse<GroupMember> JoinGroupWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Kick Group Member
        /// </summary>
        /// <remarks>
        /// Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void KickGroupMember(string groupId, string userId, int operationIndex = 0);

        /// <summary>
        /// Kick Group Member
        /// </summary>
        /// <remarks>
        /// Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KickGroupMemberWithHttpInfo(string groupId, string userId, int operationIndex = 0);
        /// <summary>
        /// Leave Group
        /// </summary>
        /// <remarks>
        /// Leave a group by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LeaveGroup(string groupId, int operationIndex = 0);

        /// <summary>
        /// Leave Group
        /// </summary>
        /// <remarks>
        /// Leave a group by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeaveGroupWithHttpInfo(string groupId, int operationIndex = 0);
        /// <summary>
        /// Remove Role from GroupMember
        /// </summary>
        /// <remarks>
        /// Removes a Role from a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> RemoveGroupMemberRole(string groupId, string userId, string groupRoleId, int operationIndex = 0);

        /// <summary>
        /// Remove Role from GroupMember
        /// </summary>
        /// <remarks>
        /// Removes a Role from a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> RemoveGroupMemberRoleWithHttpInfo(string groupId, string userId, string groupRoleId, int operationIndex = 0);
        /// <summary>
        /// Respond Group Join request
        /// </summary>
        /// <remarks>
        /// Responds to a Group Join Request with Accept/Deny
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="respondGroupJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RespondGroupJoinRequest(string groupId, string userId, RespondGroupJoinRequest respondGroupJoinRequest, int operationIndex = 0);

        /// <summary>
        /// Respond Group Join request
        /// </summary>
        /// <remarks>
        /// Responds to a Group Join Request with Accept/Deny
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="respondGroupJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RespondGroupJoinRequestWithHttpInfo(string groupId, string userId, RespondGroupJoinRequest respondGroupJoinRequest, int operationIndex = 0);
        /// <summary>
        /// Search Group
        /// </summary>
        /// <remarks>
        /// Searches Groups by name or shortCode
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search for, can be either Group Name or Group shortCode (optional)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LimitedGroup&gt;</returns>
        List<LimitedGroup> SearchGroups(string query = default(string), int? offset = default(int?), int? n = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Group
        /// </summary>
        /// <remarks>
        /// Searches Groups by name or shortCode
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search for, can be either Group Name or Group shortCode (optional)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LimitedGroup&gt;</returns>
        ApiResponse<List<LimitedGroup>> SearchGroupsWithHttpInfo(string query = default(string), int? offset = default(int?), int? n = default(int?), int operationIndex = 0);
        /// <summary>
        /// Unban Group Member
        /// </summary>
        /// <remarks>
        /// Unbans a user from a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupMember</returns>
        GroupMember UnbanGroupMember(string groupId, string userId, int operationIndex = 0);

        /// <summary>
        /// Unban Group Member
        /// </summary>
        /// <remarks>
        /// Unbans a user from a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupMember</returns>
        ApiResponse<GroupMember> UnbanGroupMemberWithHttpInfo(string groupId, string userId, int operationIndex = 0);
        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Updates a Group and returns it.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group UpdateGroup(string groupId, UpdateGroupRequest updateGroupRequest = default(UpdateGroupRequest), int operationIndex = 0);

        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Updates a Group and returns it.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> UpdateGroupWithHttpInfo(string groupId, UpdateGroupRequest updateGroupRequest = default(UpdateGroupRequest), int operationIndex = 0);
        /// <summary>
        /// Update Group Gallery
        /// </summary>
        /// <remarks>
        /// Updates a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="updateGroupGalleryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupGallery</returns>
        GroupGallery UpdateGroupGallery(string groupId, string groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest = default(UpdateGroupGalleryRequest), int operationIndex = 0);

        /// <summary>
        /// Update Group Gallery
        /// </summary>
        /// <remarks>
        /// Updates a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="updateGroupGalleryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupGallery</returns>
        ApiResponse<GroupGallery> UpdateGroupGalleryWithHttpInfo(string groupId, string groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest = default(UpdateGroupGalleryRequest), int operationIndex = 0);
        /// <summary>
        /// Update Group Member
        /// </summary>
        /// <remarks>
        /// Updates a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateGroupMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupLimitedMember</returns>
        GroupLimitedMember UpdateGroupMember(string groupId, string userId, UpdateGroupMemberRequest updateGroupMemberRequest = default(UpdateGroupMemberRequest), int operationIndex = 0);

        /// <summary>
        /// Update Group Member
        /// </summary>
        /// <remarks>
        /// Updates a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateGroupMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupLimitedMember</returns>
        ApiResponse<GroupLimitedMember> UpdateGroupMemberWithHttpInfo(string groupId, string userId, UpdateGroupMemberRequest updateGroupMemberRequest = default(UpdateGroupMemberRequest), int operationIndex = 0);
        /// <summary>
        /// Edits a Group post
        /// </summary>
        /// <remarks>
        /// Edits a Group post
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupPost</returns>
        GroupPost UpdateGroupPost(string groupId, string notificationId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0);

        /// <summary>
        /// Edits a Group post
        /// </summary>
        /// <remarks>
        /// Edits a Group post
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupPost</returns>
        ApiResponse<GroupPost> UpdateGroupPostWithHttpInfo(string groupId, string notificationId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0);
        /// <summary>
        /// Update Group Representation
        /// </summary>
        /// <remarks>
        /// Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRepresentationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success UpdateGroupRepresentation(string groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, int operationIndex = 0);

        /// <summary>
        /// Update Group Representation
        /// </summary>
        /// <remarks>
        /// Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRepresentationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateGroupRepresentationWithHttpInfo(string groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, int operationIndex = 0);
        /// <summary>
        /// Update Group Role
        /// </summary>
        /// <remarks>
        /// Updates a group role by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupRole&gt;</returns>
        List<GroupRole> UpdateGroupRole(string groupId, string groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), int operationIndex = 0);

        /// <summary>
        /// Update Group Role
        /// </summary>
        /// <remarks>
        /// Updates a group role by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupRole&gt;</returns>
        ApiResponse<List<GroupRole>> UpdateGroupRoleWithHttpInfo(string groupId, string groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Group Gallery Image
        /// </summary>
        /// <remarks>
        /// Adds an image to a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="addGroupGalleryImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupGalleryImage</returns>
        System.Threading.Tasks.Task<GroupGalleryImage> AddGroupGalleryImageAsync(string groupId, string groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Group Gallery Image
        /// </summary>
        /// <remarks>
        /// Adds an image to a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="addGroupGalleryImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupGalleryImage)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupGalleryImage>> AddGroupGalleryImageWithHttpInfoAsync(string groupId, string groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Role to GroupMember
        /// </summary>
        /// <remarks>
        /// Adds a Role to a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> AddGroupMemberRoleAsync(string groupId, string userId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Role to GroupMember
        /// </summary>
        /// <remarks>
        /// Adds a Role to a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> AddGroupMemberRoleWithHttpInfoAsync(string groupId, string userId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a post in a Group
        /// </summary>
        /// <remarks>
        /// Create a post in a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupPost</returns>
        System.Threading.Tasks.Task<GroupPost> AddGroupPostAsync(string groupId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a post in a Group
        /// </summary>
        /// <remarks>
        /// Create a post in a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPost>> AddGroupPostWithHttpInfoAsync(string groupId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ban Group Member
        /// </summary>
        /// <remarks>
        /// Bans a user from a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="banGroupMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupMember</returns>
        System.Threading.Tasks.Task<GroupMember> BanGroupMemberAsync(string groupId, BanGroupMemberRequest banGroupMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ban Group Member
        /// </summary>
        /// <remarks>
        /// Bans a user from a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="banGroupMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupMember>> BanGroupMemberWithHttpInfoAsync(string groupId, BanGroupMemberRequest banGroupMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Group Join Request
        /// </summary>
        /// <remarks>
        /// Cancels a request sent to join the group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelGroupRequestAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Group Join Request
        /// </summary>
        /// <remarks>
        /// Cancels a request sent to join the group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelGroupRequestWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> CreateGroupAsync(CreateGroupRequest createGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Group
        /// </summary>
        /// <remarks>
        /// Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> CreateGroupWithHttpInfoAsync(CreateGroupRequest createGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Group Announcement
        /// </summary>
        /// <remarks>
        /// Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupAnnouncementRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupAnnouncement</returns>
        System.Threading.Tasks.Task<GroupAnnouncement> CreateGroupAnnouncementAsync(string groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Group Announcement
        /// </summary>
        /// <remarks>
        /// Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupAnnouncementRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupAnnouncement)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupAnnouncement>> CreateGroupAnnouncementWithHttpInfoAsync(string groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Group Gallery
        /// </summary>
        /// <remarks>
        /// Creates a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupGalleryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupGallery</returns>
        System.Threading.Tasks.Task<GroupGallery> CreateGroupGalleryAsync(string groupId, CreateGroupGalleryRequest createGroupGalleryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Group Gallery
        /// </summary>
        /// <remarks>
        /// Creates a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupGalleryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupGallery)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupGallery>> CreateGroupGalleryWithHttpInfoAsync(string groupId, CreateGroupGalleryRequest createGroupGalleryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invite User to Group
        /// </summary>
        /// <remarks>
        /// Sends an invite to a user to join the group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupInviteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateGroupInviteAsync(string groupId, CreateGroupInviteRequest createGroupInviteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invite User to Group
        /// </summary>
        /// <remarks>
        /// Sends an invite to a user to join the group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupInviteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateGroupInviteWithHttpInfoAsync(string groupId, CreateGroupInviteRequest createGroupInviteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create GroupRole
        /// </summary>
        /// <remarks>
        /// Create a Group role.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupRole</returns>
        System.Threading.Tasks.Task<GroupRole> CreateGroupRoleAsync(string groupId, CreateGroupRoleRequest createGroupRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create GroupRole
        /// </summary>
        /// <remarks>
        /// Create a Group role.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupRole>> CreateGroupRoleWithHttpInfoAsync(string groupId, CreateGroupRoleRequest createGroupRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Deletes a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteGroupAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Deletes a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteGroupWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Group Announcement
        /// </summary>
        /// <remarks>
        /// Deletes the announcement for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteGroupAnnouncementAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Group Announcement
        /// </summary>
        /// <remarks>
        /// Deletes the announcement for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteGroupAnnouncementWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Group Gallery
        /// </summary>
        /// <remarks>
        /// Deletes a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteGroupGalleryAsync(string groupId, string groupGalleryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Group Gallery
        /// </summary>
        /// <remarks>
        /// Deletes a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteGroupGalleryWithHttpInfoAsync(string groupId, string groupGalleryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Group Gallery Image
        /// </summary>
        /// <remarks>
        /// Deletes an image from a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="groupGalleryImageId">Must be a valid group gallery image ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteGroupGalleryImageAsync(string groupId, string groupGalleryId, string groupGalleryImageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Group Gallery Image
        /// </summary>
        /// <remarks>
        /// Deletes an image from a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="groupGalleryImageId">Must be a valid group gallery image ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteGroupGalleryImageWithHttpInfoAsync(string groupId, string groupGalleryId, string groupGalleryImageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete User Invite
        /// </summary>
        /// <remarks>
        /// Deletes an Group invite sent to a User
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupInviteAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete User Invite
        /// </summary>
        /// <remarks>
        /// Deletes an Group invite sent to a User
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupInviteWithHttpInfoAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Group post
        /// </summary>
        /// <remarks>
        /// Delete a Group post
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteGroupPostAsync(string groupId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Group post
        /// </summary>
        /// <remarks>
        /// Delete a Group post
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteGroupPostWithHttpInfoAsync(string groupId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Group Role
        /// </summary>
        /// <remarks>
        /// Deletes a Group Role by ID and returns the remaining roles.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupRole&gt;</returns>
        System.Threading.Tasks.Task<List<GroupRole>> DeleteGroupRoleAsync(string groupId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Group Role
        /// </summary>
        /// <remarks>
        /// Deletes a Group Role by ID and returns the remaining roles.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupRole&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupRole>>> DeleteGroupRoleWithHttpInfoAsync(string groupId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group by ID
        /// </summary>
        /// <remarks>
        /// Returns a single Group by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="includeRoles">Include roles for the Group object. Defaults to false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetGroupAsync(string groupId, bool? includeRoles = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group by ID
        /// </summary>
        /// <remarks>
        /// Returns a single Group by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="includeRoles">Include roles for the Group object. Defaults to false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupWithHttpInfoAsync(string groupId, bool? includeRoles = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Announcement
        /// </summary>
        /// <remarks>
        /// Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupAnnouncement</returns>
        System.Threading.Tasks.Task<GroupAnnouncement> GetGroupAnnouncementsAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Announcement
        /// </summary>
        /// <remarks>
        /// Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupAnnouncement)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupAnnouncement>> GetGroupAnnouncementsWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Audit Logs
        /// </summary>
        /// <remarks>
        /// Returns a list of audit logs for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="startDate">The start date of the search range. (optional)</param>
        /// <param name="endDate">The end date of the search range. (optional)</param>
        /// <param name="actorIds">The comma-separated actor ids to search for. (optional)</param>
        /// <param name="eventTypes">The comma-separated event types to search for. (optional)</param>
        /// <param name="targetIds">The comma-separated target ids to search for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedGroupAuditLogEntryList</returns>
        System.Threading.Tasks.Task<PaginatedGroupAuditLogEntryList> GetGroupAuditLogsAsync(string groupId, int? n = default(int?), int? offset = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string actorIds = default(string), string eventTypes = default(string), string targetIds = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Audit Logs
        /// </summary>
        /// <remarks>
        /// Returns a list of audit logs for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="startDate">The start date of the search range. (optional)</param>
        /// <param name="endDate">The end date of the search range. (optional)</param>
        /// <param name="actorIds">The comma-separated actor ids to search for. (optional)</param>
        /// <param name="eventTypes">The comma-separated event types to search for. (optional)</param>
        /// <param name="targetIds">The comma-separated target ids to search for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedGroupAuditLogEntryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedGroupAuditLogEntryList>> GetGroupAuditLogsWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string actorIds = default(string), string eventTypes = default(string), string targetIds = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Bans
        /// </summary>
        /// <remarks>
        /// Returns a list of banned users for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupMember&gt;</returns>
        System.Threading.Tasks.Task<List<GroupMember>> GetGroupBansAsync(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Bans
        /// </summary>
        /// <remarks>
        /// Returns a list of banned users for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupMember>>> GetGroupBansWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Gallery Images
        /// </summary>
        /// <remarks>
        /// Returns a list of images for a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="approved">If specified, only returns images that have been approved or not approved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupGalleryImage&gt;</returns>
        System.Threading.Tasks.Task<List<GroupGalleryImage>> GetGroupGalleryImagesAsync(string groupId, string groupGalleryId, int? n = default(int?), int? offset = default(int?), bool? approved = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Gallery Images
        /// </summary>
        /// <remarks>
        /// Returns a list of images for a Group gallery.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="approved">If specified, only returns images that have been approved or not approved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupGalleryImage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupGalleryImage>>> GetGroupGalleryImagesWithHttpInfoAsync(string groupId, string groupGalleryId, int? n = default(int?), int? offset = default(int?), bool? approved = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Instances
        /// </summary>
        /// <remarks>
        /// Returns a list of group instances
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupInstance&gt;</returns>
        System.Threading.Tasks.Task<List<GroupInstance>> GetGroupInstancesAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Instances
        /// </summary>
        /// <remarks>
        /// Returns a list of group instances
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupInstance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupInstance>>> GetGroupInstancesWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Invites Sent
        /// </summary>
        /// <remarks>
        /// Returns a list of members that have been invited to the Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupMember&gt;</returns>
        System.Threading.Tasks.Task<List<GroupMember>> GetGroupInvitesAsync(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Invites Sent
        /// </summary>
        /// <remarks>
        /// Returns a list of members that have been invited to the Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupMember>>> GetGroupInvitesWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Member
        /// </summary>
        /// <remarks>
        /// Returns a LimitedGroup Member.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupLimitedMember</returns>
        System.Threading.Tasks.Task<GroupLimitedMember> GetGroupMemberAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Member
        /// </summary>
        /// <remarks>
        /// Returns a LimitedGroup Member.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupLimitedMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupLimitedMember>> GetGroupMemberWithHttpInfoAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Group Members
        /// </summary>
        /// <remarks>
        /// Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="sort">The sort order of Group Member results (optional)</param>
        /// <param name="roleId">Only returns members with a specific groupRoleId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupMember&gt;</returns>
        System.Threading.Tasks.Task<List<GroupMember>> GetGroupMembersAsync(string groupId, int? n = default(int?), int? offset = default(int?), GroupSearchSort? sort = default(GroupSearchSort?), string roleId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Group Members
        /// </summary>
        /// <remarks>
        /// Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="sort">The sort order of Group Member results (optional)</param>
        /// <param name="roleId">Only returns members with a specific groupRoleId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupMember>>> GetGroupMembersWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), GroupSearchSort? sort = default(GroupSearchSort?), string roleId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Group Permissions
        /// </summary>
        /// <remarks>
        /// Returns a List of all possible/available permissions for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupPermission&gt;</returns>
        System.Threading.Tasks.Task<List<GroupPermission>> GetGroupPermissionsAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Group Permissions
        /// </summary>
        /// <remarks>
        /// Returns a List of all possible/available permissions for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupPermission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupPermission>>> GetGroupPermissionsWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get posts from a Group
        /// </summary>
        /// <remarks>
        /// Get posts from a Group
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="publicOnly">See public posts only. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupPosts200Response</returns>
        System.Threading.Tasks.Task<GetGroupPosts200Response> GetGroupPostsAsync(string groupId, int? n = default(int?), int? offset = default(int?), bool? publicOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get posts from a Group
        /// </summary>
        /// <remarks>
        /// Get posts from a Group
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="publicOnly">See public posts only. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupPosts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroupPosts200Response>> GetGroupPostsWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), bool? publicOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Join Requests
        /// </summary>
        /// <remarks>
        /// Returns a list of members that have requested to join the Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="blocked">See blocked join requests (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupMember&gt;</returns>
        System.Threading.Tasks.Task<List<GroupMember>> GetGroupRequestsAsync(string groupId, int? n = default(int?), int? offset = default(int?), bool? blocked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Join Requests
        /// </summary>
        /// <remarks>
        /// Returns a list of members that have requested to join the Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="blocked">See blocked join requests (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupMember>>> GetGroupRequestsWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), bool? blocked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Role Templates
        /// </summary>
        /// <remarks>
        /// Obtain predefined templates for group roles
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, GroupRoleTemplateValues&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, GroupRoleTemplateValues>> GetGroupRoleTemplatesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Role Templates
        /// </summary>
        /// <remarks>
        /// Obtain predefined templates for group roles
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, GroupRoleTemplateValues&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, GroupRoleTemplateValues>>> GetGroupRoleTemplatesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Roles
        /// </summary>
        /// <remarks>
        /// Returns a Group Role by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupRole&gt;</returns>
        System.Threading.Tasks.Task<List<GroupRole>> GetGroupRolesAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Roles
        /// </summary>
        /// <remarks>
        /// Returns a Group Role by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupRole&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupRole>>> GetGroupRolesWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Join Group
        /// </summary>
        /// <remarks>
        /// Join a Group by ID and returns the member object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupMember</returns>
        System.Threading.Tasks.Task<GroupMember> JoinGroupAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Join Group
        /// </summary>
        /// <remarks>
        /// Join a Group by ID and returns the member object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupMember>> JoinGroupWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Kick Group Member
        /// </summary>
        /// <remarks>
        /// Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KickGroupMemberAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Kick Group Member
        /// </summary>
        /// <remarks>
        /// Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KickGroupMemberWithHttpInfoAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Leave Group
        /// </summary>
        /// <remarks>
        /// Leave a group by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeaveGroupAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Leave Group
        /// </summary>
        /// <remarks>
        /// Leave a group by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveGroupWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Role from GroupMember
        /// </summary>
        /// <remarks>
        /// Removes a Role from a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> RemoveGroupMemberRoleAsync(string groupId, string userId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Role from GroupMember
        /// </summary>
        /// <remarks>
        /// Removes a Role from a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> RemoveGroupMemberRoleWithHttpInfoAsync(string groupId, string userId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Respond Group Join request
        /// </summary>
        /// <remarks>
        /// Responds to a Group Join Request with Accept/Deny
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="respondGroupJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RespondGroupJoinRequestAsync(string groupId, string userId, RespondGroupJoinRequest respondGroupJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Respond Group Join request
        /// </summary>
        /// <remarks>
        /// Responds to a Group Join Request with Accept/Deny
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="respondGroupJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RespondGroupJoinRequestWithHttpInfoAsync(string groupId, string userId, RespondGroupJoinRequest respondGroupJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Group
        /// </summary>
        /// <remarks>
        /// Searches Groups by name or shortCode
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search for, can be either Group Name or Group shortCode (optional)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LimitedGroup&gt;</returns>
        System.Threading.Tasks.Task<List<LimitedGroup>> SearchGroupsAsync(string query = default(string), int? offset = default(int?), int? n = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Group
        /// </summary>
        /// <remarks>
        /// Searches Groups by name or shortCode
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search for, can be either Group Name or Group shortCode (optional)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LimitedGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LimitedGroup>>> SearchGroupsWithHttpInfoAsync(string query = default(string), int? offset = default(int?), int? n = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unban Group Member
        /// </summary>
        /// <remarks>
        /// Unbans a user from a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupMember</returns>
        System.Threading.Tasks.Task<GroupMember> UnbanGroupMemberAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unban Group Member
        /// </summary>
        /// <remarks>
        /// Unbans a user from a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupMember>> UnbanGroupMemberWithHttpInfoAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Updates a Group and returns it.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> UpdateGroupAsync(string groupId, UpdateGroupRequest updateGroupRequest = default(UpdateGroupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Updates a Group and returns it.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> UpdateGroupWithHttpInfoAsync(string groupId, UpdateGroupRequest updateGroupRequest = default(UpdateGroupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Group Gallery
        /// </summary>
        /// <remarks>
        /// Updates a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="updateGroupGalleryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupGallery</returns>
        System.Threading.Tasks.Task<GroupGallery> UpdateGroupGalleryAsync(string groupId, string groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest = default(UpdateGroupGalleryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Group Gallery
        /// </summary>
        /// <remarks>
        /// Updates a gallery for a Group.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="updateGroupGalleryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupGallery)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupGallery>> UpdateGroupGalleryWithHttpInfoAsync(string groupId, string groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest = default(UpdateGroupGalleryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Group Member
        /// </summary>
        /// <remarks>
        /// Updates a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateGroupMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupLimitedMember</returns>
        System.Threading.Tasks.Task<GroupLimitedMember> UpdateGroupMemberAsync(string groupId, string userId, UpdateGroupMemberRequest updateGroupMemberRequest = default(UpdateGroupMemberRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Group Member
        /// </summary>
        /// <remarks>
        /// Updates a Group Member
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateGroupMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupLimitedMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupLimitedMember>> UpdateGroupMemberWithHttpInfoAsync(string groupId, string userId, UpdateGroupMemberRequest updateGroupMemberRequest = default(UpdateGroupMemberRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edits a Group post
        /// </summary>
        /// <remarks>
        /// Edits a Group post
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupPost</returns>
        System.Threading.Tasks.Task<GroupPost> UpdateGroupPostAsync(string groupId, string notificationId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edits a Group post
        /// </summary>
        /// <remarks>
        /// Edits a Group post
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPost>> UpdateGroupPostWithHttpInfoAsync(string groupId, string notificationId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Group Representation
        /// </summary>
        /// <remarks>
        /// Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRepresentationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateGroupRepresentationAsync(string groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Group Representation
        /// </summary>
        /// <remarks>
        /// Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRepresentationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateGroupRepresentationWithHttpInfoAsync(string groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Group Role
        /// </summary>
        /// <remarks>
        /// Updates a group role by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupRole&gt;</returns>
        System.Threading.Tasks.Task<List<GroupRole>> UpdateGroupRoleAsync(string groupId, string groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Group Role
        /// </summary>
        /// <remarks>
        /// Updates a group role by ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupRole&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupRole>>> UpdateGroupRoleWithHttpInfoAsync(string groupId, string groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IGroupsApiSync, IGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private VRChat.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(string basePath)
        {
            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                new VRChat.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(VRChat.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupsApi(VRChat.API.Client.ISynchronousClient client, VRChat.API.Client.IAsynchronousClient asyncClient, VRChat.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRChat.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRChat.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRChat.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRChat.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Group Gallery Image Adds an image to a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="addGroupGalleryImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupGalleryImage</returns>
        public GroupGalleryImage AddGroupGalleryImage(string groupId, string groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupGalleryImage> localVarResponse = AddGroupGalleryImageWithHttpInfo(groupId, groupGalleryId, addGroupGalleryImageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Group Gallery Image Adds an image to a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="addGroupGalleryImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupGalleryImage</returns>
        public VRChat.API.Client.ApiResponse<GroupGalleryImage> AddGroupGalleryImageWithHttpInfo(string groupId, string groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddGroupGalleryImage");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->AddGroupGalleryImage");
            }

            // verify the required parameter 'addGroupGalleryImageRequest' is set
            if (addGroupGalleryImageRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'addGroupGalleryImageRequest' when calling GroupsApi->AddGroupGalleryImage");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter
            localVarRequestOptions.Data = addGroupGalleryImageRequest;

            localVarRequestOptions.Operation = "GroupsApi.AddGroupGalleryImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupGalleryImage>("/groups/{groupId}/galleries/{groupGalleryId}/images", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupGalleryImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Group Gallery Image Adds an image to a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="addGroupGalleryImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupGalleryImage</returns>
        public async System.Threading.Tasks.Task<GroupGalleryImage> AddGroupGalleryImageAsync(string groupId, string groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupGalleryImage> localVarResponse = await AddGroupGalleryImageWithHttpInfoAsync(groupId, groupGalleryId, addGroupGalleryImageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Group Gallery Image Adds an image to a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="addGroupGalleryImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupGalleryImage)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupGalleryImage>> AddGroupGalleryImageWithHttpInfoAsync(string groupId, string groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddGroupGalleryImage");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->AddGroupGalleryImage");
            }

            // verify the required parameter 'addGroupGalleryImageRequest' is set
            if (addGroupGalleryImageRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'addGroupGalleryImageRequest' when calling GroupsApi->AddGroupGalleryImage");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter
            localVarRequestOptions.Data = addGroupGalleryImageRequest;

            localVarRequestOptions.Operation = "GroupsApi.AddGroupGalleryImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupGalleryImage>("/groups/{groupId}/galleries/{groupGalleryId}/images", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupGalleryImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Role to GroupMember Adds a Role to a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> AddGroupMemberRole(string groupId, string userId, string groupRoleId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<string>> localVarResponse = AddGroupMemberRoleWithHttpInfo(groupId, userId, groupRoleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Role to GroupMember Adds a Role to a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<string>> AddGroupMemberRoleWithHttpInfo(string groupId, string userId, string groupRoleId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddGroupMemberRole");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->AddGroupMemberRole");
            }

            // verify the required parameter 'groupRoleId' is set
            if (groupRoleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupRoleId' when calling GroupsApi->AddGroupMemberRole");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupRoleId", VRChat.API.Client.ClientUtils.ParameterToString(groupRoleId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.AddGroupMemberRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<string>>("/groups/{groupId}/members/{userId}/roles/{groupRoleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupMemberRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Role to GroupMember Adds a Role to a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> AddGroupMemberRoleAsync(string groupId, string userId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<string>> localVarResponse = await AddGroupMemberRoleWithHttpInfoAsync(groupId, userId, groupRoleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Role to GroupMember Adds a Role to a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<string>>> AddGroupMemberRoleWithHttpInfoAsync(string groupId, string userId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddGroupMemberRole");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->AddGroupMemberRole");
            }

            // verify the required parameter 'groupRoleId' is set
            if (groupRoleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupRoleId' when calling GroupsApi->AddGroupMemberRole");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupRoleId", VRChat.API.Client.ClientUtils.ParameterToString(groupRoleId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.AddGroupMemberRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<string>>("/groups/{groupId}/members/{userId}/roles/{groupRoleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupMemberRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a post in a Group Create a post in a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupPost</returns>
        public GroupPost AddGroupPost(string groupId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupPost> localVarResponse = AddGroupPostWithHttpInfo(groupId, createGroupPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a post in a Group Create a post in a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupPost</returns>
        public VRChat.API.Client.ApiResponse<GroupPost> AddGroupPostWithHttpInfo(string groupId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddGroupPost");
            }

            // verify the required parameter 'createGroupPostRequest' is set
            if (createGroupPostRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupPostRequest' when calling GroupsApi->AddGroupPost");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupPostRequest;

            localVarRequestOptions.Operation = "GroupsApi.AddGroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupPost>("/groups/{groupId}/posts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a post in a Group Create a post in a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupPost</returns>
        public async System.Threading.Tasks.Task<GroupPost> AddGroupPostAsync(string groupId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupPost> localVarResponse = await AddGroupPostWithHttpInfoAsync(groupId, createGroupPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a post in a Group Create a post in a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupPost)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupPost>> AddGroupPostWithHttpInfoAsync(string groupId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddGroupPost");
            }

            // verify the required parameter 'createGroupPostRequest' is set
            if (createGroupPostRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupPostRequest' when calling GroupsApi->AddGroupPost");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupPostRequest;

            localVarRequestOptions.Operation = "GroupsApi.AddGroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupPost>("/groups/{groupId}/posts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ban Group Member Bans a user from a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="banGroupMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupMember</returns>
        public GroupMember BanGroupMember(string groupId, BanGroupMemberRequest banGroupMemberRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupMember> localVarResponse = BanGroupMemberWithHttpInfo(groupId, banGroupMemberRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ban Group Member Bans a user from a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="banGroupMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupMember</returns>
        public VRChat.API.Client.ApiResponse<GroupMember> BanGroupMemberWithHttpInfo(string groupId, BanGroupMemberRequest banGroupMemberRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->BanGroupMember");
            }

            // verify the required parameter 'banGroupMemberRequest' is set
            if (banGroupMemberRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'banGroupMemberRequest' when calling GroupsApi->BanGroupMember");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = banGroupMemberRequest;

            localVarRequestOptions.Operation = "GroupsApi.BanGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupMember>("/groups/{groupId}/bans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BanGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ban Group Member Bans a user from a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="banGroupMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupMember</returns>
        public async System.Threading.Tasks.Task<GroupMember> BanGroupMemberAsync(string groupId, BanGroupMemberRequest banGroupMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupMember> localVarResponse = await BanGroupMemberWithHttpInfoAsync(groupId, banGroupMemberRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ban Group Member Bans a user from a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="banGroupMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupMember)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupMember>> BanGroupMemberWithHttpInfoAsync(string groupId, BanGroupMemberRequest banGroupMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->BanGroupMember");
            }

            // verify the required parameter 'banGroupMemberRequest' is set
            if (banGroupMemberRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'banGroupMemberRequest' when calling GroupsApi->BanGroupMember");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = banGroupMemberRequest;

            localVarRequestOptions.Operation = "GroupsApi.BanGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupMember>("/groups/{groupId}/bans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BanGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Group Join Request Cancels a request sent to join the group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelGroupRequest(string groupId, int operationIndex = 0)
        {
            CancelGroupRequestWithHttpInfo(groupId);
        }

        /// <summary>
        /// Cancel Group Join Request Cancels a request sent to join the group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRChat.API.Client.ApiResponse<Object> CancelGroupRequestWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CancelGroupRequest");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.CancelGroupRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupId}/requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelGroupRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Group Join Request Cancels a request sent to join the group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelGroupRequestAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelGroupRequestWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel Group Join Request Cancels a request sent to join the group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Object>> CancelGroupRequestWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CancelGroupRequest");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.CancelGroupRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupId}/requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelGroupRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Group Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group CreateGroup(CreateGroupRequest createGroupRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Group> localVarResponse = CreateGroupWithHttpInfo(createGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public VRChat.API.Client.ApiResponse<Group> CreateGroupWithHttpInfo(CreateGroupRequest createGroupRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createGroupRequest' is set
            if (createGroupRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupRequest' when calling GroupsApi->CreateGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createGroupRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Group>("/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Group Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> CreateGroupAsync(CreateGroupRequest createGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Group> localVarResponse = await CreateGroupWithHttpInfoAsync(createGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Group>> CreateGroupWithHttpInfoAsync(CreateGroupRequest createGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createGroupRequest' is set
            if (createGroupRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupRequest' when calling GroupsApi->CreateGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createGroupRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Group>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Group Announcement Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupAnnouncementRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupAnnouncement</returns>
        public GroupAnnouncement CreateGroupAnnouncement(string groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupAnnouncement> localVarResponse = CreateGroupAnnouncementWithHttpInfo(groupId, createGroupAnnouncementRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Announcement Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupAnnouncementRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupAnnouncement</returns>
        public VRChat.API.Client.ApiResponse<GroupAnnouncement> CreateGroupAnnouncementWithHttpInfo(string groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CreateGroupAnnouncement");
            }

            // verify the required parameter 'createGroupAnnouncementRequest' is set
            if (createGroupAnnouncementRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupAnnouncementRequest' when calling GroupsApi->CreateGroupAnnouncement");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupAnnouncementRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroupAnnouncement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupAnnouncement>("/groups/{groupId}/announcement", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupAnnouncement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Group Announcement Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupAnnouncementRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupAnnouncement</returns>
        public async System.Threading.Tasks.Task<GroupAnnouncement> CreateGroupAnnouncementAsync(string groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupAnnouncement> localVarResponse = await CreateGroupAnnouncementWithHttpInfoAsync(groupId, createGroupAnnouncementRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Announcement Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupAnnouncementRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupAnnouncement)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupAnnouncement>> CreateGroupAnnouncementWithHttpInfoAsync(string groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CreateGroupAnnouncement");
            }

            // verify the required parameter 'createGroupAnnouncementRequest' is set
            if (createGroupAnnouncementRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupAnnouncementRequest' when calling GroupsApi->CreateGroupAnnouncement");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupAnnouncementRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroupAnnouncement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupAnnouncement>("/groups/{groupId}/announcement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupAnnouncement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Group Gallery Creates a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupGalleryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupGallery</returns>
        public GroupGallery CreateGroupGallery(string groupId, CreateGroupGalleryRequest createGroupGalleryRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupGallery> localVarResponse = CreateGroupGalleryWithHttpInfo(groupId, createGroupGalleryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Gallery Creates a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupGalleryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupGallery</returns>
        public VRChat.API.Client.ApiResponse<GroupGallery> CreateGroupGalleryWithHttpInfo(string groupId, CreateGroupGalleryRequest createGroupGalleryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CreateGroupGallery");
            }

            // verify the required parameter 'createGroupGalleryRequest' is set
            if (createGroupGalleryRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupGalleryRequest' when calling GroupsApi->CreateGroupGallery");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupGalleryRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroupGallery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupGallery>("/groups/{groupId}/galleries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupGallery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Group Gallery Creates a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupGalleryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupGallery</returns>
        public async System.Threading.Tasks.Task<GroupGallery> CreateGroupGalleryAsync(string groupId, CreateGroupGalleryRequest createGroupGalleryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupGallery> localVarResponse = await CreateGroupGalleryWithHttpInfoAsync(groupId, createGroupGalleryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Group Gallery Creates a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupGalleryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupGallery)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupGallery>> CreateGroupGalleryWithHttpInfoAsync(string groupId, CreateGroupGalleryRequest createGroupGalleryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CreateGroupGallery");
            }

            // verify the required parameter 'createGroupGalleryRequest' is set
            if (createGroupGalleryRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupGalleryRequest' when calling GroupsApi->CreateGroupGallery");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupGalleryRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroupGallery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupGallery>("/groups/{groupId}/galleries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupGallery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite User to Group Sends an invite to a user to join the group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupInviteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateGroupInvite(string groupId, CreateGroupInviteRequest createGroupInviteRequest, int operationIndex = 0)
        {
            CreateGroupInviteWithHttpInfo(groupId, createGroupInviteRequest);
        }

        /// <summary>
        /// Invite User to Group Sends an invite to a user to join the group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupInviteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRChat.API.Client.ApiResponse<Object> CreateGroupInviteWithHttpInfo(string groupId, CreateGroupInviteRequest createGroupInviteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CreateGroupInvite");
            }

            // verify the required parameter 'createGroupInviteRequest' is set
            if (createGroupInviteRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupInviteRequest' when calling GroupsApi->CreateGroupInvite");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupInviteRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroupInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{groupId}/invites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite User to Group Sends an invite to a user to join the group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupInviteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateGroupInviteAsync(string groupId, CreateGroupInviteRequest createGroupInviteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateGroupInviteWithHttpInfoAsync(groupId, createGroupInviteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Invite User to Group Sends an invite to a user to join the group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupInviteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Object>> CreateGroupInviteWithHttpInfoAsync(string groupId, CreateGroupInviteRequest createGroupInviteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CreateGroupInvite");
            }

            // verify the required parameter 'createGroupInviteRequest' is set
            if (createGroupInviteRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupInviteRequest' when calling GroupsApi->CreateGroupInvite");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupInviteRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroupInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/groups/{groupId}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create GroupRole Create a Group role.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupRole</returns>
        public GroupRole CreateGroupRole(string groupId, CreateGroupRoleRequest createGroupRoleRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupRole> localVarResponse = CreateGroupRoleWithHttpInfo(groupId, createGroupRoleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create GroupRole Create a Group role.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupRole</returns>
        public VRChat.API.Client.ApiResponse<GroupRole> CreateGroupRoleWithHttpInfo(string groupId, CreateGroupRoleRequest createGroupRoleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CreateGroupRole");
            }

            // verify the required parameter 'createGroupRoleRequest' is set
            if (createGroupRoleRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupRoleRequest' when calling GroupsApi->CreateGroupRole");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupRoleRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroupRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupRole>("/groups/{groupId}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create GroupRole Create a Group role.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupRole</returns>
        public async System.Threading.Tasks.Task<GroupRole> CreateGroupRoleAsync(string groupId, CreateGroupRoleRequest createGroupRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupRole> localVarResponse = await CreateGroupRoleWithHttpInfoAsync(groupId, createGroupRoleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create GroupRole Create a Group role.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createGroupRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupRole)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupRole>> CreateGroupRoleWithHttpInfoAsync(string groupId, CreateGroupRoleRequest createGroupRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->CreateGroupRole");
            }

            // verify the required parameter 'createGroupRoleRequest' is set
            if (createGroupRoleRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupRoleRequest' when calling GroupsApi->CreateGroupRole");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createGroupRoleRequest;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroupRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupRole>("/groups/{groupId}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Deletes a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success DeleteGroup(string groupId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = DeleteGroupWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Deletes a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> DeleteGroupWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Deletes a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteGroupAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await DeleteGroupWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Deletes a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> DeleteGroupWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Announcement Deletes the announcement for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success DeleteGroupAnnouncement(string groupId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = DeleteGroupAnnouncementWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Announcement Deletes the announcement for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> DeleteGroupAnnouncementWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupAnnouncement");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupAnnouncement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/groups/{groupId}/announcement", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupAnnouncement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Announcement Deletes the announcement for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteGroupAnnouncementAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await DeleteGroupAnnouncementWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Announcement Deletes the announcement for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> DeleteGroupAnnouncementWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupAnnouncement");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupAnnouncement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/groups/{groupId}/announcement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupAnnouncement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Gallery Deletes a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success DeleteGroupGallery(string groupId, string groupGalleryId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = DeleteGroupGalleryWithHttpInfo(groupId, groupGalleryId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Gallery Deletes a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> DeleteGroupGalleryWithHttpInfo(string groupId, string groupGalleryId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupGallery");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->DeleteGroupGallery");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupGallery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/groups/{groupId}/galleries/{groupGalleryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupGallery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Gallery Deletes a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteGroupGalleryAsync(string groupId, string groupGalleryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await DeleteGroupGalleryWithHttpInfoAsync(groupId, groupGalleryId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Gallery Deletes a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> DeleteGroupGalleryWithHttpInfoAsync(string groupId, string groupGalleryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupGallery");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->DeleteGroupGallery");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupGallery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/groups/{groupId}/galleries/{groupGalleryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupGallery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Gallery Image Deletes an image from a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="groupGalleryImageId">Must be a valid group gallery image ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success DeleteGroupGalleryImage(string groupId, string groupGalleryId, string groupGalleryImageId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = DeleteGroupGalleryImageWithHttpInfo(groupId, groupGalleryId, groupGalleryImageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Gallery Image Deletes an image from a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="groupGalleryImageId">Must be a valid group gallery image ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> DeleteGroupGalleryImageWithHttpInfo(string groupId, string groupGalleryId, string groupGalleryImageId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupGalleryImage");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->DeleteGroupGalleryImage");
            }

            // verify the required parameter 'groupGalleryImageId' is set
            if (groupGalleryImageId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryImageId' when calling GroupsApi->DeleteGroupGalleryImage");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryImageId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryImageId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupGalleryImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/groups/{groupId}/galleries/{groupGalleryId}/images/{groupGalleryImageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupGalleryImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Gallery Image Deletes an image from a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="groupGalleryImageId">Must be a valid group gallery image ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteGroupGalleryImageAsync(string groupId, string groupGalleryId, string groupGalleryImageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await DeleteGroupGalleryImageWithHttpInfoAsync(groupId, groupGalleryId, groupGalleryImageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Gallery Image Deletes an image from a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="groupGalleryImageId">Must be a valid group gallery image ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> DeleteGroupGalleryImageWithHttpInfoAsync(string groupId, string groupGalleryId, string groupGalleryImageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupGalleryImage");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->DeleteGroupGalleryImage");
            }

            // verify the required parameter 'groupGalleryImageId' is set
            if (groupGalleryImageId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryImageId' when calling GroupsApi->DeleteGroupGalleryImage");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryImageId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryImageId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupGalleryImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/groups/{groupId}/galleries/{groupGalleryId}/images/{groupGalleryImageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupGalleryImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Invite Deletes an Group invite sent to a User
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteGroupInvite(string groupId, string userId, int operationIndex = 0)
        {
            DeleteGroupInviteWithHttpInfo(groupId, userId);
        }

        /// <summary>
        /// Delete User Invite Deletes an Group invite sent to a User
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRChat.API.Client.ApiResponse<Object> DeleteGroupInviteWithHttpInfo(string groupId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupInvite");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->DeleteGroupInvite");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupId}/invites/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Invite Deletes an Group invite sent to a User
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupInviteAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteGroupInviteWithHttpInfoAsync(groupId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete User Invite Deletes an Group invite sent to a User
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Object>> DeleteGroupInviteWithHttpInfoAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupInvite");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->DeleteGroupInvite");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupId}/invites/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Group post Delete a Group post
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success DeleteGroupPost(string groupId, string notificationId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = DeleteGroupPostWithHttpInfo(groupId, notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Group post Delete a Group post
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> DeleteGroupPostWithHttpInfo(string groupId, string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupPost");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling GroupsApi->DeleteGroupPost");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/groups/{groupId}/posts/{notificationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Group post Delete a Group post
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteGroupPostAsync(string groupId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await DeleteGroupPostWithHttpInfoAsync(groupId, notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Group post Delete a Group post
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> DeleteGroupPostWithHttpInfoAsync(string groupId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupPost");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling GroupsApi->DeleteGroupPost");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/groups/{groupId}/posts/{notificationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Role Deletes a Group Role by ID and returns the remaining roles.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupRole&gt;</returns>
        public List<GroupRole> DeleteGroupRole(string groupId, string groupRoleId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupRole>> localVarResponse = DeleteGroupRoleWithHttpInfo(groupId, groupRoleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Role Deletes a Group Role by ID and returns the remaining roles.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupRole&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupRole>> DeleteGroupRoleWithHttpInfo(string groupId, string groupRoleId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupRole");
            }

            // verify the required parameter 'groupRoleId' is set
            if (groupRoleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupRoleId' when calling GroupsApi->DeleteGroupRole");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupRoleId", VRChat.API.Client.ClientUtils.ParameterToString(groupRoleId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<GroupRole>>("/groups/{groupId}/roles/{groupRoleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Role Deletes a Group Role by ID and returns the remaining roles.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupRole&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupRole>> DeleteGroupRoleAsync(string groupId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupRole>> localVarResponse = await DeleteGroupRoleWithHttpInfoAsync(groupId, groupRoleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Role Deletes a Group Role by ID and returns the remaining roles.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupRole&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupRole>>> DeleteGroupRoleWithHttpInfoAsync(string groupId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupRole");
            }

            // verify the required parameter 'groupRoleId' is set
            if (groupRoleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupRoleId' when calling GroupsApi->DeleteGroupRole");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupRoleId", VRChat.API.Client.ClientUtils.ParameterToString(groupRoleId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroupRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<GroupRole>>("/groups/{groupId}/roles/{groupRoleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group by ID Returns a single Group by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="includeRoles">Include roles for the Group object. Defaults to false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group GetGroup(string groupId, bool? includeRoles = default(bool?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Group> localVarResponse = GetGroupWithHttpInfo(groupId, includeRoles);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group by ID Returns a single Group by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="includeRoles">Include roles for the Group object. Defaults to false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public VRChat.API.Client.ApiResponse<Group> GetGroupWithHttpInfo(string groupId, bool? includeRoles = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (includeRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "includeRoles", includeRoles));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Group>("/groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group by ID Returns a single Group by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="includeRoles">Include roles for the Group object. Defaults to false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetGroupAsync(string groupId, bool? includeRoles = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Group> localVarResponse = await GetGroupWithHttpInfoAsync(groupId, includeRoles, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group by ID Returns a single Group by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="includeRoles">Include roles for the Group object. Defaults to false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Group>> GetGroupWithHttpInfoAsync(string groupId, bool? includeRoles = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (includeRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "includeRoles", includeRoles));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Group>("/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Announcement Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupAnnouncement</returns>
        public GroupAnnouncement GetGroupAnnouncements(string groupId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupAnnouncement> localVarResponse = GetGroupAnnouncementsWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Announcement Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupAnnouncement</returns>
        public VRChat.API.Client.ApiResponse<GroupAnnouncement> GetGroupAnnouncementsWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupAnnouncements");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupAnnouncements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupAnnouncement>("/groups/{groupId}/announcement", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupAnnouncements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Announcement Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupAnnouncement</returns>
        public async System.Threading.Tasks.Task<GroupAnnouncement> GetGroupAnnouncementsAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupAnnouncement> localVarResponse = await GetGroupAnnouncementsWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Announcement Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupAnnouncement)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupAnnouncement>> GetGroupAnnouncementsWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupAnnouncements");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupAnnouncements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupAnnouncement>("/groups/{groupId}/announcement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupAnnouncements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Audit Logs Returns a list of audit logs for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="startDate">The start date of the search range. (optional)</param>
        /// <param name="endDate">The end date of the search range. (optional)</param>
        /// <param name="actorIds">The comma-separated actor ids to search for. (optional)</param>
        /// <param name="eventTypes">The comma-separated event types to search for. (optional)</param>
        /// <param name="targetIds">The comma-separated target ids to search for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedGroupAuditLogEntryList</returns>
        public PaginatedGroupAuditLogEntryList GetGroupAuditLogs(string groupId, int? n = default(int?), int? offset = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string actorIds = default(string), string eventTypes = default(string), string targetIds = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<PaginatedGroupAuditLogEntryList> localVarResponse = GetGroupAuditLogsWithHttpInfo(groupId, n, offset, startDate, endDate, actorIds, eventTypes, targetIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Audit Logs Returns a list of audit logs for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="startDate">The start date of the search range. (optional)</param>
        /// <param name="endDate">The end date of the search range. (optional)</param>
        /// <param name="actorIds">The comma-separated actor ids to search for. (optional)</param>
        /// <param name="eventTypes">The comma-separated event types to search for. (optional)</param>
        /// <param name="targetIds">The comma-separated target ids to search for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedGroupAuditLogEntryList</returns>
        public VRChat.API.Client.ApiResponse<PaginatedGroupAuditLogEntryList> GetGroupAuditLogsWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string actorIds = default(string), string eventTypes = default(string), string targetIds = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupAuditLogs");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (actorIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "actorIds", actorIds));
            }
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "eventTypes", eventTypes));
            }
            if (targetIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "targetIds", targetIds));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupAuditLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedGroupAuditLogEntryList>("/groups/{groupId}/auditLogs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupAuditLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Audit Logs Returns a list of audit logs for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="startDate">The start date of the search range. (optional)</param>
        /// <param name="endDate">The end date of the search range. (optional)</param>
        /// <param name="actorIds">The comma-separated actor ids to search for. (optional)</param>
        /// <param name="eventTypes">The comma-separated event types to search for. (optional)</param>
        /// <param name="targetIds">The comma-separated target ids to search for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedGroupAuditLogEntryList</returns>
        public async System.Threading.Tasks.Task<PaginatedGroupAuditLogEntryList> GetGroupAuditLogsAsync(string groupId, int? n = default(int?), int? offset = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string actorIds = default(string), string eventTypes = default(string), string targetIds = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<PaginatedGroupAuditLogEntryList> localVarResponse = await GetGroupAuditLogsWithHttpInfoAsync(groupId, n, offset, startDate, endDate, actorIds, eventTypes, targetIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Audit Logs Returns a list of audit logs for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="startDate">The start date of the search range. (optional)</param>
        /// <param name="endDate">The end date of the search range. (optional)</param>
        /// <param name="actorIds">The comma-separated actor ids to search for. (optional)</param>
        /// <param name="eventTypes">The comma-separated event types to search for. (optional)</param>
        /// <param name="targetIds">The comma-separated target ids to search for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedGroupAuditLogEntryList)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<PaginatedGroupAuditLogEntryList>> GetGroupAuditLogsWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string actorIds = default(string), string eventTypes = default(string), string targetIds = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupAuditLogs");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (actorIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "actorIds", actorIds));
            }
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "eventTypes", eventTypes));
            }
            if (targetIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "targetIds", targetIds));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupAuditLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedGroupAuditLogEntryList>("/groups/{groupId}/auditLogs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupAuditLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Bans Returns a list of banned users for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupMember&gt;</returns>
        public List<GroupMember> GetGroupBans(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupMember>> localVarResponse = GetGroupBansWithHttpInfo(groupId, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Bans Returns a list of banned users for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupMember&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupMember>> GetGroupBansWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupBans");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupBans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupMember>>("/groups/{groupId}/bans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupBans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Bans Returns a list of banned users for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupMember>> GetGroupBansAsync(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupMember>> localVarResponse = await GetGroupBansWithHttpInfoAsync(groupId, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Bans Returns a list of banned users for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupMember&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupMember>>> GetGroupBansWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupBans");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupBans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupMember>>("/groups/{groupId}/bans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupBans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Gallery Images Returns a list of images for a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="approved">If specified, only returns images that have been approved or not approved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupGalleryImage&gt;</returns>
        public List<GroupGalleryImage> GetGroupGalleryImages(string groupId, string groupGalleryId, int? n = default(int?), int? offset = default(int?), bool? approved = default(bool?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupGalleryImage>> localVarResponse = GetGroupGalleryImagesWithHttpInfo(groupId, groupGalleryId, n, offset, approved);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Gallery Images Returns a list of images for a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="approved">If specified, only returns images that have been approved or not approved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupGalleryImage&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupGalleryImage>> GetGroupGalleryImagesWithHttpInfo(string groupId, string groupGalleryId, int? n = default(int?), int? offset = default(int?), bool? approved = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupGalleryImages");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->GetGroupGalleryImages");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (approved != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "approved", approved));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupGalleryImages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupGalleryImage>>("/groups/{groupId}/galleries/{groupGalleryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupGalleryImages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Gallery Images Returns a list of images for a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="approved">If specified, only returns images that have been approved or not approved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupGalleryImage&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupGalleryImage>> GetGroupGalleryImagesAsync(string groupId, string groupGalleryId, int? n = default(int?), int? offset = default(int?), bool? approved = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupGalleryImage>> localVarResponse = await GetGroupGalleryImagesWithHttpInfoAsync(groupId, groupGalleryId, n, offset, approved, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Gallery Images Returns a list of images for a Group gallery.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="approved">If specified, only returns images that have been approved or not approved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupGalleryImage&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupGalleryImage>>> GetGroupGalleryImagesWithHttpInfoAsync(string groupId, string groupGalleryId, int? n = default(int?), int? offset = default(int?), bool? approved = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupGalleryImages");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->GetGroupGalleryImages");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (approved != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "approved", approved));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupGalleryImages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupGalleryImage>>("/groups/{groupId}/galleries/{groupGalleryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupGalleryImages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Instances Returns a list of group instances
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupInstance&gt;</returns>
        public List<GroupInstance> GetGroupInstances(string groupId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupInstance>> localVarResponse = GetGroupInstancesWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Instances Returns a list of group instances
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupInstance&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupInstance>> GetGroupInstancesWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupInstances");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupInstances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupInstance>>("/groups/{groupId}/instances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Instances Returns a list of group instances
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupInstance&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupInstance>> GetGroupInstancesAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupInstance>> localVarResponse = await GetGroupInstancesWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Instances Returns a list of group instances
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupInstance&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupInstance>>> GetGroupInstancesWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupInstances");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupInstances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupInstance>>("/groups/{groupId}/instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Invites Sent Returns a list of members that have been invited to the Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupMember&gt;</returns>
        public List<GroupMember> GetGroupInvites(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupMember>> localVarResponse = GetGroupInvitesWithHttpInfo(groupId, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Invites Sent Returns a list of members that have been invited to the Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupMember&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupMember>> GetGroupInvitesWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupInvites");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupMember>>("/groups/{groupId}/invites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Invites Sent Returns a list of members that have been invited to the Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupMember>> GetGroupInvitesAsync(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupMember>> localVarResponse = await GetGroupInvitesWithHttpInfoAsync(groupId, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Invites Sent Returns a list of members that have been invited to the Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupMember&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupMember>>> GetGroupInvitesWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupInvites");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupMember>>("/groups/{groupId}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Member Returns a LimitedGroup Member.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupLimitedMember</returns>
        public GroupLimitedMember GetGroupMember(string groupId, string userId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupLimitedMember> localVarResponse = GetGroupMemberWithHttpInfo(groupId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Member Returns a LimitedGroup Member.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupLimitedMember</returns>
        public VRChat.API.Client.ApiResponse<GroupLimitedMember> GetGroupMemberWithHttpInfo(string groupId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupMember");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->GetGroupMember");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupLimitedMember>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Member Returns a LimitedGroup Member.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupLimitedMember</returns>
        public async System.Threading.Tasks.Task<GroupLimitedMember> GetGroupMemberAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupLimitedMember> localVarResponse = await GetGroupMemberWithHttpInfoAsync(groupId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Member Returns a LimitedGroup Member.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupLimitedMember)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupLimitedMember>> GetGroupMemberWithHttpInfoAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupMember");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->GetGroupMember");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupLimitedMember>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Group Members Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="sort">The sort order of Group Member results (optional)</param>
        /// <param name="roleId">Only returns members with a specific groupRoleId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupMember&gt;</returns>
        public List<GroupMember> GetGroupMembers(string groupId, int? n = default(int?), int? offset = default(int?), GroupSearchSort? sort = default(GroupSearchSort?), string roleId = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupMember>> localVarResponse = GetGroupMembersWithHttpInfo(groupId, n, offset, sort, roleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Group Members Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="sort">The sort order of Group Member results (optional)</param>
        /// <param name="roleId">Only returns members with a specific groupRoleId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupMember&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupMember>> GetGroupMembersWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), GroupSearchSort? sort = default(GroupSearchSort?), string roleId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupMembers");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (roleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "roleId", roleId));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupMember>>("/groups/{groupId}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Group Members Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="sort">The sort order of Group Member results (optional)</param>
        /// <param name="roleId">Only returns members with a specific groupRoleId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupMember>> GetGroupMembersAsync(string groupId, int? n = default(int?), int? offset = default(int?), GroupSearchSort? sort = default(GroupSearchSort?), string roleId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupMember>> localVarResponse = await GetGroupMembersWithHttpInfoAsync(groupId, n, offset, sort, roleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Group Members Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="sort">The sort order of Group Member results (optional)</param>
        /// <param name="roleId">Only returns members with a specific groupRoleId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupMember&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupMember>>> GetGroupMembersWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), GroupSearchSort? sort = default(GroupSearchSort?), string roleId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupMembers");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (roleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "roleId", roleId));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupMember>>("/groups/{groupId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Group Permissions Returns a List of all possible/available permissions for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupPermission&gt;</returns>
        public List<GroupPermission> GetGroupPermissions(string groupId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupPermission>> localVarResponse = GetGroupPermissionsWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Group Permissions Returns a List of all possible/available permissions for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupPermission&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupPermission>> GetGroupPermissionsWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupPermissions");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupPermission>>("/groups/{groupId}/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Group Permissions Returns a List of all possible/available permissions for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupPermission&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupPermission>> GetGroupPermissionsAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupPermission>> localVarResponse = await GetGroupPermissionsWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Group Permissions Returns a List of all possible/available permissions for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupPermission&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupPermission>>> GetGroupPermissionsWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupPermissions");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupPermission>>("/groups/{groupId}/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get posts from a Group Get posts from a Group
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="publicOnly">See public posts only. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGroupPosts200Response</returns>
        public GetGroupPosts200Response GetGroupPosts(string groupId, int? n = default(int?), int? offset = default(int?), bool? publicOnly = default(bool?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GetGroupPosts200Response> localVarResponse = GetGroupPostsWithHttpInfo(groupId, n, offset, publicOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get posts from a Group Get posts from a Group
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="publicOnly">See public posts only. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGroupPosts200Response</returns>
        public VRChat.API.Client.ApiResponse<GetGroupPosts200Response> GetGroupPostsWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), bool? publicOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupPosts");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (publicOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "publicOnly", publicOnly));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupPosts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetGroupPosts200Response>("/groups/{groupId}/posts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupPosts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get posts from a Group Get posts from a Group
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="publicOnly">See public posts only. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupPosts200Response</returns>
        public async System.Threading.Tasks.Task<GetGroupPosts200Response> GetGroupPostsAsync(string groupId, int? n = default(int?), int? offset = default(int?), bool? publicOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GetGroupPosts200Response> localVarResponse = await GetGroupPostsWithHttpInfoAsync(groupId, n, offset, publicOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get posts from a Group Get posts from a Group
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="publicOnly">See public posts only. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupPosts200Response)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GetGroupPosts200Response>> GetGroupPostsWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), bool? publicOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupPosts");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (publicOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "publicOnly", publicOnly));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupPosts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetGroupPosts200Response>("/groups/{groupId}/posts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupPosts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Join Requests Returns a list of members that have requested to join the Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="blocked">See blocked join requests (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupMember&gt;</returns>
        public List<GroupMember> GetGroupRequests(string groupId, int? n = default(int?), int? offset = default(int?), bool? blocked = default(bool?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupMember>> localVarResponse = GetGroupRequestsWithHttpInfo(groupId, n, offset, blocked);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Join Requests Returns a list of members that have requested to join the Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="blocked">See blocked join requests (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupMember&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupMember>> GetGroupRequestsWithHttpInfo(string groupId, int? n = default(int?), int? offset = default(int?), bool? blocked = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupRequests");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (blocked != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "blocked", blocked));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupMember>>("/groups/{groupId}/requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Join Requests Returns a list of members that have requested to join the Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="blocked">See blocked join requests (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupMember>> GetGroupRequestsAsync(string groupId, int? n = default(int?), int? offset = default(int?), bool? blocked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupMember>> localVarResponse = await GetGroupRequestsWithHttpInfoAsync(groupId, n, offset, blocked, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Join Requests Returns a list of members that have requested to join the Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="blocked">See blocked join requests (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupMember&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupMember>>> GetGroupRequestsWithHttpInfoAsync(string groupId, int? n = default(int?), int? offset = default(int?), bool? blocked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupRequests");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (blocked != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "blocked", blocked));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupMember>>("/groups/{groupId}/requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Role Templates Obtain predefined templates for group roles
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, GroupRoleTemplateValues&gt;</returns>
        public Dictionary<string, GroupRoleTemplateValues> GetGroupRoleTemplates(int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Dictionary<string, GroupRoleTemplateValues>> localVarResponse = GetGroupRoleTemplatesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Role Templates Obtain predefined templates for group roles
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, GroupRoleTemplateValues&gt;</returns>
        public VRChat.API.Client.ApiResponse<Dictionary<string, GroupRoleTemplateValues>> GetGroupRoleTemplatesWithHttpInfo(int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GetGroupRoleTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, GroupRoleTemplateValues>>("/groups/roleTemplates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRoleTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Role Templates Obtain predefined templates for group roles
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, GroupRoleTemplateValues&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, GroupRoleTemplateValues>> GetGroupRoleTemplatesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Dictionary<string, GroupRoleTemplateValues>> localVarResponse = await GetGroupRoleTemplatesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Role Templates Obtain predefined templates for group roles
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, GroupRoleTemplateValues&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Dictionary<string, GroupRoleTemplateValues>>> GetGroupRoleTemplatesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GetGroupRoleTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, GroupRoleTemplateValues>>("/groups/roleTemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRoleTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Roles Returns a Group Role by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupRole&gt;</returns>
        public List<GroupRole> GetGroupRoles(string groupId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupRole>> localVarResponse = GetGroupRolesWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Roles Returns a Group Role by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupRole&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupRole>> GetGroupRolesWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupRoles");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupRole>>("/groups/{groupId}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Roles Returns a Group Role by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupRole&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupRole>> GetGroupRolesAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupRole>> localVarResponse = await GetGroupRolesWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Roles Returns a Group Role by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupRole&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupRole>>> GetGroupRolesWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupRoles");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupRole>>("/groups/{groupId}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join Group Join a Group by ID and returns the member object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupMember</returns>
        public GroupMember JoinGroup(string groupId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupMember> localVarResponse = JoinGroupWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join Group Join a Group by ID and returns the member object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupMember</returns>
        public VRChat.API.Client.ApiResponse<GroupMember> JoinGroupWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->JoinGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.JoinGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupMember>("/groups/{groupId}/join", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join Group Join a Group by ID and returns the member object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupMember</returns>
        public async System.Threading.Tasks.Task<GroupMember> JoinGroupAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupMember> localVarResponse = await JoinGroupWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join Group Join a Group by ID and returns the member object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupMember)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupMember>> JoinGroupWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->JoinGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.JoinGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupMember>("/groups/{groupId}/join", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kick Group Member Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void KickGroupMember(string groupId, string userId, int operationIndex = 0)
        {
            KickGroupMemberWithHttpInfo(groupId, userId);
        }

        /// <summary>
        /// Kick Group Member Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRChat.API.Client.ApiResponse<Object> KickGroupMemberWithHttpInfo(string groupId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->KickGroupMember");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->KickGroupMember");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.KickGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kick Group Member Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KickGroupMemberAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await KickGroupMemberWithHttpInfoAsync(groupId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Kick Group Member Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Object>> KickGroupMemberWithHttpInfoAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->KickGroupMember");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->KickGroupMember");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.KickGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leave Group Leave a group by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LeaveGroup(string groupId, int operationIndex = 0)
        {
            LeaveGroupWithHttpInfo(groupId);
        }

        /// <summary>
        /// Leave Group Leave a group by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRChat.API.Client.ApiResponse<Object> LeaveGroupWithHttpInfo(string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->LeaveGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.LeaveGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{groupId}/leave", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leave Group Leave a group by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeaveGroupAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LeaveGroupWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Leave Group Leave a group by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Object>> LeaveGroupWithHttpInfoAsync(string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->LeaveGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.LeaveGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/groups/{groupId}/leave", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Role from GroupMember Removes a Role from a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> RemoveGroupMemberRole(string groupId, string userId, string groupRoleId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<string>> localVarResponse = RemoveGroupMemberRoleWithHttpInfo(groupId, userId, groupRoleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Role from GroupMember Removes a Role from a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<string>> RemoveGroupMemberRoleWithHttpInfo(string groupId, string userId, string groupRoleId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->RemoveGroupMemberRole");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->RemoveGroupMemberRole");
            }

            // verify the required parameter 'groupRoleId' is set
            if (groupRoleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupRoleId' when calling GroupsApi->RemoveGroupMemberRole");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupRoleId", VRChat.API.Client.ClientUtils.ParameterToString(groupRoleId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.RemoveGroupMemberRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<string>>("/groups/{groupId}/members/{userId}/roles/{groupRoleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveGroupMemberRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Role from GroupMember Removes a Role from a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> RemoveGroupMemberRoleAsync(string groupId, string userId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<string>> localVarResponse = await RemoveGroupMemberRoleWithHttpInfoAsync(groupId, userId, groupRoleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Role from GroupMember Removes a Role from a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<string>>> RemoveGroupMemberRoleWithHttpInfoAsync(string groupId, string userId, string groupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->RemoveGroupMemberRole");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->RemoveGroupMemberRole");
            }

            // verify the required parameter 'groupRoleId' is set
            if (groupRoleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupRoleId' when calling GroupsApi->RemoveGroupMemberRole");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupRoleId", VRChat.API.Client.ClientUtils.ParameterToString(groupRoleId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.RemoveGroupMemberRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<string>>("/groups/{groupId}/members/{userId}/roles/{groupRoleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveGroupMemberRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Respond Group Join request Responds to a Group Join Request with Accept/Deny
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="respondGroupJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RespondGroupJoinRequest(string groupId, string userId, RespondGroupJoinRequest respondGroupJoinRequest, int operationIndex = 0)
        {
            RespondGroupJoinRequestWithHttpInfo(groupId, userId, respondGroupJoinRequest);
        }

        /// <summary>
        /// Respond Group Join request Responds to a Group Join Request with Accept/Deny
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="respondGroupJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRChat.API.Client.ApiResponse<Object> RespondGroupJoinRequestWithHttpInfo(string groupId, string userId, RespondGroupJoinRequest respondGroupJoinRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->RespondGroupJoinRequest");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->RespondGroupJoinRequest");
            }

            // verify the required parameter 'respondGroupJoinRequest' is set
            if (respondGroupJoinRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'respondGroupJoinRequest' when calling GroupsApi->RespondGroupJoinRequest");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = respondGroupJoinRequest;

            localVarRequestOptions.Operation = "GroupsApi.RespondGroupJoinRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/groups/{groupId}/requests/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RespondGroupJoinRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Respond Group Join request Responds to a Group Join Request with Accept/Deny
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="respondGroupJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RespondGroupJoinRequestAsync(string groupId, string userId, RespondGroupJoinRequest respondGroupJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RespondGroupJoinRequestWithHttpInfoAsync(groupId, userId, respondGroupJoinRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Respond Group Join request Responds to a Group Join Request with Accept/Deny
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="respondGroupJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Object>> RespondGroupJoinRequestWithHttpInfoAsync(string groupId, string userId, RespondGroupJoinRequest respondGroupJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->RespondGroupJoinRequest");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->RespondGroupJoinRequest");
            }

            // verify the required parameter 'respondGroupJoinRequest' is set
            if (respondGroupJoinRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'respondGroupJoinRequest' when calling GroupsApi->RespondGroupJoinRequest");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = respondGroupJoinRequest;

            localVarRequestOptions.Operation = "GroupsApi.RespondGroupJoinRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/groups/{groupId}/requests/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RespondGroupJoinRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Group Searches Groups by name or shortCode
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search for, can be either Group Name or Group shortCode (optional)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LimitedGroup&gt;</returns>
        public List<LimitedGroup> SearchGroups(string query = default(string), int? offset = default(int?), int? n = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<LimitedGroup>> localVarResponse = SearchGroupsWithHttpInfo(query, offset, n);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Group Searches Groups by name or shortCode
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search for, can be either Group Name or Group shortCode (optional)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LimitedGroup&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<LimitedGroup>> SearchGroupsWithHttpInfo(string query = default(string), int? offset = default(int?), int? n = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }

            localVarRequestOptions.Operation = "GroupsApi.SearchGroups";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LimitedGroup>>("/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Group Searches Groups by name or shortCode
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search for, can be either Group Name or Group shortCode (optional)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LimitedGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<LimitedGroup>> SearchGroupsAsync(string query = default(string), int? offset = default(int?), int? n = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<LimitedGroup>> localVarResponse = await SearchGroupsWithHttpInfoAsync(query, offset, n, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Group Searches Groups by name or shortCode
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search for, can be either Group Name or Group shortCode (optional)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LimitedGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<LimitedGroup>>> SearchGroupsWithHttpInfoAsync(string query = default(string), int? offset = default(int?), int? n = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }

            localVarRequestOptions.Operation = "GroupsApi.SearchGroups";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LimitedGroup>>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unban Group Member Unbans a user from a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupMember</returns>
        public GroupMember UnbanGroupMember(string groupId, string userId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupMember> localVarResponse = UnbanGroupMemberWithHttpInfo(groupId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unban Group Member Unbans a user from a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupMember</returns>
        public VRChat.API.Client.ApiResponse<GroupMember> UnbanGroupMemberWithHttpInfo(string groupId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UnbanGroupMember");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->UnbanGroupMember");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.UnbanGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<GroupMember>("/groups/{groupId}/bans/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnbanGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unban Group Member Unbans a user from a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupMember</returns>
        public async System.Threading.Tasks.Task<GroupMember> UnbanGroupMemberAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupMember> localVarResponse = await UnbanGroupMemberWithHttpInfoAsync(groupId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unban Group Member Unbans a user from a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupMember)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupMember>> UnbanGroupMemberWithHttpInfoAsync(string groupId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UnbanGroupMember");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->UnbanGroupMember");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.UnbanGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<GroupMember>("/groups/{groupId}/bans/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnbanGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Updates a Group and returns it.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group UpdateGroup(string groupId, UpdateGroupRequest updateGroupRequest = default(UpdateGroupRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Group> localVarResponse = UpdateGroupWithHttpInfo(groupId, updateGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Updates a Group and returns it.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public VRChat.API.Client.ApiResponse<Group> UpdateGroupWithHttpInfo(string groupId, UpdateGroupRequest updateGroupRequest = default(UpdateGroupRequest), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroup");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = updateGroupRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Group>("/groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Updates a Group and returns it.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> UpdateGroupAsync(string groupId, UpdateGroupRequest updateGroupRequest = default(UpdateGroupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Group> localVarResponse = await UpdateGroupWithHttpInfoAsync(groupId, updateGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Updates a Group and returns it.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Group>> UpdateGroupWithHttpInfoAsync(string groupId, UpdateGroupRequest updateGroupRequest = default(UpdateGroupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroup");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = updateGroupRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Group>("/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Gallery Updates a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="updateGroupGalleryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupGallery</returns>
        public GroupGallery UpdateGroupGallery(string groupId, string groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest = default(UpdateGroupGalleryRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupGallery> localVarResponse = UpdateGroupGalleryWithHttpInfo(groupId, groupGalleryId, updateGroupGalleryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Gallery Updates a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="updateGroupGalleryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupGallery</returns>
        public VRChat.API.Client.ApiResponse<GroupGallery> UpdateGroupGalleryWithHttpInfo(string groupId, string groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest = default(UpdateGroupGalleryRequest), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupGallery");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->UpdateGroupGallery");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter
            localVarRequestOptions.Data = updateGroupGalleryRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupGallery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GroupGallery>("/groups/{groupId}/galleries/{groupGalleryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupGallery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Gallery Updates a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="updateGroupGalleryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupGallery</returns>
        public async System.Threading.Tasks.Task<GroupGallery> UpdateGroupGalleryAsync(string groupId, string groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest = default(UpdateGroupGalleryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupGallery> localVarResponse = await UpdateGroupGalleryWithHttpInfoAsync(groupId, groupGalleryId, updateGroupGalleryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Gallery Updates a gallery for a Group.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupGalleryId">Must be a valid group gallery ID.</param>
        /// <param name="updateGroupGalleryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupGallery)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupGallery>> UpdateGroupGalleryWithHttpInfoAsync(string groupId, string groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest = default(UpdateGroupGalleryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupGallery");
            }

            // verify the required parameter 'groupGalleryId' is set
            if (groupGalleryId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupGalleryId' when calling GroupsApi->UpdateGroupGallery");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupGalleryId", VRChat.API.Client.ClientUtils.ParameterToString(groupGalleryId)); // path parameter
            localVarRequestOptions.Data = updateGroupGalleryRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupGallery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GroupGallery>("/groups/{groupId}/galleries/{groupGalleryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupGallery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Member Updates a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateGroupMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupLimitedMember</returns>
        public GroupLimitedMember UpdateGroupMember(string groupId, string userId, UpdateGroupMemberRequest updateGroupMemberRequest = default(UpdateGroupMemberRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupLimitedMember> localVarResponse = UpdateGroupMemberWithHttpInfo(groupId, userId, updateGroupMemberRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Member Updates a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateGroupMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupLimitedMember</returns>
        public VRChat.API.Client.ApiResponse<GroupLimitedMember> UpdateGroupMemberWithHttpInfo(string groupId, string userId, UpdateGroupMemberRequest updateGroupMemberRequest = default(UpdateGroupMemberRequest), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupMember");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->UpdateGroupMember");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = updateGroupMemberRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GroupLimitedMember>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Member Updates a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateGroupMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupLimitedMember</returns>
        public async System.Threading.Tasks.Task<GroupLimitedMember> UpdateGroupMemberAsync(string groupId, string userId, UpdateGroupMemberRequest updateGroupMemberRequest = default(UpdateGroupMemberRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupLimitedMember> localVarResponse = await UpdateGroupMemberWithHttpInfoAsync(groupId, userId, updateGroupMemberRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Member Updates a Group Member
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="updateGroupMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupLimitedMember)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupLimitedMember>> UpdateGroupMemberWithHttpInfoAsync(string groupId, string userId, UpdateGroupMemberRequest updateGroupMemberRequest = default(UpdateGroupMemberRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupMember");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->UpdateGroupMember");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = updateGroupMemberRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GroupLimitedMember>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edits a Group post Edits a Group post
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupPost</returns>
        public GroupPost UpdateGroupPost(string groupId, string notificationId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<GroupPost> localVarResponse = UpdateGroupPostWithHttpInfo(groupId, notificationId, createGroupPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edits a Group post Edits a Group post
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupPost</returns>
        public VRChat.API.Client.ApiResponse<GroupPost> UpdateGroupPostWithHttpInfo(string groupId, string notificationId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupPost");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling GroupsApi->UpdateGroupPost");
            }

            // verify the required parameter 'createGroupPostRequest' is set
            if (createGroupPostRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupPostRequest' when calling GroupsApi->UpdateGroupPost");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.Data = createGroupPostRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GroupPost>("/groups/{groupId}/posts/{notificationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edits a Group post Edits a Group post
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupPost</returns>
        public async System.Threading.Tasks.Task<GroupPost> UpdateGroupPostAsync(string groupId, string notificationId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<GroupPost> localVarResponse = await UpdateGroupPostWithHttpInfoAsync(groupId, notificationId, createGroupPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edits a Group post Edits a Group post
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="createGroupPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupPost)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<GroupPost>> UpdateGroupPostWithHttpInfoAsync(string groupId, string notificationId, CreateGroupPostRequest createGroupPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupPost");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling GroupsApi->UpdateGroupPost");
            }

            // verify the required parameter 'createGroupPostRequest' is set
            if (createGroupPostRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createGroupPostRequest' when calling GroupsApi->UpdateGroupPost");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.Data = createGroupPostRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GroupPost>("/groups/{groupId}/posts/{notificationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Representation Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRepresentationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success UpdateGroupRepresentation(string groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = UpdateGroupRepresentationWithHttpInfo(groupId, updateGroupRepresentationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Representation Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRepresentationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> UpdateGroupRepresentationWithHttpInfo(string groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupRepresentation");
            }

            // verify the required parameter 'updateGroupRepresentationRequest' is set
            if (updateGroupRepresentationRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'updateGroupRepresentationRequest' when calling GroupsApi->UpdateGroupRepresentation");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = updateGroupRepresentationRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupRepresentation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Success>("/groups/{groupId}/representation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupRepresentation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Representation Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRepresentationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateGroupRepresentationAsync(string groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await UpdateGroupRepresentationWithHttpInfoAsync(groupId, updateGroupRepresentationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Representation Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="updateGroupRepresentationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> UpdateGroupRepresentationWithHttpInfoAsync(string groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupRepresentation");
            }

            // verify the required parameter 'updateGroupRepresentationRequest' is set
            if (updateGroupRepresentationRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'updateGroupRepresentationRequest' when calling GroupsApi->UpdateGroupRepresentation");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = updateGroupRepresentationRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupRepresentation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Success>("/groups/{groupId}/representation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupRepresentation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Role Updates a group role by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupRole&gt;</returns>
        public List<GroupRole> UpdateGroupRole(string groupId, string groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<GroupRole>> localVarResponse = UpdateGroupRoleWithHttpInfo(groupId, groupRoleId, updateGroupRoleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Role Updates a group role by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupRole&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<GroupRole>> UpdateGroupRoleWithHttpInfo(string groupId, string groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupRole");
            }

            // verify the required parameter 'groupRoleId' is set
            if (groupRoleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupRoleId' when calling GroupsApi->UpdateGroupRole");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupRoleId", VRChat.API.Client.ClientUtils.ParameterToString(groupRoleId)); // path parameter
            localVarRequestOptions.Data = updateGroupRoleRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<GroupRole>>("/groups/{groupId}/roles/{groupRoleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Role Updates a group role by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupRole&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupRole>> UpdateGroupRoleAsync(string groupId, string groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<GroupRole>> localVarResponse = await UpdateGroupRoleWithHttpInfoAsync(groupId, groupRoleId, updateGroupRoleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Role Updates a group role by ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="groupRoleId">Must be a valid group role ID.</param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupRole&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<GroupRole>>> UpdateGroupRoleWithHttpInfoAsync(string groupId, string groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupRole");
            }

            // verify the required parameter 'groupRoleId' is set
            if (groupRoleId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupRoleId' when calling GroupsApi->UpdateGroupRole");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupRoleId", VRChat.API.Client.ClientUtils.ParameterToString(groupRoleId)); // path parameter
            localVarRequestOptions.Data = updateGroupRoleRequest;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroupRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<GroupRole>>("/groups/{groupId}/roles/{groupRoleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
