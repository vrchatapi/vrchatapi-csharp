/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRChat.API.Client;
using VRChat.API.Model;

namespace VRChat.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept Friend Request
        /// </summary>
        /// <remarks>
        /// Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success AcceptFriendRequest(string notificationId, int operationIndex = 0);

        /// <summary>
        /// Accept Friend Request
        /// </summary>
        /// <remarks>
        /// Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> AcceptFriendRequestWithHttpInfo(string notificationId, int operationIndex = 0);
        /// <summary>
        /// Clear All Notifications
        /// </summary>
        /// <remarks>
        /// Clear **all** notifications.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success ClearNotifications(int operationIndex = 0);

        /// <summary>
        /// Clear All Notifications
        /// </summary>
        /// <remarks>
        /// Clear **all** notifications.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> ClearNotificationsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete Notification
        /// </summary>
        /// <remarks>
        /// Delete a notification.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        Notification DeleteNotification(string notificationId, int operationIndex = 0);

        /// <summary>
        /// Delete Notification
        /// </summary>
        /// <remarks>
        /// Delete a notification.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> DeleteNotificationWithHttpInfo(string notificationId, int operationIndex = 0);
        /// <summary>
        /// Show notification
        /// </summary>
        /// <remarks>
        /// Get a notification by notification &#x60;not_&#x60; ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        Notification GetNotification(string notificationId, int operationIndex = 0);

        /// <summary>
        /// Show notification
        /// </summary>
        /// <remarks>
        /// Get a notification by notification &#x60;not_&#x60; ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> GetNotificationWithHttpInfo(string notificationId, int operationIndex = 0);
        /// <summary>
        /// List Notifications
        /// </summary>
        /// <remarks>
        /// Retrieve all of the current user&#39;s notifications.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated. (optional) (deprecated)</param>
        /// <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
        /// <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Notification&gt;</returns>
        List<Notification> GetNotifications(string type = default(string), bool? sent = default(bool?), bool? hidden = default(bool?), string after = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// List Notifications
        /// </summary>
        /// <remarks>
        /// Retrieve all of the current user&#39;s notifications.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated. (optional) (deprecated)</param>
        /// <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
        /// <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Notification&gt;</returns>
        ApiResponse<List<Notification>> GetNotificationsWithHttpInfo(string type = default(string), bool? sent = default(bool?), bool? hidden = default(bool?), string after = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Mark Notification As Read
        /// </summary>
        /// <remarks>
        /// Mark a notification as seen.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        Notification MarkNotificationAsRead(string notificationId, int operationIndex = 0);

        /// <summary>
        /// Mark Notification As Read
        /// </summary>
        /// <remarks>
        /// Mark a notification as seen.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> MarkNotificationAsReadWithHttpInfo(string notificationId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept Friend Request
        /// </summary>
        /// <remarks>
        /// Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> AcceptFriendRequestAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept Friend Request
        /// </summary>
        /// <remarks>
        /// Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> AcceptFriendRequestWithHttpInfoAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear All Notifications
        /// </summary>
        /// <remarks>
        /// Clear **all** notifications.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> ClearNotificationsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear All Notifications
        /// </summary>
        /// <remarks>
        /// Clear **all** notifications.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> ClearNotificationsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Notification
        /// </summary>
        /// <remarks>
        /// Delete a notification.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> DeleteNotificationAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Notification
        /// </summary>
        /// <remarks>
        /// Delete a notification.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> DeleteNotificationWithHttpInfoAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show notification
        /// </summary>
        /// <remarks>
        /// Get a notification by notification &#x60;not_&#x60; ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> GetNotificationAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show notification
        /// </summary>
        /// <remarks>
        /// Get a notification by notification &#x60;not_&#x60; ID.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> GetNotificationWithHttpInfoAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Notifications
        /// </summary>
        /// <remarks>
        /// Retrieve all of the current user&#39;s notifications.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated. (optional) (deprecated)</param>
        /// <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
        /// <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Notification&gt;</returns>
        System.Threading.Tasks.Task<List<Notification>> GetNotificationsAsync(string type = default(string), bool? sent = default(bool?), bool? hidden = default(bool?), string after = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Notifications
        /// </summary>
        /// <remarks>
        /// Retrieve all of the current user&#39;s notifications.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated. (optional) (deprecated)</param>
        /// <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
        /// <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Notification&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Notification>>> GetNotificationsWithHttpInfoAsync(string type = default(string), bool? sent = default(bool?), bool? hidden = default(bool?), string after = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark Notification As Read
        /// </summary>
        /// <remarks>
        /// Mark a notification as seen.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> MarkNotificationAsReadAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark Notification As Read
        /// </summary>
        /// <remarks>
        /// Mark a notification as seen.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> MarkNotificationAsReadWithHttpInfoAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationsApi : INotificationsApiSync, INotificationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationsApi : INotificationsApi
    {
        private VRChat.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationsApi(string basePath)
        {
            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                new VRChat.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationsApi(VRChat.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotificationsApi(VRChat.API.Client.ISynchronousClient client, VRChat.API.Client.IAsynchronousClient asyncClient, VRChat.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRChat.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRChat.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRChat.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRChat.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept Friend Request Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success AcceptFriendRequest(string notificationId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = AcceptFriendRequestWithHttpInfo(notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept Friend Request Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> AcceptFriendRequestWithHttpInfo(string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling NotificationsApi->AcceptFriendRequest");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "NotificationsApi.AcceptFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Success>("/auth/user/notifications/{notificationId}/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept Friend Request Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> AcceptFriendRequestAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await AcceptFriendRequestWithHttpInfoAsync(notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept Friend Request Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> AcceptFriendRequestWithHttpInfoAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling NotificationsApi->AcceptFriendRequest");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "NotificationsApi.AcceptFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Success>("/auth/user/notifications/{notificationId}/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear All Notifications Clear **all** notifications.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success ClearNotifications(int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = ClearNotificationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear All Notifications Clear **all** notifications.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> ClearNotificationsWithHttpInfo(int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationsApi.ClearNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Success>("/auth/user/notifications/clear", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear All Notifications Clear **all** notifications.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> ClearNotificationsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await ClearNotificationsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear All Notifications Clear **all** notifications.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> ClearNotificationsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationsApi.ClearNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Success>("/auth/user/notifications/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Notification Delete a notification.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        public Notification DeleteNotification(string notificationId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = DeleteNotificationWithHttpInfo(notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Notification Delete a notification.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        public VRChat.API.Client.ApiResponse<Notification> DeleteNotificationWithHttpInfo(string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling NotificationsApi->DeleteNotification");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "NotificationsApi.DeleteNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Notification>("/auth/user/notifications/{notificationId}/hide", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Notification Delete a notification.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> DeleteNotificationAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = await DeleteNotificationWithHttpInfoAsync(notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Notification Delete a notification.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Notification>> DeleteNotificationWithHttpInfoAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling NotificationsApi->DeleteNotification");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "NotificationsApi.DeleteNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Notification>("/auth/user/notifications/{notificationId}/hide", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show notification Get a notification by notification &#x60;not_&#x60; ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        public Notification GetNotification(string notificationId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = GetNotificationWithHttpInfo(notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show notification Get a notification by notification &#x60;not_&#x60; ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        public VRChat.API.Client.ApiResponse<Notification> GetNotificationWithHttpInfo(string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling NotificationsApi->GetNotification");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "NotificationsApi.GetNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Notification>("/auth/user/notifications/{notificationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show notification Get a notification by notification &#x60;not_&#x60; ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> GetNotificationAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = await GetNotificationWithHttpInfoAsync(notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show notification Get a notification by notification &#x60;not_&#x60; ID.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Notification>> GetNotificationWithHttpInfoAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling NotificationsApi->GetNotification");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "NotificationsApi.GetNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Notification>("/auth/user/notifications/{notificationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Notifications Retrieve all of the current user&#39;s notifications.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated. (optional) (deprecated)</param>
        /// <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
        /// <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Notification&gt;</returns>
        public List<Notification> GetNotifications(string type = default(string), bool? sent = default(bool?), bool? hidden = default(bool?), string after = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<Notification>> localVarResponse = GetNotificationsWithHttpInfo(type, sent, hidden, after, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Notifications Retrieve all of the current user&#39;s notifications.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated. (optional) (deprecated)</param>
        /// <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
        /// <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Notification&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<Notification>> GetNotificationsWithHttpInfo(string type = default(string), bool? sent = default(bool?), bool? hidden = default(bool?), string after = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (sent != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "sent", sent));
            }
            if (hidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "hidden", hidden));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "NotificationsApi.GetNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Notification>>("/auth/user/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Notifications Retrieve all of the current user&#39;s notifications.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated. (optional) (deprecated)</param>
        /// <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
        /// <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Notification&gt;</returns>
        public async System.Threading.Tasks.Task<List<Notification>> GetNotificationsAsync(string type = default(string), bool? sent = default(bool?), bool? hidden = default(bool?), string after = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<Notification>> localVarResponse = await GetNotificationsWithHttpInfoAsync(type, sent, hidden, after, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Notifications Retrieve all of the current user&#39;s notifications.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated. (optional) (deprecated)</param>
        /// <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
        /// <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Notification&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<Notification>>> GetNotificationsWithHttpInfoAsync(string type = default(string), bool? sent = default(bool?), bool? hidden = default(bool?), string after = default(string), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (sent != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "sent", sent));
            }
            if (hidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "hidden", hidden));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "NotificationsApi.GetNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Notification>>("/auth/user/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark Notification As Read Mark a notification as seen.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        public Notification MarkNotificationAsRead(string notificationId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = MarkNotificationAsReadWithHttpInfo(notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark Notification As Read Mark a notification as seen.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        public VRChat.API.Client.ApiResponse<Notification> MarkNotificationAsReadWithHttpInfo(string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling NotificationsApi->MarkNotificationAsRead");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "NotificationsApi.MarkNotificationAsRead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Notification>("/auth/user/notifications/{notificationId}/see", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkNotificationAsRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark Notification As Read Mark a notification as seen.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> MarkNotificationAsReadAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = await MarkNotificationAsReadWithHttpInfoAsync(notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark Notification As Read Mark a notification as seen.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Notification>> MarkNotificationAsReadWithHttpInfoAsync(string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling NotificationsApi->MarkNotificationAsRead");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter

            localVarRequestOptions.Operation = "NotificationsApi.MarkNotificationAsRead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Notification>("/auth/user/notifications/{notificationId}/see", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkNotificationAsRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
