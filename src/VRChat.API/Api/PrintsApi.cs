/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRChat.API.Client;
using VRChat.API.Model;

namespace VRChat.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrintsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Print
        /// </summary>
        /// <remarks>
        /// Returns a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePrint(string printId, int operationIndex = 0);

        /// <summary>
        /// Delete Print
        /// </summary>
        /// <remarks>
        /// Returns a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePrintWithHttpInfo(string printId, int operationIndex = 0);
        /// <summary>
        /// Edit Print
        /// </summary>
        /// <remarks>
        /// Edits a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Print</returns>
        Print EditPrint(string printId, System.IO.Stream image, string note = default(string), int operationIndex = 0);

        /// <summary>
        /// Edit Print
        /// </summary>
        /// <remarks>
        /// Edits a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Print</returns>
        ApiResponse<Print> EditPrintWithHttpInfo(string printId, System.IO.Stream image, string note = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Print
        /// </summary>
        /// <remarks>
        /// Returns a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Print</returns>
        Print GetPrint(string printId, int operationIndex = 0);

        /// <summary>
        /// Get Print
        /// </summary>
        /// <remarks>
        /// Returns a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Print</returns>
        ApiResponse<Print> GetPrintWithHttpInfo(string printId, int operationIndex = 0);
        /// <summary>
        /// Get Own Prints
        /// </summary>
        /// <remarks>
        /// Returns a list of all prints of the user. User id has to be your own userId, as you can&#39;t request other user&#39;s prints.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Print&gt;</returns>
        List<Print> GetUserPrints(string userId, int operationIndex = 0);

        /// <summary>
        /// Get Own Prints
        /// </summary>
        /// <remarks>
        /// Returns a list of all prints of the user. User id has to be your own userId, as you can&#39;t request other user&#39;s prints.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Print&gt;</returns>
        ApiResponse<List<Print>> GetUserPrintsWithHttpInfo(string userId, int operationIndex = 0);
        /// <summary>
        /// Upload Print
        /// </summary>
        /// <remarks>
        /// Uploads and creates a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="timestamp">The time the image was captured.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="worldId">The id of the world in which the image was captured. (optional)</param>
        /// <param name="worldName">The name of the world in which the image was captured. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Print</returns>
        Print UploadPrint(System.IO.Stream image, DateTime timestamp, string note = default(string), string worldId = default(string), string worldName = default(string), int operationIndex = 0);

        /// <summary>
        /// Upload Print
        /// </summary>
        /// <remarks>
        /// Uploads and creates a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="timestamp">The time the image was captured.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="worldId">The id of the world in which the image was captured. (optional)</param>
        /// <param name="worldName">The name of the world in which the image was captured. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Print</returns>
        ApiResponse<Print> UploadPrintWithHttpInfo(System.IO.Stream image, DateTime timestamp, string note = default(string), string worldId = default(string), string worldName = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrintsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Print
        /// </summary>
        /// <remarks>
        /// Returns a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePrintAsync(string printId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Print
        /// </summary>
        /// <remarks>
        /// Returns a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePrintWithHttpInfoAsync(string printId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit Print
        /// </summary>
        /// <remarks>
        /// Edits a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Print</returns>
        System.Threading.Tasks.Task<Print> EditPrintAsync(string printId, System.IO.Stream image, string note = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit Print
        /// </summary>
        /// <remarks>
        /// Edits a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Print)</returns>
        System.Threading.Tasks.Task<ApiResponse<Print>> EditPrintWithHttpInfoAsync(string printId, System.IO.Stream image, string note = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Print
        /// </summary>
        /// <remarks>
        /// Returns a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Print</returns>
        System.Threading.Tasks.Task<Print> GetPrintAsync(string printId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Print
        /// </summary>
        /// <remarks>
        /// Returns a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Print)</returns>
        System.Threading.Tasks.Task<ApiResponse<Print>> GetPrintWithHttpInfoAsync(string printId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Own Prints
        /// </summary>
        /// <remarks>
        /// Returns a list of all prints of the user. User id has to be your own userId, as you can&#39;t request other user&#39;s prints.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Print&gt;</returns>
        System.Threading.Tasks.Task<List<Print>> GetUserPrintsAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Own Prints
        /// </summary>
        /// <remarks>
        /// Returns a list of all prints of the user. User id has to be your own userId, as you can&#39;t request other user&#39;s prints.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Print&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Print>>> GetUserPrintsWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload Print
        /// </summary>
        /// <remarks>
        /// Uploads and creates a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="timestamp">The time the image was captured.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="worldId">The id of the world in which the image was captured. (optional)</param>
        /// <param name="worldName">The name of the world in which the image was captured. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Print</returns>
        System.Threading.Tasks.Task<Print> UploadPrintAsync(System.IO.Stream image, DateTime timestamp, string note = default(string), string worldId = default(string), string worldName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload Print
        /// </summary>
        /// <remarks>
        /// Uploads and creates a print.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="timestamp">The time the image was captured.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="worldId">The id of the world in which the image was captured. (optional)</param>
        /// <param name="worldName">The name of the world in which the image was captured. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Print)</returns>
        System.Threading.Tasks.Task<ApiResponse<Print>> UploadPrintWithHttpInfoAsync(System.IO.Stream image, DateTime timestamp, string note = default(string), string worldId = default(string), string worldName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrintsApi : IPrintsApiSync, IPrintsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrintsApi : IPrintsApi
    {
        private VRChat.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrintsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrintsApi(string basePath)
        {
            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                new VRChat.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrintsApi(VRChat.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PrintsApi(VRChat.API.Client.ISynchronousClient client, VRChat.API.Client.IAsynchronousClient asyncClient, VRChat.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRChat.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRChat.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRChat.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRChat.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Print Returns a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePrint(string printId, int operationIndex = 0)
        {
            DeletePrintWithHttpInfo(printId);
        }

        /// <summary>
        /// Delete Print Returns a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRChat.API.Client.ApiResponse<Object> DeletePrintWithHttpInfo(string printId, int operationIndex = 0)
        {
            // verify the required parameter 'printId' is set
            if (printId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'printId' when calling PrintsApi->DeletePrint");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("printId", VRChat.API.Client.ClientUtils.ParameterToString(printId)); // path parameter

            localVarRequestOptions.Operation = "PrintsApi.DeletePrint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/prints/{printId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePrint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Print Returns a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePrintAsync(string printId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePrintWithHttpInfoAsync(printId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Print Returns a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Object>> DeletePrintWithHttpInfoAsync(string printId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'printId' is set
            if (printId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'printId' when calling PrintsApi->DeletePrint");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("printId", VRChat.API.Client.ClientUtils.ParameterToString(printId)); // path parameter

            localVarRequestOptions.Operation = "PrintsApi.DeletePrint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/prints/{printId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePrint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Print Edits a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Print</returns>
        public Print EditPrint(string printId, System.IO.Stream image, string note = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Print> localVarResponse = EditPrintWithHttpInfo(printId, image, note);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Print Edits a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Print</returns>
        public VRChat.API.Client.ApiResponse<Print> EditPrintWithHttpInfo(string printId, System.IO.Stream image, string note = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'printId' is set
            if (printId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'printId' when calling PrintsApi->EditPrint");
            }

            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling PrintsApi->EditPrint");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("printId", VRChat.API.Client.ClientUtils.ParameterToString(printId)); // path parameter
            localVarRequestOptions.FileParameters.Add("image", image);
            if (note != null)
            {
                localVarRequestOptions.FormParameters.Add("note", VRChat.API.Client.ClientUtils.ParameterToString(note)); // form parameter
            }

            localVarRequestOptions.Operation = "PrintsApi.EditPrint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Print>("/prints/{printId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditPrint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Print Edits a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Print</returns>
        public async System.Threading.Tasks.Task<Print> EditPrintAsync(string printId, System.IO.Stream image, string note = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Print> localVarResponse = await EditPrintWithHttpInfoAsync(printId, image, note, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Print Edits a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Print)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Print>> EditPrintWithHttpInfoAsync(string printId, System.IO.Stream image, string note = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'printId' is set
            if (printId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'printId' when calling PrintsApi->EditPrint");
            }

            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling PrintsApi->EditPrint");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("printId", VRChat.API.Client.ClientUtils.ParameterToString(printId)); // path parameter
            localVarRequestOptions.FileParameters.Add("image", image);
            if (note != null)
            {
                localVarRequestOptions.FormParameters.Add("note", VRChat.API.Client.ClientUtils.ParameterToString(note)); // form parameter
            }

            localVarRequestOptions.Operation = "PrintsApi.EditPrint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Print>("/prints/{printId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditPrint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Print Returns a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Print</returns>
        public Print GetPrint(string printId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Print> localVarResponse = GetPrintWithHttpInfo(printId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Print Returns a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Print</returns>
        public VRChat.API.Client.ApiResponse<Print> GetPrintWithHttpInfo(string printId, int operationIndex = 0)
        {
            // verify the required parameter 'printId' is set
            if (printId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'printId' when calling PrintsApi->GetPrint");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("printId", VRChat.API.Client.ClientUtils.ParameterToString(printId)); // path parameter

            localVarRequestOptions.Operation = "PrintsApi.GetPrint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Print>("/prints/{printId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Print Returns a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Print</returns>
        public async System.Threading.Tasks.Task<Print> GetPrintAsync(string printId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Print> localVarResponse = await GetPrintWithHttpInfoAsync(printId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Print Returns a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printId">Print ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Print)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Print>> GetPrintWithHttpInfoAsync(string printId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'printId' is set
            if (printId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'printId' when calling PrintsApi->GetPrint");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("printId", VRChat.API.Client.ClientUtils.ParameterToString(printId)); // path parameter

            localVarRequestOptions.Operation = "PrintsApi.GetPrint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Print>("/prints/{printId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Own Prints Returns a list of all prints of the user. User id has to be your own userId, as you can&#39;t request other user&#39;s prints.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Print&gt;</returns>
        public List<Print> GetUserPrints(string userId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<Print>> localVarResponse = GetUserPrintsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Own Prints Returns a list of all prints of the user. User id has to be your own userId, as you can&#39;t request other user&#39;s prints.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Print&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<Print>> GetUserPrintsWithHttpInfo(string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling PrintsApi->GetUserPrints");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "PrintsApi.GetUserPrints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Print>>("/prints/user/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPrints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Own Prints Returns a list of all prints of the user. User id has to be your own userId, as you can&#39;t request other user&#39;s prints.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Print&gt;</returns>
        public async System.Threading.Tasks.Task<List<Print>> GetUserPrintsAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<Print>> localVarResponse = await GetUserPrintsWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Own Prints Returns a list of all prints of the user. User id has to be your own userId, as you can&#39;t request other user&#39;s prints.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Print&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<Print>>> GetUserPrintsWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling PrintsApi->GetUserPrints");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "PrintsApi.GetUserPrints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Print>>("/prints/user/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPrints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Print Uploads and creates a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="timestamp">The time the image was captured.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="worldId">The id of the world in which the image was captured. (optional)</param>
        /// <param name="worldName">The name of the world in which the image was captured. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Print</returns>
        public Print UploadPrint(System.IO.Stream image, DateTime timestamp, string note = default(string), string worldId = default(string), string worldName = default(string), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Print> localVarResponse = UploadPrintWithHttpInfo(image, timestamp, note, worldId, worldName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Print Uploads and creates a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="timestamp">The time the image was captured.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="worldId">The id of the world in which the image was captured. (optional)</param>
        /// <param name="worldName">The name of the world in which the image was captured. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Print</returns>
        public VRChat.API.Client.ApiResponse<Print> UploadPrintWithHttpInfo(System.IO.Stream image, DateTime timestamp, string note = default(string), string worldId = default(string), string worldName = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling PrintsApi->UploadPrint");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("image", image);
            localVarRequestOptions.FormParameters.Add("timestamp", VRChat.API.Client.ClientUtils.ParameterToString(timestamp)); // form parameter
            if (note != null)
            {
                localVarRequestOptions.FormParameters.Add("note", VRChat.API.Client.ClientUtils.ParameterToString(note)); // form parameter
            }
            if (worldId != null)
            {
                localVarRequestOptions.FormParameters.Add("worldId", VRChat.API.Client.ClientUtils.ParameterToString(worldId)); // form parameter
            }
            if (worldName != null)
            {
                localVarRequestOptions.FormParameters.Add("worldName", VRChat.API.Client.ClientUtils.ParameterToString(worldName)); // form parameter
            }

            localVarRequestOptions.Operation = "PrintsApi.UploadPrint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Print>("/prints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadPrint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Print Uploads and creates a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="timestamp">The time the image was captured.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="worldId">The id of the world in which the image was captured. (optional)</param>
        /// <param name="worldName">The name of the world in which the image was captured. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Print</returns>
        public async System.Threading.Tasks.Task<Print> UploadPrintAsync(System.IO.Stream image, DateTime timestamp, string note = default(string), string worldId = default(string), string worldName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Print> localVarResponse = await UploadPrintWithHttpInfoAsync(image, timestamp, note, worldId, worldName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Print Uploads and creates a print.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="timestamp">The time the image was captured.</param>
        /// <param name="note">The caption for the image. (optional)</param>
        /// <param name="worldId">The id of the world in which the image was captured. (optional)</param>
        /// <param name="worldName">The name of the world in which the image was captured. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Print)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Print>> UploadPrintWithHttpInfoAsync(System.IO.Stream image, DateTime timestamp, string note = default(string), string worldId = default(string), string worldName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling PrintsApi->UploadPrint");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("image", image);
            localVarRequestOptions.FormParameters.Add("timestamp", VRChat.API.Client.ClientUtils.ParameterToString(timestamp)); // form parameter
            if (note != null)
            {
                localVarRequestOptions.FormParameters.Add("note", VRChat.API.Client.ClientUtils.ParameterToString(note)); // form parameter
            }
            if (worldId != null)
            {
                localVarRequestOptions.FormParameters.Add("worldId", VRChat.API.Client.ClientUtils.ParameterToString(worldId)); // form parameter
            }
            if (worldName != null)
            {
                localVarRequestOptions.FormParameters.Add("worldName", VRChat.API.Client.ClientUtils.ParameterToString(worldName)); // form parameter
            }

            localVarRequestOptions.Operation = "PrintsApi.UploadPrint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Print>("/prints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadPrint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
