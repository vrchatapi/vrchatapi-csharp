/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRChat.API.Client;
using VRChat.API.Model;

namespace VRChat.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a calendar event
        /// </summary>
        /// <remarks>
        /// Creates an event for a group on the calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalendarEvent</returns>
        CalendarEvent CreateGroupCalendarEvent(string groupId, CreateCalendarEventRequest createCalendarEventRequest, int operationIndex = 0);

        /// <summary>
        /// Create a calendar event
        /// </summary>
        /// <remarks>
        /// Creates an event for a group on the calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalendarEvent</returns>
        ApiResponse<CalendarEvent> CreateGroupCalendarEventWithHttpInfo(string groupId, CreateCalendarEventRequest createCalendarEventRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a calendar event
        /// </summary>
        /// <remarks>
        /// Delete a group calendar event
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        Success DeleteGroupCalendarEvent(string groupId, string calendarId, int operationIndex = 0);

        /// <summary>
        /// Delete a calendar event
        /// </summary>
        /// <remarks>
        /// Delete a group calendar event
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteGroupCalendarEventWithHttpInfo(string groupId, string calendarId, int operationIndex = 0);
        /// <summary>
        /// Follow a calendar event
        /// </summary>
        /// <remarks>
        /// Follow or unfollow an event on a group&#39;s calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="followCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalendarEvent</returns>
        CalendarEvent FollowGroupCalendarEvent(string groupId, string calendarId, FollowCalendarEventRequest followCalendarEventRequest, int operationIndex = 0);

        /// <summary>
        /// Follow a calendar event
        /// </summary>
        /// <remarks>
        /// Follow or unfollow an event on a group&#39;s calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="followCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalendarEvent</returns>
        ApiResponse<CalendarEvent> FollowGroupCalendarEventWithHttpInfo(string groupId, string calendarId, FollowCalendarEventRequest followCalendarEventRequest, int operationIndex = 0);
        /// <summary>
        /// List calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a user&#39;s calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        PaginatedCalendarEventList GetCalendarEvents(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// List calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a user&#39;s calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        ApiResponse<PaginatedCalendarEventList> GetCalendarEventsWithHttpInfo(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// List featured calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a featured calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        PaginatedCalendarEventList GetFeaturedCalendarEvents(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// List featured calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a featured calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        ApiResponse<PaginatedCalendarEventList> GetFeaturedCalendarEventsWithHttpInfo(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// List followed calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a followed calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        PaginatedCalendarEventList GetFollowedCalendarEvents(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// List followed calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a followed calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        ApiResponse<PaginatedCalendarEventList> GetFollowedCalendarEventsWithHttpInfo(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a calendar event
        /// </summary>
        /// <remarks>
        /// Get a group calendar event
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalendarEvent</returns>
        CalendarEvent GetGroupCalendarEvent(string groupId, string calendarId, int operationIndex = 0);

        /// <summary>
        /// Get a calendar event
        /// </summary>
        /// <remarks>
        /// Get a group calendar event
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalendarEvent</returns>
        ApiResponse<CalendarEvent> GetGroupCalendarEventWithHttpInfo(string groupId, string calendarId, int operationIndex = 0);
        /// <summary>
        /// Download calendar event as ICS
        /// </summary>
        /// <remarks>
        /// Returns the specified calendar in iCalendar (ICS) format.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetGroupCalendarEventICS(string groupId, string calendarId, int operationIndex = 0);

        /// <summary>
        /// Download calendar event as ICS
        /// </summary>
        /// <remarks>
        /// Returns the specified calendar in iCalendar (ICS) format.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetGroupCalendarEventICSWithHttpInfo(string groupId, string calendarId, int operationIndex = 0);
        /// <summary>
        /// List a group&#39;s calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a group&#39;s calendar events
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        PaginatedCalendarEventList GetGroupCalendarEvents(string groupId, DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// List a group&#39;s calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a group&#39;s calendar events
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        ApiResponse<PaginatedCalendarEventList> GetGroupCalendarEventsWithHttpInfo(string groupId, DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search for calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of calendar events by search terms
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for calendar events.</param>
        /// <param name="utcOffset">The offset from UTC in hours of the client or authenticated user. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        PaginatedCalendarEventList SearchCalendarEvents(string searchTerm, int? utcOffset = default(int?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search for calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of calendar events by search terms
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for calendar events.</param>
        /// <param name="utcOffset">The offset from UTC in hours of the client or authenticated user. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        ApiResponse<PaginatedCalendarEventList> SearchCalendarEventsWithHttpInfo(string searchTerm, int? utcOffset = default(int?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update a calendar event
        /// </summary>
        /// <remarks>
        /// Updates an event for a group on the calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="updateCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalendarEvent</returns>
        CalendarEvent UpdateGroupCalendarEvent(string groupId, string calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, int operationIndex = 0);

        /// <summary>
        /// Update a calendar event
        /// </summary>
        /// <remarks>
        /// Updates an event for a group on the calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="updateCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalendarEvent</returns>
        ApiResponse<CalendarEvent> UpdateGroupCalendarEventWithHttpInfo(string groupId, string calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a calendar event
        /// </summary>
        /// <remarks>
        /// Creates an event for a group on the calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalendarEvent</returns>
        System.Threading.Tasks.Task<CalendarEvent> CreateGroupCalendarEventAsync(string groupId, CreateCalendarEventRequest createCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a calendar event
        /// </summary>
        /// <remarks>
        /// Creates an event for a group on the calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalendarEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarEvent>> CreateGroupCalendarEventWithHttpInfoAsync(string groupId, CreateCalendarEventRequest createCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a calendar event
        /// </summary>
        /// <remarks>
        /// Delete a group calendar event
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteGroupCalendarEventAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a calendar event
        /// </summary>
        /// <remarks>
        /// Delete a group calendar event
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteGroupCalendarEventWithHttpInfoAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Follow a calendar event
        /// </summary>
        /// <remarks>
        /// Follow or unfollow an event on a group&#39;s calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="followCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalendarEvent</returns>
        System.Threading.Tasks.Task<CalendarEvent> FollowGroupCalendarEventAsync(string groupId, string calendarId, FollowCalendarEventRequest followCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Follow a calendar event
        /// </summary>
        /// <remarks>
        /// Follow or unfollow an event on a group&#39;s calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="followCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalendarEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarEvent>> FollowGroupCalendarEventWithHttpInfoAsync(string groupId, string calendarId, FollowCalendarEventRequest followCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a user&#39;s calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        System.Threading.Tasks.Task<PaginatedCalendarEventList> GetCalendarEventsAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a user&#39;s calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedCalendarEventList>> GetCalendarEventsWithHttpInfoAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List featured calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a featured calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        System.Threading.Tasks.Task<PaginatedCalendarEventList> GetFeaturedCalendarEventsAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List featured calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a featured calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedCalendarEventList>> GetFeaturedCalendarEventsWithHttpInfoAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List followed calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a followed calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        System.Threading.Tasks.Task<PaginatedCalendarEventList> GetFollowedCalendarEventsAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List followed calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a followed calendar events for the month in ?date
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedCalendarEventList>> GetFollowedCalendarEventsWithHttpInfoAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a calendar event
        /// </summary>
        /// <remarks>
        /// Get a group calendar event
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalendarEvent</returns>
        System.Threading.Tasks.Task<CalendarEvent> GetGroupCalendarEventAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a calendar event
        /// </summary>
        /// <remarks>
        /// Get a group calendar event
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalendarEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarEvent>> GetGroupCalendarEventWithHttpInfoAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download calendar event as ICS
        /// </summary>
        /// <remarks>
        /// Returns the specified calendar in iCalendar (ICS) format.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetGroupCalendarEventICSAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download calendar event as ICS
        /// </summary>
        /// <remarks>
        /// Returns the specified calendar in iCalendar (ICS) format.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetGroupCalendarEventICSWithHttpInfoAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a group&#39;s calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a group&#39;s calendar events
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        System.Threading.Tasks.Task<PaginatedCalendarEventList> GetGroupCalendarEventsAsync(string groupId, DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a group&#39;s calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of a group&#39;s calendar events
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedCalendarEventList>> GetGroupCalendarEventsWithHttpInfoAsync(string groupId, DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of calendar events by search terms
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for calendar events.</param>
        /// <param name="utcOffset">The offset from UTC in hours of the client or authenticated user. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        System.Threading.Tasks.Task<PaginatedCalendarEventList> SearchCalendarEventsAsync(string searchTerm, int? utcOffset = default(int?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for calendar events
        /// </summary>
        /// <remarks>
        /// Get a list of calendar events by search terms
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for calendar events.</param>
        /// <param name="utcOffset">The offset from UTC in hours of the client or authenticated user. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedCalendarEventList>> SearchCalendarEventsWithHttpInfoAsync(string searchTerm, int? utcOffset = default(int?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a calendar event
        /// </summary>
        /// <remarks>
        /// Updates an event for a group on the calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="updateCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalendarEvent</returns>
        System.Threading.Tasks.Task<CalendarEvent> UpdateGroupCalendarEventAsync(string groupId, string calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a calendar event
        /// </summary>
        /// <remarks>
        /// Updates an event for a group on the calendar
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="updateCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalendarEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarEvent>> UpdateGroupCalendarEventWithHttpInfoAsync(string groupId, string calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarApi : ICalendarApiSync, ICalendarApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalendarApi : ICalendarApi
    {
        private VRChat.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarApi(string basePath)
        {
            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                new VRChat.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalendarApi(VRChat.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CalendarApi(VRChat.API.Client.ISynchronousClient client, VRChat.API.Client.IAsynchronousClient asyncClient, VRChat.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRChat.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRChat.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRChat.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRChat.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a calendar event Creates an event for a group on the calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalendarEvent</returns>
        public CalendarEvent CreateGroupCalendarEvent(string groupId, CreateCalendarEventRequest createCalendarEventRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<CalendarEvent> localVarResponse = CreateGroupCalendarEventWithHttpInfo(groupId, createCalendarEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a calendar event Creates an event for a group on the calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalendarEvent</returns>
        public VRChat.API.Client.ApiResponse<CalendarEvent> CreateGroupCalendarEventWithHttpInfo(string groupId, CreateCalendarEventRequest createCalendarEventRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->CreateGroupCalendarEvent");
            }

            // verify the required parameter 'createCalendarEventRequest' is set
            if (createCalendarEventRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createCalendarEventRequest' when calling CalendarApi->CreateGroupCalendarEvent");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createCalendarEventRequest;

            localVarRequestOptions.Operation = "CalendarApi.CreateGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CalendarEvent>("/calendar/{groupId}/event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a calendar event Creates an event for a group on the calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalendarEvent</returns>
        public async System.Threading.Tasks.Task<CalendarEvent> CreateGroupCalendarEventAsync(string groupId, CreateCalendarEventRequest createCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<CalendarEvent> localVarResponse = await CreateGroupCalendarEventWithHttpInfoAsync(groupId, createCalendarEventRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a calendar event Creates an event for a group on the calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="createCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalendarEvent)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<CalendarEvent>> CreateGroupCalendarEventWithHttpInfoAsync(string groupId, CreateCalendarEventRequest createCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->CreateGroupCalendarEvent");
            }

            // verify the required parameter 'createCalendarEventRequest' is set
            if (createCalendarEventRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'createCalendarEventRequest' when calling CalendarApi->CreateGroupCalendarEvent");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createCalendarEventRequest;

            localVarRequestOptions.Operation = "CalendarApi.CreateGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CalendarEvent>("/calendar/{groupId}/event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a calendar event Delete a group calendar event
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Success</returns>
        public Success DeleteGroupCalendarEvent(string groupId, string calendarId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = DeleteGroupCalendarEventWithHttpInfo(groupId, calendarId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a calendar event Delete a group calendar event
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Success</returns>
        public VRChat.API.Client.ApiResponse<Success> DeleteGroupCalendarEventWithHttpInfo(string groupId, string calendarId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->DeleteGroupCalendarEvent");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->DeleteGroupCalendarEvent");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter

            localVarRequestOptions.Operation = "CalendarApi.DeleteGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Success>("/calendar/{groupId}/{calendarId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a calendar event Delete a group calendar event
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteGroupCalendarEventAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Success> localVarResponse = await DeleteGroupCalendarEventWithHttpInfoAsync(groupId, calendarId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a calendar event Delete a group calendar event
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Success>> DeleteGroupCalendarEventWithHttpInfoAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->DeleteGroupCalendarEvent");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->DeleteGroupCalendarEvent");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter

            localVarRequestOptions.Operation = "CalendarApi.DeleteGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Success>("/calendar/{groupId}/{calendarId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a calendar event Follow or unfollow an event on a group&#39;s calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="followCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalendarEvent</returns>
        public CalendarEvent FollowGroupCalendarEvent(string groupId, string calendarId, FollowCalendarEventRequest followCalendarEventRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<CalendarEvent> localVarResponse = FollowGroupCalendarEventWithHttpInfo(groupId, calendarId, followCalendarEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Follow a calendar event Follow or unfollow an event on a group&#39;s calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="followCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalendarEvent</returns>
        public VRChat.API.Client.ApiResponse<CalendarEvent> FollowGroupCalendarEventWithHttpInfo(string groupId, string calendarId, FollowCalendarEventRequest followCalendarEventRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->FollowGroupCalendarEvent");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->FollowGroupCalendarEvent");
            }

            // verify the required parameter 'followCalendarEventRequest' is set
            if (followCalendarEventRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'followCalendarEventRequest' when calling CalendarApi->FollowGroupCalendarEvent");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter
            localVarRequestOptions.Data = followCalendarEventRequest;

            localVarRequestOptions.Operation = "CalendarApi.FollowGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CalendarEvent>("/calendar/{groupId}/{calendarId}/follow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a calendar event Follow or unfollow an event on a group&#39;s calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="followCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalendarEvent</returns>
        public async System.Threading.Tasks.Task<CalendarEvent> FollowGroupCalendarEventAsync(string groupId, string calendarId, FollowCalendarEventRequest followCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<CalendarEvent> localVarResponse = await FollowGroupCalendarEventWithHttpInfoAsync(groupId, calendarId, followCalendarEventRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Follow a calendar event Follow or unfollow an event on a group&#39;s calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="followCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalendarEvent)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<CalendarEvent>> FollowGroupCalendarEventWithHttpInfoAsync(string groupId, string calendarId, FollowCalendarEventRequest followCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->FollowGroupCalendarEvent");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->FollowGroupCalendarEvent");
            }

            // verify the required parameter 'followCalendarEventRequest' is set
            if (followCalendarEventRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'followCalendarEventRequest' when calling CalendarApi->FollowGroupCalendarEvent");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter
            localVarRequestOptions.Data = followCalendarEventRequest;

            localVarRequestOptions.Operation = "CalendarApi.FollowGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CalendarEvent>("/calendar/{groupId}/{calendarId}/follow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List calendar events Get a list of a user&#39;s calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        public PaginatedCalendarEventList GetCalendarEvents(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = GetCalendarEventsWithHttpInfo(date, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List calendar events Get a list of a user&#39;s calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        public VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> GetCalendarEventsWithHttpInfo(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.GetCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedCalendarEventList>("/calendar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List calendar events Get a list of a user&#39;s calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        public async System.Threading.Tasks.Task<PaginatedCalendarEventList> GetCalendarEventsAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = await GetCalendarEventsWithHttpInfoAsync(date, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List calendar events Get a list of a user&#39;s calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<PaginatedCalendarEventList>> GetCalendarEventsWithHttpInfoAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.GetCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedCalendarEventList>("/calendar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List featured calendar events Get a list of a featured calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        public PaginatedCalendarEventList GetFeaturedCalendarEvents(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = GetFeaturedCalendarEventsWithHttpInfo(date, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List featured calendar events Get a list of a featured calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        public VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> GetFeaturedCalendarEventsWithHttpInfo(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.GetFeaturedCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedCalendarEventList>("/calendar/featured", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeaturedCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List featured calendar events Get a list of a featured calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        public async System.Threading.Tasks.Task<PaginatedCalendarEventList> GetFeaturedCalendarEventsAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = await GetFeaturedCalendarEventsWithHttpInfoAsync(date, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List featured calendar events Get a list of a featured calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<PaginatedCalendarEventList>> GetFeaturedCalendarEventsWithHttpInfoAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.GetFeaturedCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedCalendarEventList>("/calendar/featured", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeaturedCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List followed calendar events Get a list of a followed calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        public PaginatedCalendarEventList GetFollowedCalendarEvents(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = GetFollowedCalendarEventsWithHttpInfo(date, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List followed calendar events Get a list of a followed calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        public VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> GetFollowedCalendarEventsWithHttpInfo(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.GetFollowedCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedCalendarEventList>("/calendar/following", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowedCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List followed calendar events Get a list of a followed calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        public async System.Threading.Tasks.Task<PaginatedCalendarEventList> GetFollowedCalendarEventsAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = await GetFollowedCalendarEventsWithHttpInfoAsync(date, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List followed calendar events Get a list of a followed calendar events for the month in ?date
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<PaginatedCalendarEventList>> GetFollowedCalendarEventsWithHttpInfoAsync(DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.GetFollowedCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedCalendarEventList>("/calendar/following", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowedCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a calendar event Get a group calendar event
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalendarEvent</returns>
        public CalendarEvent GetGroupCalendarEvent(string groupId, string calendarId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<CalendarEvent> localVarResponse = GetGroupCalendarEventWithHttpInfo(groupId, calendarId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a calendar event Get a group calendar event
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalendarEvent</returns>
        public VRChat.API.Client.ApiResponse<CalendarEvent> GetGroupCalendarEventWithHttpInfo(string groupId, string calendarId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->GetGroupCalendarEvent");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->GetGroupCalendarEvent");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter

            localVarRequestOptions.Operation = "CalendarApi.GetGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CalendarEvent>("/calendar/{groupId}/{calendarId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a calendar event Get a group calendar event
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalendarEvent</returns>
        public async System.Threading.Tasks.Task<CalendarEvent> GetGroupCalendarEventAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<CalendarEvent> localVarResponse = await GetGroupCalendarEventWithHttpInfoAsync(groupId, calendarId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a calendar event Get a group calendar event
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalendarEvent)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<CalendarEvent>> GetGroupCalendarEventWithHttpInfoAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->GetGroupCalendarEvent");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->GetGroupCalendarEvent");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter

            localVarRequestOptions.Operation = "CalendarApi.GetGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CalendarEvent>("/calendar/{groupId}/{calendarId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download calendar event as ICS Returns the specified calendar in iCalendar (ICS) format.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetGroupCalendarEventICS(string groupId, string calendarId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<System.IO.Stream> localVarResponse = GetGroupCalendarEventICSWithHttpInfo(groupId, calendarId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download calendar event as ICS Returns the specified calendar in iCalendar (ICS) format.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public VRChat.API.Client.ApiResponse<System.IO.Stream> GetGroupCalendarEventICSWithHttpInfo(string groupId, string calendarId, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->GetGroupCalendarEventICS");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->GetGroupCalendarEventICS");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/calendar",
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter

            localVarRequestOptions.Operation = "CalendarApi.GetGroupCalendarEventICS";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/calendar/{groupId}/{calendarId}.ics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupCalendarEventICS", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download calendar event as ICS Returns the specified calendar in iCalendar (ICS) format.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetGroupCalendarEventICSAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetGroupCalendarEventICSWithHttpInfoAsync(groupId, calendarId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download calendar event as ICS Returns the specified calendar in iCalendar (ICS) format.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<System.IO.Stream>> GetGroupCalendarEventICSWithHttpInfoAsync(string groupId, string calendarId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->GetGroupCalendarEventICS");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->GetGroupCalendarEventICS");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/calendar",
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter

            localVarRequestOptions.Operation = "CalendarApi.GetGroupCalendarEventICS";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/calendar/{groupId}/{calendarId}.ics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupCalendarEventICS", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a group&#39;s calendar events Get a list of a group&#39;s calendar events
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        public PaginatedCalendarEventList GetGroupCalendarEvents(string groupId, DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = GetGroupCalendarEventsWithHttpInfo(groupId, date, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a group&#39;s calendar events Get a list of a group&#39;s calendar events
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        public VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> GetGroupCalendarEventsWithHttpInfo(string groupId, DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->GetGroupCalendarEvents");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.GetGroupCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedCalendarEventList>("/calendar/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a group&#39;s calendar events Get a list of a group&#39;s calendar events
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        public async System.Threading.Tasks.Task<PaginatedCalendarEventList> GetGroupCalendarEventsAsync(string groupId, DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = await GetGroupCalendarEventsWithHttpInfoAsync(groupId, date, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a group&#39;s calendar events Get a list of a group&#39;s calendar events
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="date">The month to search in. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<PaginatedCalendarEventList>> GetGroupCalendarEventsWithHttpInfoAsync(string groupId, DateTime? date = default(DateTime?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->GetGroupCalendarEvents");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.GetGroupCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedCalendarEventList>("/calendar/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for calendar events Get a list of calendar events by search terms
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for calendar events.</param>
        /// <param name="utcOffset">The offset from UTC in hours of the client or authenticated user. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedCalendarEventList</returns>
        public PaginatedCalendarEventList SearchCalendarEvents(string searchTerm, int? utcOffset = default(int?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = SearchCalendarEventsWithHttpInfo(searchTerm, utcOffset, n, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for calendar events Get a list of calendar events by search terms
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for calendar events.</param>
        /// <param name="utcOffset">The offset from UTC in hours of the client or authenticated user. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedCalendarEventList</returns>
        public VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> SearchCalendarEventsWithHttpInfo(string searchTerm, int? utcOffset = default(int?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'searchTerm' when calling CalendarApi->SearchCalendarEvents");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            if (utcOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "utcOffset", utcOffset));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.SearchCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedCalendarEventList>("/calendar/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for calendar events Get a list of calendar events by search terms
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for calendar events.</param>
        /// <param name="utcOffset">The offset from UTC in hours of the client or authenticated user. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalendarEventList</returns>
        public async System.Threading.Tasks.Task<PaginatedCalendarEventList> SearchCalendarEventsAsync(string searchTerm, int? utcOffset = default(int?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<PaginatedCalendarEventList> localVarResponse = await SearchCalendarEventsWithHttpInfoAsync(searchTerm, utcOffset, n, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for calendar events Get a list of calendar events by search terms
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for calendar events.</param>
        /// <param name="utcOffset">The offset from UTC in hours of the client or authenticated user. (optional)</param>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalendarEventList)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<PaginatedCalendarEventList>> SearchCalendarEventsWithHttpInfoAsync(string searchTerm, int? utcOffset = default(int?), int? n = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'searchTerm' when calling CalendarApi->SearchCalendarEvents");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            if (utcOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "utcOffset", utcOffset));
            }
            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "CalendarApi.SearchCalendarEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedCalendarEventList>("/calendar/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCalendarEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a calendar event Updates an event for a group on the calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="updateCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalendarEvent</returns>
        public CalendarEvent UpdateGroupCalendarEvent(string groupId, string calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<CalendarEvent> localVarResponse = UpdateGroupCalendarEventWithHttpInfo(groupId, calendarId, updateCalendarEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a calendar event Updates an event for a group on the calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="updateCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalendarEvent</returns>
        public VRChat.API.Client.ApiResponse<CalendarEvent> UpdateGroupCalendarEventWithHttpInfo(string groupId, string calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->UpdateGroupCalendarEvent");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->UpdateGroupCalendarEvent");
            }

            // verify the required parameter 'updateCalendarEventRequest' is set
            if (updateCalendarEventRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'updateCalendarEventRequest' when calling CalendarApi->UpdateGroupCalendarEvent");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter
            localVarRequestOptions.Data = updateCalendarEventRequest;

            localVarRequestOptions.Operation = "CalendarApi.UpdateGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CalendarEvent>("/calendar/{groupId}/{calendarId}/event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a calendar event Updates an event for a group on the calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="updateCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalendarEvent</returns>
        public async System.Threading.Tasks.Task<CalendarEvent> UpdateGroupCalendarEventAsync(string groupId, string calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<CalendarEvent> localVarResponse = await UpdateGroupCalendarEventWithHttpInfoAsync(groupId, calendarId, updateCalendarEventRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a calendar event Updates an event for a group on the calendar
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Must be a valid group ID.</param>
        /// <param name="calendarId">Must be a valid calendar ID.</param>
        /// <param name="updateCalendarEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalendarEvent)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<CalendarEvent>> UpdateGroupCalendarEventWithHttpInfoAsync(string groupId, string calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'groupId' when calling CalendarApi->UpdateGroupCalendarEvent");
            }

            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->UpdateGroupCalendarEvent");
            }

            // verify the required parameter 'updateCalendarEventRequest' is set
            if (updateCalendarEventRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'updateCalendarEventRequest' when calling CalendarApi->UpdateGroupCalendarEvent");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", VRChat.API.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("calendarId", VRChat.API.Client.ClientUtils.ParameterToString(calendarId)); // path parameter
            localVarRequestOptions.Data = updateCalendarEventRequest;

            localVarRequestOptions.Operation = "CalendarApi.UpdateGroupCalendarEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CalendarEvent>("/calendar/{groupId}/{calendarId}/event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupCalendarEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
