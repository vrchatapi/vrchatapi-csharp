/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRChat.API.Client;
using VRChat.API.Model;

namespace VRChat.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInviteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Invite Message
        /// </summary>
        /// <remarks>
        /// Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteMessage</returns>
        InviteMessage GetInviteMessage(string userId, InviteMessageType messageType, int slot, int operationIndex = 0);

        /// <summary>
        /// Get Invite Message
        /// </summary>
        /// <remarks>
        /// Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteMessage</returns>
        ApiResponse<InviteMessage> GetInviteMessageWithHttpInfo(string userId, InviteMessageType messageType, int slot, int operationIndex = 0);
        /// <summary>
        /// List Invite Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InviteMessage&gt;</returns>
        List<InviteMessage> GetInviteMessages(string userId, InviteMessageType messageType, int operationIndex = 0);

        /// <summary>
        /// List Invite Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        ApiResponse<List<InviteMessage>> GetInviteMessagesWithHttpInfo(string userId, InviteMessageType messageType, int operationIndex = 0);
        /// <summary>
        /// Invite Myself To Instance
        /// </summary>
        /// <remarks>
        /// Sends self an invite to an instance
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId">Must be a valid world ID.</param>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentNotification</returns>
        SentNotification InviteMyselfTo(string worldId, string instanceId, int operationIndex = 0);

        /// <summary>
        /// Invite Myself To Instance
        /// </summary>
        /// <remarks>
        /// Sends self an invite to an instance
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId">Must be a valid world ID.</param>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentNotification</returns>
        ApiResponse<SentNotification> InviteMyselfToWithHttpInfo(string worldId, string instanceId, int operationIndex = 0);
        /// <summary>
        /// Invite User
        /// </summary>
        /// <remarks>
        /// Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentNotification</returns>
        SentNotification InviteUser(string userId, InviteRequest inviteRequest, int operationIndex = 0);

        /// <summary>
        /// Invite User
        /// </summary>
        /// <remarks>
        /// Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentNotification</returns>
        ApiResponse<SentNotification> InviteUserWithHttpInfo(string userId, InviteRequest inviteRequest, int operationIndex = 0);
        /// <summary>
        /// Invite User with photo
        /// </summary>
        /// <remarks>
        /// Sends an photo invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentNotification</returns>
        SentNotification InviteUserWithPhoto(string userId, System.IO.Stream image, InviteRequest data, int operationIndex = 0);

        /// <summary>
        /// Invite User with photo
        /// </summary>
        /// <remarks>
        /// Sends an photo invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentNotification</returns>
        ApiResponse<SentNotification> InviteUserWithPhotoWithHttpInfo(string userId, System.IO.Stream image, InviteRequest data, int operationIndex = 0);
        /// <summary>
        /// Request Invite
        /// </summary>
        /// <remarks>
        /// Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        Notification RequestInvite(string userId, RequestInviteRequest requestInviteRequest = default(RequestInviteRequest), int operationIndex = 0);

        /// <summary>
        /// Request Invite
        /// </summary>
        /// <remarks>
        /// Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> RequestInviteWithHttpInfo(string userId, RequestInviteRequest requestInviteRequest = default(RequestInviteRequest), int operationIndex = 0);
        /// <summary>
        /// Request Invite with photo
        /// </summary>
        /// <remarks>
        /// Requests with photo an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        Notification RequestInviteWithPhoto(string userId, System.IO.Stream image, RequestInviteRequest data, int operationIndex = 0);

        /// <summary>
        /// Request Invite with photo
        /// </summary>
        /// <remarks>
        /// Requests with photo an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> RequestInviteWithPhotoWithHttpInfo(string userId, System.IO.Stream image, RequestInviteRequest data, int operationIndex = 0);
        /// <summary>
        /// Reset Invite Message
        /// </summary>
        /// <remarks>
        /// Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InviteMessage&gt;</returns>
        List<InviteMessage> ResetInviteMessage(string userId, InviteMessageType messageType, int slot, int operationIndex = 0);

        /// <summary>
        /// Reset Invite Message
        /// </summary>
        /// <remarks>
        /// Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        ApiResponse<List<InviteMessage>> ResetInviteMessageWithHttpInfo(string userId, InviteMessageType messageType, int slot, int operationIndex = 0);
        /// <summary>
        /// Respond Invite
        /// </summary>
        /// <remarks>
        /// Respond to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="inviteResponse">Slot number of the Response Message to use when responding to a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        Notification RespondInvite(string notificationId, InviteResponse inviteResponse, int operationIndex = 0);

        /// <summary>
        /// Respond Invite
        /// </summary>
        /// <remarks>
        /// Respond to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="inviteResponse">Slot number of the Response Message to use when responding to a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> RespondInviteWithHttpInfo(string notificationId, InviteResponse inviteResponse, int operationIndex = 0);
        /// <summary>
        /// Respond Invite with photo
        /// </summary>
        /// <remarks>
        /// Respond with photo to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.&#39;
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        Notification RespondInviteWithPhoto(string notificationId, System.IO.Stream image, InviteResponse data, int operationIndex = 0);

        /// <summary>
        /// Respond Invite with photo
        /// </summary>
        /// <remarks>
        /// Respond with photo to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.&#39;
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> RespondInviteWithPhotoWithHttpInfo(string notificationId, System.IO.Stream image, InviteResponse data, int operationIndex = 0);
        /// <summary>
        /// Update Invite Message
        /// </summary>
        /// <remarks>
        /// Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InviteMessage&gt;</returns>
        List<InviteMessage> UpdateInviteMessage(string userId, InviteMessageType messageType, int slot, UpdateInviteMessageRequest updateInviteMessageRequest = default(UpdateInviteMessageRequest), int operationIndex = 0);

        /// <summary>
        /// Update Invite Message
        /// </summary>
        /// <remarks>
        /// Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        ApiResponse<List<InviteMessage>> UpdateInviteMessageWithHttpInfo(string userId, InviteMessageType messageType, int slot, UpdateInviteMessageRequest updateInviteMessageRequest = default(UpdateInviteMessageRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInviteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Invite Message
        /// </summary>
        /// <remarks>
        /// Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteMessage</returns>
        System.Threading.Tasks.Task<InviteMessage> GetInviteMessageAsync(string userId, InviteMessageType messageType, int slot, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Invite Message
        /// </summary>
        /// <remarks>
        /// Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteMessage>> GetInviteMessageWithHttpInfoAsync(string userId, InviteMessageType messageType, int slot, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Invite Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InviteMessage&gt;</returns>
        System.Threading.Tasks.Task<List<InviteMessage>> GetInviteMessagesAsync(string userId, InviteMessageType messageType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Invite Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InviteMessage>>> GetInviteMessagesWithHttpInfoAsync(string userId, InviteMessageType messageType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invite Myself To Instance
        /// </summary>
        /// <remarks>
        /// Sends self an invite to an instance
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId">Must be a valid world ID.</param>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentNotification</returns>
        System.Threading.Tasks.Task<SentNotification> InviteMyselfToAsync(string worldId, string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invite Myself To Instance
        /// </summary>
        /// <remarks>
        /// Sends self an invite to an instance
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId">Must be a valid world ID.</param>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentNotification)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentNotification>> InviteMyselfToWithHttpInfoAsync(string worldId, string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invite User
        /// </summary>
        /// <remarks>
        /// Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentNotification</returns>
        System.Threading.Tasks.Task<SentNotification> InviteUserAsync(string userId, InviteRequest inviteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invite User
        /// </summary>
        /// <remarks>
        /// Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentNotification)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentNotification>> InviteUserWithHttpInfoAsync(string userId, InviteRequest inviteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invite User with photo
        /// </summary>
        /// <remarks>
        /// Sends an photo invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentNotification</returns>
        System.Threading.Tasks.Task<SentNotification> InviteUserWithPhotoAsync(string userId, System.IO.Stream image, InviteRequest data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invite User with photo
        /// </summary>
        /// <remarks>
        /// Sends an photo invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentNotification)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentNotification>> InviteUserWithPhotoWithHttpInfoAsync(string userId, System.IO.Stream image, InviteRequest data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request Invite
        /// </summary>
        /// <remarks>
        /// Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> RequestInviteAsync(string userId, RequestInviteRequest requestInviteRequest = default(RequestInviteRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request Invite
        /// </summary>
        /// <remarks>
        /// Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> RequestInviteWithHttpInfoAsync(string userId, RequestInviteRequest requestInviteRequest = default(RequestInviteRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request Invite with photo
        /// </summary>
        /// <remarks>
        /// Requests with photo an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> RequestInviteWithPhotoAsync(string userId, System.IO.Stream image, RequestInviteRequest data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request Invite with photo
        /// </summary>
        /// <remarks>
        /// Requests with photo an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> RequestInviteWithPhotoWithHttpInfoAsync(string userId, System.IO.Stream image, RequestInviteRequest data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset Invite Message
        /// </summary>
        /// <remarks>
        /// Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InviteMessage&gt;</returns>
        System.Threading.Tasks.Task<List<InviteMessage>> ResetInviteMessageAsync(string userId, InviteMessageType messageType, int slot, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset Invite Message
        /// </summary>
        /// <remarks>
        /// Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InviteMessage>>> ResetInviteMessageWithHttpInfoAsync(string userId, InviteMessageType messageType, int slot, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Respond Invite
        /// </summary>
        /// <remarks>
        /// Respond to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="inviteResponse">Slot number of the Response Message to use when responding to a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> RespondInviteAsync(string notificationId, InviteResponse inviteResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Respond Invite
        /// </summary>
        /// <remarks>
        /// Respond to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="inviteResponse">Slot number of the Response Message to use when responding to a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> RespondInviteWithHttpInfoAsync(string notificationId, InviteResponse inviteResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Respond Invite with photo
        /// </summary>
        /// <remarks>
        /// Respond with photo to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.&#39;
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> RespondInviteWithPhotoAsync(string notificationId, System.IO.Stream image, InviteResponse data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Respond Invite with photo
        /// </summary>
        /// <remarks>
        /// Respond with photo to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.&#39;
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> RespondInviteWithPhotoWithHttpInfoAsync(string notificationId, System.IO.Stream image, InviteResponse data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Invite Message
        /// </summary>
        /// <remarks>
        /// Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InviteMessage&gt;</returns>
        System.Threading.Tasks.Task<List<InviteMessage>> UpdateInviteMessageAsync(string userId, InviteMessageType messageType, int slot, UpdateInviteMessageRequest updateInviteMessageRequest = default(UpdateInviteMessageRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Invite Message
        /// </summary>
        /// <remarks>
        /// Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InviteMessage>>> UpdateInviteMessageWithHttpInfoAsync(string userId, InviteMessageType messageType, int slot, UpdateInviteMessageRequest updateInviteMessageRequest = default(UpdateInviteMessageRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInviteApi : IInviteApiSync, IInviteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InviteApi : IInviteApi
    {
        private VRChat.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InviteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InviteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InviteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InviteApi(string basePath)
        {
            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                new VRChat.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InviteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InviteApi(VRChat.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InviteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InviteApi(VRChat.API.Client.ISynchronousClient client, VRChat.API.Client.IAsynchronousClient asyncClient, VRChat.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRChat.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRChat.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRChat.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRChat.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Invite Message Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteMessage</returns>
        public InviteMessage GetInviteMessage(string userId, InviteMessageType messageType, int slot, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<InviteMessage> localVarResponse = GetInviteMessageWithHttpInfo(userId, messageType, slot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invite Message Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteMessage</returns>
        public VRChat.API.Client.ApiResponse<InviteMessage> GetInviteMessageWithHttpInfo(string userId, InviteMessageType messageType, int slot, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->GetInviteMessage");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageType", VRChat.API.Client.ClientUtils.ParameterToString(messageType)); // path parameter
            localVarRequestOptions.PathParameters.Add("slot", VRChat.API.Client.ClientUtils.ParameterToString(slot)); // path parameter

            localVarRequestOptions.Operation = "InviteApi.GetInviteMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InviteMessage>("/message/{userId}/{messageType}/{slot}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInviteMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invite Message Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteMessage</returns>
        public async System.Threading.Tasks.Task<InviteMessage> GetInviteMessageAsync(string userId, InviteMessageType messageType, int slot, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<InviteMessage> localVarResponse = await GetInviteMessageWithHttpInfoAsync(userId, messageType, slot, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invite Message Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteMessage)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<InviteMessage>> GetInviteMessageWithHttpInfoAsync(string userId, InviteMessageType messageType, int slot, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->GetInviteMessage");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageType", VRChat.API.Client.ClientUtils.ParameterToString(messageType)); // path parameter
            localVarRequestOptions.PathParameters.Add("slot", VRChat.API.Client.ClientUtils.ParameterToString(slot)); // path parameter

            localVarRequestOptions.Operation = "InviteApi.GetInviteMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InviteMessage>("/message/{userId}/{messageType}/{slot}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInviteMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Invite Messages Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InviteMessage&gt;</returns>
        public List<InviteMessage> GetInviteMessages(string userId, InviteMessageType messageType, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<InviteMessage>> localVarResponse = GetInviteMessagesWithHttpInfo(userId, messageType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Invite Messages Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<InviteMessage>> GetInviteMessagesWithHttpInfo(string userId, InviteMessageType messageType, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->GetInviteMessages");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageType", VRChat.API.Client.ClientUtils.ParameterToString(messageType)); // path parameter

            localVarRequestOptions.Operation = "InviteApi.GetInviteMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InviteMessage>>("/message/{userId}/{messageType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInviteMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Invite Messages Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InviteMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<InviteMessage>> GetInviteMessagesAsync(string userId, InviteMessageType messageType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<InviteMessage>> localVarResponse = await GetInviteMessagesWithHttpInfoAsync(userId, messageType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Invite Messages Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<InviteMessage>>> GetInviteMessagesWithHttpInfoAsync(string userId, InviteMessageType messageType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->GetInviteMessages");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageType", VRChat.API.Client.ClientUtils.ParameterToString(messageType)); // path parameter

            localVarRequestOptions.Operation = "InviteApi.GetInviteMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InviteMessage>>("/message/{userId}/{messageType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInviteMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite Myself To Instance Sends self an invite to an instance
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId">Must be a valid world ID.</param>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentNotification</returns>
        public SentNotification InviteMyselfTo(string worldId, string instanceId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<SentNotification> localVarResponse = InviteMyselfToWithHttpInfo(worldId, instanceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite Myself To Instance Sends self an invite to an instance
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId">Must be a valid world ID.</param>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentNotification</returns>
        public VRChat.API.Client.ApiResponse<SentNotification> InviteMyselfToWithHttpInfo(string worldId, string instanceId, int operationIndex = 0)
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'worldId' when calling InviteApi->InviteMyselfTo");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InviteApi->InviteMyselfTo");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worldId", VRChat.API.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", VRChat.API.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "InviteApi.InviteMyselfTo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SentNotification>("/invite/myself/to/{worldId}:{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteMyselfTo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite Myself To Instance Sends self an invite to an instance
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId">Must be a valid world ID.</param>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentNotification</returns>
        public async System.Threading.Tasks.Task<SentNotification> InviteMyselfToAsync(string worldId, string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<SentNotification> localVarResponse = await InviteMyselfToWithHttpInfoAsync(worldId, instanceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite Myself To Instance Sends self an invite to an instance
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId">Must be a valid world ID.</param>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentNotification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<SentNotification>> InviteMyselfToWithHttpInfoAsync(string worldId, string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'worldId' is set
            if (worldId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'worldId' when calling InviteApi->InviteMyselfTo");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InviteApi->InviteMyselfTo");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worldId", VRChat.API.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", VRChat.API.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "InviteApi.InviteMyselfTo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SentNotification>("/invite/myself/to/{worldId}:{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteMyselfTo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite User Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentNotification</returns>
        public SentNotification InviteUser(string userId, InviteRequest inviteRequest, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<SentNotification> localVarResponse = InviteUserWithHttpInfo(userId, inviteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite User Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentNotification</returns>
        public VRChat.API.Client.ApiResponse<SentNotification> InviteUserWithHttpInfo(string userId, InviteRequest inviteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->InviteUser");
            }

            // verify the required parameter 'inviteRequest' is set
            if (inviteRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inviteRequest' when calling InviteApi->InviteUser");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inviteRequest;

            localVarRequestOptions.Operation = "InviteApi.InviteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SentNotification>("/invite/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite User Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentNotification</returns>
        public async System.Threading.Tasks.Task<SentNotification> InviteUserAsync(string userId, InviteRequest inviteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<SentNotification> localVarResponse = await InviteUserWithHttpInfoAsync(userId, inviteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite User Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentNotification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<SentNotification>> InviteUserWithHttpInfoAsync(string userId, InviteRequest inviteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->InviteUser");
            }

            // verify the required parameter 'inviteRequest' is set
            if (inviteRequest == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inviteRequest' when calling InviteApi->InviteUser");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inviteRequest;

            localVarRequestOptions.Operation = "InviteApi.InviteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SentNotification>("/invite/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite User with photo Sends an photo invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentNotification</returns>
        public SentNotification InviteUserWithPhoto(string userId, System.IO.Stream image, InviteRequest data, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<SentNotification> localVarResponse = InviteUserWithPhotoWithHttpInfo(userId, image, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite User with photo Sends an photo invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentNotification</returns>
        public VRChat.API.Client.ApiResponse<SentNotification> InviteUserWithPhotoWithHttpInfo(string userId, System.IO.Stream image, InviteRequest data, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->InviteUserWithPhoto");
            }

            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling InviteApi->InviteUserWithPhoto");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'data' when calling InviteApi->InviteUserWithPhoto");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.FileParameters.Add("image", image);
            localVarRequestOptions.FormParameters.Add("data", VRChat.API.Client.ClientUtils.Serialize(data)); // form parameter

            localVarRequestOptions.Operation = "InviteApi.InviteUserWithPhoto";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SentNotification>("/invite/{userId}/photo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUserWithPhoto", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite User with photo Sends an photo invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentNotification</returns>
        public async System.Threading.Tasks.Task<SentNotification> InviteUserWithPhotoAsync(string userId, System.IO.Stream image, InviteRequest data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<SentNotification> localVarResponse = await InviteUserWithPhotoWithHttpInfoAsync(userId, image, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite User with photo Sends an photo invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentNotification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<SentNotification>> InviteUserWithPhotoWithHttpInfoAsync(string userId, System.IO.Stream image, InviteRequest data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->InviteUserWithPhoto");
            }

            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling InviteApi->InviteUserWithPhoto");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'data' when calling InviteApi->InviteUserWithPhoto");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.FileParameters.Add("image", image);
            localVarRequestOptions.FormParameters.Add("data", VRChat.API.Client.ClientUtils.ParameterToString(data)); // form parameter

            localVarRequestOptions.Operation = "InviteApi.InviteUserWithPhoto";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SentNotification>("/invite/{userId}/photo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUserWithPhoto", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Invite Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        public Notification RequestInvite(string userId, RequestInviteRequest requestInviteRequest = default(RequestInviteRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = RequestInviteWithHttpInfo(userId, requestInviteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request Invite Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        public VRChat.API.Client.ApiResponse<Notification> RequestInviteWithHttpInfo(string userId, RequestInviteRequest requestInviteRequest = default(RequestInviteRequest), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->RequestInvite");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = requestInviteRequest;

            localVarRequestOptions.Operation = "InviteApi.RequestInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/requestInvite/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Invite Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> RequestInviteAsync(string userId, RequestInviteRequest requestInviteRequest = default(RequestInviteRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = await RequestInviteWithHttpInfoAsync(userId, requestInviteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request Invite Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Notification>> RequestInviteWithHttpInfoAsync(string userId, RequestInviteRequest requestInviteRequest = default(RequestInviteRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->RequestInvite");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = requestInviteRequest;

            localVarRequestOptions.Operation = "InviteApi.RequestInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/requestInvite/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Invite with photo Requests with photo an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        public Notification RequestInviteWithPhoto(string userId, System.IO.Stream image, RequestInviteRequest data, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = RequestInviteWithPhotoWithHttpInfo(userId, image, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request Invite with photo Requests with photo an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        public VRChat.API.Client.ApiResponse<Notification> RequestInviteWithPhotoWithHttpInfo(string userId, System.IO.Stream image, RequestInviteRequest data, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->RequestInviteWithPhoto");
            }

            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling InviteApi->RequestInviteWithPhoto");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'data' when calling InviteApi->RequestInviteWithPhoto");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.FileParameters.Add("image", image);
            localVarRequestOptions.FormParameters.Add("data", VRChat.API.Client.ClientUtils.Serialize(data)); // form parameter

            localVarRequestOptions.Operation = "InviteApi.RequestInviteWithPhoto";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/requestInvite/{userId}/photo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestInviteWithPhoto", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Invite with photo Requests with photo an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> RequestInviteWithPhotoAsync(string userId, System.IO.Stream image, RequestInviteRequest data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = await RequestInviteWithPhotoWithHttpInfoAsync(userId, image, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request Invite with photo Requests with photo an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Notification>> RequestInviteWithPhotoWithHttpInfoAsync(string userId, System.IO.Stream image, RequestInviteRequest data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->RequestInviteWithPhoto");
            }

            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling InviteApi->RequestInviteWithPhoto");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'data' when calling InviteApi->RequestInviteWithPhoto");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.FileParameters.Add("image", image);
            localVarRequestOptions.FormParameters.Add("data", VRChat.API.Client.ClientUtils.ParameterToString(data)); // form parameter

            localVarRequestOptions.Operation = "InviteApi.RequestInviteWithPhoto";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/requestInvite/{userId}/photo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestInviteWithPhoto", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Invite Message Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InviteMessage&gt;</returns>
        public List<InviteMessage> ResetInviteMessage(string userId, InviteMessageType messageType, int slot, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<InviteMessage>> localVarResponse = ResetInviteMessageWithHttpInfo(userId, messageType, slot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Invite Message Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<InviteMessage>> ResetInviteMessageWithHttpInfo(string userId, InviteMessageType messageType, int slot, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->ResetInviteMessage");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageType", VRChat.API.Client.ClientUtils.ParameterToString(messageType)); // path parameter
            localVarRequestOptions.PathParameters.Add("slot", VRChat.API.Client.ClientUtils.ParameterToString(slot)); // path parameter

            localVarRequestOptions.Operation = "InviteApi.ResetInviteMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<InviteMessage>>("/message/{userId}/{messageType}/{slot}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetInviteMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Invite Message Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InviteMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<InviteMessage>> ResetInviteMessageAsync(string userId, InviteMessageType messageType, int slot, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<InviteMessage>> localVarResponse = await ResetInviteMessageWithHttpInfoAsync(userId, messageType, slot, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Invite Message Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<InviteMessage>>> ResetInviteMessageWithHttpInfoAsync(string userId, InviteMessageType messageType, int slot, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->ResetInviteMessage");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageType", VRChat.API.Client.ClientUtils.ParameterToString(messageType)); // path parameter
            localVarRequestOptions.PathParameters.Add("slot", VRChat.API.Client.ClientUtils.ParameterToString(slot)); // path parameter

            localVarRequestOptions.Operation = "InviteApi.ResetInviteMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<InviteMessage>>("/message/{userId}/{messageType}/{slot}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetInviteMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Respond Invite Respond to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="inviteResponse">Slot number of the Response Message to use when responding to a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        public Notification RespondInvite(string notificationId, InviteResponse inviteResponse, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = RespondInviteWithHttpInfo(notificationId, inviteResponse);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Respond Invite Respond to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="inviteResponse">Slot number of the Response Message to use when responding to a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        public VRChat.API.Client.ApiResponse<Notification> RespondInviteWithHttpInfo(string notificationId, InviteResponse inviteResponse, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling InviteApi->RespondInvite");
            }

            // verify the required parameter 'inviteResponse' is set
            if (inviteResponse == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inviteResponse' when calling InviteApi->RespondInvite");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.Data = inviteResponse;

            localVarRequestOptions.Operation = "InviteApi.RespondInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/invite/{notificationId}/response", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RespondInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Respond Invite Respond to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="inviteResponse">Slot number of the Response Message to use when responding to a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> RespondInviteAsync(string notificationId, InviteResponse inviteResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = await RespondInviteWithHttpInfoAsync(notificationId, inviteResponse, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Respond Invite Respond to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="inviteResponse">Slot number of the Response Message to use when responding to a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Notification>> RespondInviteWithHttpInfoAsync(string notificationId, InviteResponse inviteResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling InviteApi->RespondInvite");
            }

            // verify the required parameter 'inviteResponse' is set
            if (inviteResponse == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inviteResponse' when calling InviteApi->RespondInvite");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.Data = inviteResponse;

            localVarRequestOptions.Operation = "InviteApi.RespondInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/invite/{notificationId}/response", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RespondInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Respond Invite with photo Respond with photo to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.&#39;
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Notification</returns>
        public Notification RespondInviteWithPhoto(string notificationId, System.IO.Stream image, InviteResponse data, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = RespondInviteWithPhotoWithHttpInfo(notificationId, image, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Respond Invite with photo Respond with photo to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.&#39;
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Notification</returns>
        public VRChat.API.Client.ApiResponse<Notification> RespondInviteWithPhotoWithHttpInfo(string notificationId, System.IO.Stream image, InviteResponse data, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling InviteApi->RespondInviteWithPhoto");
            }

            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling InviteApi->RespondInviteWithPhoto");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'data' when calling InviteApi->RespondInviteWithPhoto");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.FileParameters.Add("image", image);
            localVarRequestOptions.FormParameters.Add("data", VRChat.API.Client.ClientUtils.Serialize(data)); // form parameter

            localVarRequestOptions.Operation = "InviteApi.RespondInviteWithPhoto";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Notification>("/invite/{notificationId}/response/photo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RespondInviteWithPhoto", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Respond Invite with photo Respond with photo to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.&#39;
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> RespondInviteWithPhotoAsync(string notificationId, System.IO.Stream image, InviteResponse data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Notification> localVarResponse = await RespondInviteWithPhotoWithHttpInfoAsync(notificationId, image, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Respond Invite with photo Respond with photo to an invite or invite request without accepting it. &#x60;:notificationId&#x60; is the ID of the requesting notification.  In case the notification being replied to is an invite, the &#x60;responseSlot&#x60; refers to a response message from the the &#x60;message&#x60; collection. In case the notification is an invite request, it will refer to one from the &#x60;requestResponse&#x60; collection instead.&#39;
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Must be a valid notification ID.</param>
        /// <param name="image">The binary blob of the png file.</param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Notification>> RespondInviteWithPhotoWithHttpInfoAsync(string notificationId, System.IO.Stream image, InviteResponse data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'notificationId' when calling InviteApi->RespondInviteWithPhoto");
            }

            // verify the required parameter 'image' is set
            if (image == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'image' when calling InviteApi->RespondInviteWithPhoto");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'data' when calling InviteApi->RespondInviteWithPhoto");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notificationId", VRChat.API.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.FileParameters.Add("image", image);
            localVarRequestOptions.FormParameters.Add("data", VRChat.API.Client.ClientUtils.ParameterToString(data)); // form parameter

            localVarRequestOptions.Operation = "InviteApi.RespondInviteWithPhoto";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Notification>("/invite/{notificationId}/response/photo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RespondInviteWithPhoto", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Invite Message Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InviteMessage&gt;</returns>
        public List<InviteMessage> UpdateInviteMessage(string userId, InviteMessageType messageType, int slot, UpdateInviteMessageRequest updateInviteMessageRequest = default(UpdateInviteMessageRequest), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<InviteMessage>> localVarResponse = UpdateInviteMessageWithHttpInfo(userId, messageType, slot, updateInviteMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Invite Message Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<InviteMessage>> UpdateInviteMessageWithHttpInfo(string userId, InviteMessageType messageType, int slot, UpdateInviteMessageRequest updateInviteMessageRequest = default(UpdateInviteMessageRequest), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->UpdateInviteMessage");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageType", VRChat.API.Client.ClientUtils.ParameterToString(messageType)); // path parameter
            localVarRequestOptions.PathParameters.Add("slot", VRChat.API.Client.ClientUtils.ParameterToString(slot)); // path parameter
            localVarRequestOptions.Data = updateInviteMessageRequest;

            localVarRequestOptions.Operation = "InviteApi.UpdateInviteMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<InviteMessage>>("/message/{userId}/{messageType}/{slot}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInviteMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Invite Message Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InviteMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<InviteMessage>> UpdateInviteMessageAsync(string userId, InviteMessageType messageType, int slot, UpdateInviteMessageRequest updateInviteMessageRequest = default(UpdateInviteMessageRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<InviteMessage>> localVarResponse = await UpdateInviteMessageWithHttpInfoAsync(userId, messageType, slot, updateInviteMessageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Invite Message Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="messageType">The type of message to fetch, must be a valid InviteMessageType.</param>
        /// <param name="slot">The message slot to fetch of a given message type.</param>
        /// <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<InviteMessage>>> UpdateInviteMessageWithHttpInfoAsync(string userId, InviteMessageType messageType, int slot, UpdateInviteMessageRequest updateInviteMessageRequest = default(UpdateInviteMessageRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InviteApi->UpdateInviteMessage");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageType", VRChat.API.Client.ClientUtils.ParameterToString(messageType)); // path parameter
            localVarRequestOptions.PathParameters.Add("slot", VRChat.API.Client.ClientUtils.ParameterToString(slot)); // path parameter
            localVarRequestOptions.Data = updateInviteMessageRequest;

            localVarRequestOptions.Operation = "InviteApi.UpdateInviteMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<InviteMessage>>("/message/{userId}/{messageType}/{slot}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInviteMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
