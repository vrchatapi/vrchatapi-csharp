/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// Reasons available for reporting users
    /// </summary>
    [DataContract(Name = "APIConfig_reportReasons")]
    public partial class APIConfigReportReasons : IEquatable<APIConfigReportReasons>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfigReportReasons" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected APIConfigReportReasons() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfigReportReasons" /> class.
        /// </summary>
        /// <param name="billing">billing (required).</param>
        /// <param name="botting">botting (required).</param>
        /// <param name="cancellation">cancellation (required).</param>
        /// <param name="copyright">copyright.</param>
        /// <param name="fraud">fraud.</param>
        /// <param name="gore">gore (required).</param>
        /// <param name="hacking">hacking (required).</param>
        /// <param name="harassing">harassing (required).</param>
        /// <param name="hateful">hateful (required).</param>
        /// <param name="impersonation">impersonation (required).</param>
        /// <param name="inappropriate">inappropriate (required).</param>
        /// <param name="leaking">leaking (required).</param>
        /// <param name="malicious">malicious (required).</param>
        /// <param name="missing">missing (required).</param>
        /// <param name="nudity">nudity (required).</param>
        /// <param name="renewal">renewal (required).</param>
        /// <param name="security">security (required).</param>
        /// <param name="service">service (required).</param>
        /// <param name="sexual">sexual (required).</param>
        /// <param name="technical">technical.</param>
        /// <param name="threatening">threatening (required).</param>
        /// <param name="visuals">visuals (required).</param>
        public APIConfigReportReasons(ReportReason billing = default(ReportReason), ReportReason botting = default(ReportReason), ReportReason cancellation = default(ReportReason), ReportReason copyright = default(ReportReason), ReportReason fraud = default(ReportReason), ReportReason gore = default(ReportReason), ReportReason hacking = default(ReportReason), ReportReason harassing = default(ReportReason), ReportReason hateful = default(ReportReason), ReportReason impersonation = default(ReportReason), ReportReason inappropriate = default(ReportReason), ReportReason leaking = default(ReportReason), ReportReason malicious = default(ReportReason), ReportReason missing = default(ReportReason), ReportReason nudity = default(ReportReason), ReportReason renewal = default(ReportReason), ReportReason security = default(ReportReason), ReportReason service = default(ReportReason), ReportReason sexual = default(ReportReason), ReportReason technical = default(ReportReason), ReportReason threatening = default(ReportReason), ReportReason visuals = default(ReportReason))
        {
            // to ensure "billing" is required (not null)
            if (billing == null)
            {
                throw new ArgumentNullException("billing is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Billing = billing;
            // to ensure "botting" is required (not null)
            if (botting == null)
            {
                throw new ArgumentNullException("botting is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Botting = botting;
            // to ensure "cancellation" is required (not null)
            if (cancellation == null)
            {
                throw new ArgumentNullException("cancellation is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Cancellation = cancellation;
            // to ensure "gore" is required (not null)
            if (gore == null)
            {
                throw new ArgumentNullException("gore is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Gore = gore;
            // to ensure "hacking" is required (not null)
            if (hacking == null)
            {
                throw new ArgumentNullException("hacking is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Hacking = hacking;
            // to ensure "harassing" is required (not null)
            if (harassing == null)
            {
                throw new ArgumentNullException("harassing is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Harassing = harassing;
            // to ensure "hateful" is required (not null)
            if (hateful == null)
            {
                throw new ArgumentNullException("hateful is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Hateful = hateful;
            // to ensure "impersonation" is required (not null)
            if (impersonation == null)
            {
                throw new ArgumentNullException("impersonation is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Impersonation = impersonation;
            // to ensure "inappropriate" is required (not null)
            if (inappropriate == null)
            {
                throw new ArgumentNullException("inappropriate is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Inappropriate = inappropriate;
            // to ensure "leaking" is required (not null)
            if (leaking == null)
            {
                throw new ArgumentNullException("leaking is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Leaking = leaking;
            // to ensure "malicious" is required (not null)
            if (malicious == null)
            {
                throw new ArgumentNullException("malicious is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Malicious = malicious;
            // to ensure "missing" is required (not null)
            if (missing == null)
            {
                throw new ArgumentNullException("missing is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Missing = missing;
            // to ensure "nudity" is required (not null)
            if (nudity == null)
            {
                throw new ArgumentNullException("nudity is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Nudity = nudity;
            // to ensure "renewal" is required (not null)
            if (renewal == null)
            {
                throw new ArgumentNullException("renewal is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Renewal = renewal;
            // to ensure "security" is required (not null)
            if (security == null)
            {
                throw new ArgumentNullException("security is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Security = security;
            // to ensure "service" is required (not null)
            if (service == null)
            {
                throw new ArgumentNullException("service is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Service = service;
            // to ensure "sexual" is required (not null)
            if (sexual == null)
            {
                throw new ArgumentNullException("sexual is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Sexual = sexual;
            // to ensure "threatening" is required (not null)
            if (threatening == null)
            {
                throw new ArgumentNullException("threatening is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Threatening = threatening;
            // to ensure "visuals" is required (not null)
            if (visuals == null)
            {
                throw new ArgumentNullException("visuals is a required property for APIConfigReportReasons and cannot be null");
            }
            this.Visuals = visuals;
            this.Copyright = copyright;
            this.Fraud = fraud;
            this.Technical = technical;
        }

        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [DataMember(Name = "billing", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Billing { get; set; }

        /// <summary>
        /// Gets or Sets Botting
        /// </summary>
        [DataMember(Name = "botting", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Botting { get; set; }

        /// <summary>
        /// Gets or Sets Cancellation
        /// </summary>
        [DataMember(Name = "cancellation", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Cancellation { get; set; }

        /// <summary>
        /// Gets or Sets Copyright
        /// </summary>
        [DataMember(Name = "copyright", EmitDefaultValue = false)]
        public ReportReason Copyright { get; set; }

        /// <summary>
        /// Gets or Sets Fraud
        /// </summary>
        [DataMember(Name = "fraud", EmitDefaultValue = false)]
        public ReportReason Fraud { get; set; }

        /// <summary>
        /// Gets or Sets Gore
        /// </summary>
        [DataMember(Name = "gore", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Gore { get; set; }

        /// <summary>
        /// Gets or Sets Hacking
        /// </summary>
        [DataMember(Name = "hacking", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Hacking { get; set; }

        /// <summary>
        /// Gets or Sets Harassing
        /// </summary>
        [DataMember(Name = "harassing", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Harassing { get; set; }

        /// <summary>
        /// Gets or Sets Hateful
        /// </summary>
        [DataMember(Name = "hateful", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Hateful { get; set; }

        /// <summary>
        /// Gets or Sets Impersonation
        /// </summary>
        [DataMember(Name = "impersonation", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Impersonation { get; set; }

        /// <summary>
        /// Gets or Sets Inappropriate
        /// </summary>
        [DataMember(Name = "inappropriate", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Inappropriate { get; set; }

        /// <summary>
        /// Gets or Sets Leaking
        /// </summary>
        [DataMember(Name = "leaking", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Leaking { get; set; }

        /// <summary>
        /// Gets or Sets Malicious
        /// </summary>
        [DataMember(Name = "malicious", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Malicious { get; set; }

        /// <summary>
        /// Gets or Sets Missing
        /// </summary>
        [DataMember(Name = "missing", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Missing { get; set; }

        /// <summary>
        /// Gets or Sets Nudity
        /// </summary>
        [DataMember(Name = "nudity", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Nudity { get; set; }

        /// <summary>
        /// Gets or Sets Renewal
        /// </summary>
        [DataMember(Name = "renewal", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Renewal { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name = "security", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Security { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Service { get; set; }

        /// <summary>
        /// Gets or Sets Sexual
        /// </summary>
        [DataMember(Name = "sexual", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Sexual { get; set; }

        /// <summary>
        /// Gets or Sets Technical
        /// </summary>
        [DataMember(Name = "technical", EmitDefaultValue = false)]
        public ReportReason Technical { get; set; }

        /// <summary>
        /// Gets or Sets Threatening
        /// </summary>
        [DataMember(Name = "threatening", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Threatening { get; set; }

        /// <summary>
        /// Gets or Sets Visuals
        /// </summary>
        [DataMember(Name = "visuals", IsRequired = true, EmitDefaultValue = true)]
        public ReportReason Visuals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIConfigReportReasons {\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Botting: ").Append(Botting).Append("\n");
            sb.Append("  Cancellation: ").Append(Cancellation).Append("\n");
            sb.Append("  Copyright: ").Append(Copyright).Append("\n");
            sb.Append("  Fraud: ").Append(Fraud).Append("\n");
            sb.Append("  Gore: ").Append(Gore).Append("\n");
            sb.Append("  Hacking: ").Append(Hacking).Append("\n");
            sb.Append("  Harassing: ").Append(Harassing).Append("\n");
            sb.Append("  Hateful: ").Append(Hateful).Append("\n");
            sb.Append("  Impersonation: ").Append(Impersonation).Append("\n");
            sb.Append("  Inappropriate: ").Append(Inappropriate).Append("\n");
            sb.Append("  Leaking: ").Append(Leaking).Append("\n");
            sb.Append("  Malicious: ").Append(Malicious).Append("\n");
            sb.Append("  Missing: ").Append(Missing).Append("\n");
            sb.Append("  Nudity: ").Append(Nudity).Append("\n");
            sb.Append("  Renewal: ").Append(Renewal).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Sexual: ").Append(Sexual).Append("\n");
            sb.Append("  Technical: ").Append(Technical).Append("\n");
            sb.Append("  Threatening: ").Append(Threatening).Append("\n");
            sb.Append("  Visuals: ").Append(Visuals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APIConfigReportReasons);
        }

        /// <summary>
        /// Returns true if APIConfigReportReasons instances are equal
        /// </summary>
        /// <param name="input">Instance of APIConfigReportReasons to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APIConfigReportReasons input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Billing == input.Billing ||
                    (this.Billing != null &&
                    this.Billing.Equals(input.Billing))
                ) && 
                (
                    this.Botting == input.Botting ||
                    (this.Botting != null &&
                    this.Botting.Equals(input.Botting))
                ) && 
                (
                    this.Cancellation == input.Cancellation ||
                    (this.Cancellation != null &&
                    this.Cancellation.Equals(input.Cancellation))
                ) && 
                (
                    this.Copyright == input.Copyright ||
                    (this.Copyright != null &&
                    this.Copyright.Equals(input.Copyright))
                ) && 
                (
                    this.Fraud == input.Fraud ||
                    (this.Fraud != null &&
                    this.Fraud.Equals(input.Fraud))
                ) && 
                (
                    this.Gore == input.Gore ||
                    (this.Gore != null &&
                    this.Gore.Equals(input.Gore))
                ) && 
                (
                    this.Hacking == input.Hacking ||
                    (this.Hacking != null &&
                    this.Hacking.Equals(input.Hacking))
                ) && 
                (
                    this.Harassing == input.Harassing ||
                    (this.Harassing != null &&
                    this.Harassing.Equals(input.Harassing))
                ) && 
                (
                    this.Hateful == input.Hateful ||
                    (this.Hateful != null &&
                    this.Hateful.Equals(input.Hateful))
                ) && 
                (
                    this.Impersonation == input.Impersonation ||
                    (this.Impersonation != null &&
                    this.Impersonation.Equals(input.Impersonation))
                ) && 
                (
                    this.Inappropriate == input.Inappropriate ||
                    (this.Inappropriate != null &&
                    this.Inappropriate.Equals(input.Inappropriate))
                ) && 
                (
                    this.Leaking == input.Leaking ||
                    (this.Leaking != null &&
                    this.Leaking.Equals(input.Leaking))
                ) && 
                (
                    this.Malicious == input.Malicious ||
                    (this.Malicious != null &&
                    this.Malicious.Equals(input.Malicious))
                ) && 
                (
                    this.Missing == input.Missing ||
                    (this.Missing != null &&
                    this.Missing.Equals(input.Missing))
                ) && 
                (
                    this.Nudity == input.Nudity ||
                    (this.Nudity != null &&
                    this.Nudity.Equals(input.Nudity))
                ) && 
                (
                    this.Renewal == input.Renewal ||
                    (this.Renewal != null &&
                    this.Renewal.Equals(input.Renewal))
                ) && 
                (
                    this.Security == input.Security ||
                    (this.Security != null &&
                    this.Security.Equals(input.Security))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Sexual == input.Sexual ||
                    (this.Sexual != null &&
                    this.Sexual.Equals(input.Sexual))
                ) && 
                (
                    this.Technical == input.Technical ||
                    (this.Technical != null &&
                    this.Technical.Equals(input.Technical))
                ) && 
                (
                    this.Threatening == input.Threatening ||
                    (this.Threatening != null &&
                    this.Threatening.Equals(input.Threatening))
                ) && 
                (
                    this.Visuals == input.Visuals ||
                    (this.Visuals != null &&
                    this.Visuals.Equals(input.Visuals))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Billing != null)
                {
                    hashCode = (hashCode * 59) + this.Billing.GetHashCode();
                }
                if (this.Botting != null)
                {
                    hashCode = (hashCode * 59) + this.Botting.GetHashCode();
                }
                if (this.Cancellation != null)
                {
                    hashCode = (hashCode * 59) + this.Cancellation.GetHashCode();
                }
                if (this.Copyright != null)
                {
                    hashCode = (hashCode * 59) + this.Copyright.GetHashCode();
                }
                if (this.Fraud != null)
                {
                    hashCode = (hashCode * 59) + this.Fraud.GetHashCode();
                }
                if (this.Gore != null)
                {
                    hashCode = (hashCode * 59) + this.Gore.GetHashCode();
                }
                if (this.Hacking != null)
                {
                    hashCode = (hashCode * 59) + this.Hacking.GetHashCode();
                }
                if (this.Harassing != null)
                {
                    hashCode = (hashCode * 59) + this.Harassing.GetHashCode();
                }
                if (this.Hateful != null)
                {
                    hashCode = (hashCode * 59) + this.Hateful.GetHashCode();
                }
                if (this.Impersonation != null)
                {
                    hashCode = (hashCode * 59) + this.Impersonation.GetHashCode();
                }
                if (this.Inappropriate != null)
                {
                    hashCode = (hashCode * 59) + this.Inappropriate.GetHashCode();
                }
                if (this.Leaking != null)
                {
                    hashCode = (hashCode * 59) + this.Leaking.GetHashCode();
                }
                if (this.Malicious != null)
                {
                    hashCode = (hashCode * 59) + this.Malicious.GetHashCode();
                }
                if (this.Missing != null)
                {
                    hashCode = (hashCode * 59) + this.Missing.GetHashCode();
                }
                if (this.Nudity != null)
                {
                    hashCode = (hashCode * 59) + this.Nudity.GetHashCode();
                }
                if (this.Renewal != null)
                {
                    hashCode = (hashCode * 59) + this.Renewal.GetHashCode();
                }
                if (this.Security != null)
                {
                    hashCode = (hashCode * 59) + this.Security.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                if (this.Sexual != null)
                {
                    hashCode = (hashCode * 59) + this.Sexual.GetHashCode();
                }
                if (this.Technical != null)
                {
                    hashCode = (hashCode * 59) + this.Technical.GetHashCode();
                }
                if (this.Threatening != null)
                {
                    hashCode = (hashCode * 59) + this.Threatening.GetHashCode();
                }
                if (this.Visuals != null)
                {
                    hashCode = (hashCode * 59) + this.Visuals.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
