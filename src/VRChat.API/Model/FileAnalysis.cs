/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// FileAnalysis
    /// </summary>
    [DataContract(Name = "FileAnalysis")]
    public partial class FileAnalysis : IEquatable<FileAnalysis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileAnalysis" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileAnalysis() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileAnalysis" /> class.
        /// </summary>
        /// <param name="avatarStats">avatarStats (required).</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="encryptionKey">encryptionKey.</param>
        /// <param name="fileSize">fileSize (required).</param>
        /// <param name="performanceRating">performanceRating.</param>
        /// <param name="success">success (required).</param>
        /// <param name="uncompressedSize">uncompressedSize (required).</param>
        public FileAnalysis(FileAnalysisAvatarStats avatarStats = default(FileAnalysisAvatarStats), DateTime createdAt = default(DateTime), string encryptionKey = default(string), int fileSize = default(int), string performanceRating = default(string), bool success = default(bool), int uncompressedSize = default(int))
        {
            // to ensure "avatarStats" is required (not null)
            if (avatarStats == null)
            {
                throw new ArgumentNullException("avatarStats is a required property for FileAnalysis and cannot be null");
            }
            this.AvatarStats = avatarStats;
            this.FileSize = fileSize;
            this.Success = success;
            this.UncompressedSize = uncompressedSize;
            this.CreatedAt = createdAt;
            this.EncryptionKey = encryptionKey;
            this.PerformanceRating = performanceRating;
        }

        /// <summary>
        /// Gets or Sets AvatarStats
        /// </summary>
        [DataMember(Name = "avatarStats", IsRequired = true, EmitDefaultValue = true)]
        public FileAnalysisAvatarStats AvatarStats { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets EncryptionKey
        /// </summary>
        [DataMember(Name = "encryptionKey", EmitDefaultValue = false)]
        public string EncryptionKey { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name = "fileSize", IsRequired = true, EmitDefaultValue = true)]
        public int FileSize { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceRating
        /// </summary>
        [DataMember(Name = "performanceRating", EmitDefaultValue = false)]
        public string PerformanceRating { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", IsRequired = true, EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets UncompressedSize
        /// </summary>
        [DataMember(Name = "uncompressedSize", IsRequired = true, EmitDefaultValue = true)]
        public int UncompressedSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileAnalysis {\n");
            sb.Append("  AvatarStats: ").Append(AvatarStats).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EncryptionKey: ").Append(EncryptionKey).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  PerformanceRating: ").Append(PerformanceRating).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  UncompressedSize: ").Append(UncompressedSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileAnalysis);
        }

        /// <summary>
        /// Returns true if FileAnalysis instances are equal
        /// </summary>
        /// <param name="input">Instance of FileAnalysis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileAnalysis input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AvatarStats == input.AvatarStats ||
                    (this.AvatarStats != null &&
                    this.AvatarStats.Equals(input.AvatarStats))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.EncryptionKey == input.EncryptionKey ||
                    (this.EncryptionKey != null &&
                    this.EncryptionKey.Equals(input.EncryptionKey))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    this.FileSize.Equals(input.FileSize)
                ) && 
                (
                    this.PerformanceRating == input.PerformanceRating ||
                    (this.PerformanceRating != null &&
                    this.PerformanceRating.Equals(input.PerformanceRating))
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && 
                (
                    this.UncompressedSize == input.UncompressedSize ||
                    this.UncompressedSize.Equals(input.UncompressedSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AvatarStats != null)
                {
                    hashCode = (hashCode * 59) + this.AvatarStats.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.EncryptionKey != null)
                {
                    hashCode = (hashCode * 59) + this.EncryptionKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                if (this.PerformanceRating != null)
                {
                    hashCode = (hashCode * 59) + this.PerformanceRating.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                hashCode = (hashCode * 59) + this.UncompressedSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
