/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// PropUnityPackage
    /// </summary>
    [DataContract(Name = "PropUnityPackage")]
    public partial class PropUnityPackage : IEquatable<PropUnityPackage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropUnityPackage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropUnityPackage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropUnityPackage" /> class.
        /// </summary>
        /// <param name="assetUrl">assetUrl (required).</param>
        /// <param name="assetVersion">assetVersion (required).</param>
        /// <param name="propSignature">propSignature (required).</param>
        /// <param name="platform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;. (required).</param>
        /// <param name="unityVersion">unityVersion (required) (default to &quot;2022.3.22f1&quot;).</param>
        /// <param name="variant">variant (required).</param>
        public PropUnityPackage(string assetUrl = default(string), int assetVersion = default(int), string propSignature = default(string), string platform = default(string), string unityVersion = "2022.3.22f1", string variant = default(string))
        {
            // to ensure "assetUrl" is required (not null)
            if (assetUrl == null)
            {
                throw new ArgumentNullException("assetUrl is a required property for PropUnityPackage and cannot be null");
            }
            this.AssetUrl = assetUrl;
            this.AssetVersion = assetVersion;
            // to ensure "propSignature" is required (not null)
            if (propSignature == null)
            {
                throw new ArgumentNullException("propSignature is a required property for PropUnityPackage and cannot be null");
            }
            this.PropSignature = propSignature;
            // to ensure "platform" is required (not null)
            if (platform == null)
            {
                throw new ArgumentNullException("platform is a required property for PropUnityPackage and cannot be null");
            }
            this.Platform = platform;
            // to ensure "unityVersion" is required (not null)
            if (unityVersion == null)
            {
                throw new ArgumentNullException("unityVersion is a required property for PropUnityPackage and cannot be null");
            }
            this.UnityVersion = unityVersion;
            // to ensure "variant" is required (not null)
            if (variant == null)
            {
                throw new ArgumentNullException("variant is a required property for PropUnityPackage and cannot be null");
            }
            this.Variant = variant;
        }

        /// <summary>
        /// Gets or Sets AssetUrl
        /// </summary>
        [DataMember(Name = "assetUrl", IsRequired = true, EmitDefaultValue = true)]
        public string AssetUrl { get; set; }

        /// <summary>
        /// Gets or Sets AssetVersion
        /// </summary>
        [DataMember(Name = "assetVersion", IsRequired = true, EmitDefaultValue = true)]
        public int AssetVersion { get; set; }

        /// <summary>
        /// Gets or Sets PropSignature
        /// </summary>
        [DataMember(Name = "propSignature", IsRequired = true, EmitDefaultValue = true)]
        public string PropSignature { get; set; }

        /// <summary>
        /// This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
        /// </summary>
        /// <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        [DataMember(Name = "platform", IsRequired = true, EmitDefaultValue = true)]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or Sets UnityVersion
        /// </summary>
        [DataMember(Name = "unityVersion", IsRequired = true, EmitDefaultValue = true)]
        public string UnityVersion { get; set; }

        /// <summary>
        /// Gets or Sets Variant
        /// </summary>
        [DataMember(Name = "variant", IsRequired = true, EmitDefaultValue = true)]
        public string Variant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropUnityPackage {\n");
            sb.Append("  AssetUrl: ").Append(AssetUrl).Append("\n");
            sb.Append("  AssetVersion: ").Append(AssetVersion).Append("\n");
            sb.Append("  PropSignature: ").Append(PropSignature).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  UnityVersion: ").Append(UnityVersion).Append("\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropUnityPackage);
        }

        /// <summary>
        /// Returns true if PropUnityPackage instances are equal
        /// </summary>
        /// <param name="input">Instance of PropUnityPackage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropUnityPackage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssetUrl == input.AssetUrl ||
                    (this.AssetUrl != null &&
                    this.AssetUrl.Equals(input.AssetUrl))
                ) && 
                (
                    this.AssetVersion == input.AssetVersion ||
                    this.AssetVersion.Equals(input.AssetVersion)
                ) && 
                (
                    this.PropSignature == input.PropSignature ||
                    (this.PropSignature != null &&
                    this.PropSignature.Equals(input.PropSignature))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.UnityVersion == input.UnityVersion ||
                    (this.UnityVersion != null &&
                    this.UnityVersion.Equals(input.UnityVersion))
                ) && 
                (
                    this.Variant == input.Variant ||
                    (this.Variant != null &&
                    this.Variant.Equals(input.Variant))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AssetUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetVersion.GetHashCode();
                if (this.PropSignature != null)
                {
                    hashCode = (hashCode * 59) + this.PropSignature.GetHashCode();
                }
                if (this.Platform != null)
                {
                    hashCode = (hashCode * 59) + this.Platform.GetHashCode();
                }
                if (this.UnityVersion != null)
                {
                    hashCode = (hashCode * 59) + this.UnityVersion.GetHashCode();
                }
                if (this.Variant != null)
                {
                    hashCode = (hashCode * 59) + this.Variant.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AssetVersion (int) minimum
            if (this.AssetVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetVersion, must be a value greater than or equal to 0.", new [] { "AssetVersion" });
            }

            // UnityVersion (string) minLength
            if (this.UnityVersion != null && this.UnityVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnityVersion, length must be greater than 1.", new [] { "UnityVersion" });
            }

            yield break;
        }
    }

}
