/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// UpdateCalendarEventRequest
    /// </summary>
    [DataContract(Name = "UpdateCalendarEventRequest")]
    public partial class UpdateCalendarEventRequest : IEquatable<UpdateCalendarEventRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCalendarEventRequest" /> class.
        /// </summary>
        /// <param name="title">Event title.</param>
        /// <param name="startsAt">Time the vent starts at.</param>
        /// <param name="description">description.</param>
        /// <param name="endsAt">Time the vent starts at.</param>
        /// <param name="category">category.</param>
        /// <param name="tags">tags.</param>
        /// <param name="isDraft">isDraft.</param>
        /// <param name="imageId">imageId.</param>
        /// <param name="roleIds">roleIds.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="platforms">platforms.</param>
        /// <param name="languages">languages.</param>
        /// <param name="sendCreationNotification">Send notification to group members. (default to false).</param>
        /// <param name="featured">featured.</param>
        /// <param name="hostEarlyJoinMinutes">hostEarlyJoinMinutes.</param>
        /// <param name="guestEarlyJoinMinutes">guestEarlyJoinMinutes.</param>
        /// <param name="closeInstanceAfterEndMinutes">closeInstanceAfterEndMinutes.</param>
        /// <param name="usesInstanceOverflow">usesInstanceOverflow.</param>
        public UpdateCalendarEventRequest(string title = default(string), DateTime startsAt = default(DateTime), string description = default(string), DateTime endsAt = default(DateTime), string category = default(string), List<string> tags = default(List<string>), bool isDraft = default(bool), string imageId = default(string), List<string> roleIds = default(List<string>), string parentId = default(string), List<string> platforms = default(List<string>), List<string> languages = default(List<string>), bool sendCreationNotification = false, bool featured = default(bool), int hostEarlyJoinMinutes = default(int), int guestEarlyJoinMinutes = default(int), int closeInstanceAfterEndMinutes = default(int), bool usesInstanceOverflow = default(bool))
        {
            this.Title = title;
            this.StartsAt = startsAt;
            this.Description = description;
            this.EndsAt = endsAt;
            this.Category = category;
            this.Tags = tags;
            this.IsDraft = isDraft;
            this.ImageId = imageId;
            this.RoleIds = roleIds;
            this.ParentId = parentId;
            this.Platforms = platforms;
            this.Languages = languages;
            this.SendCreationNotification = sendCreationNotification;
            this.Featured = featured;
            this.HostEarlyJoinMinutes = hostEarlyJoinMinutes;
            this.GuestEarlyJoinMinutes = guestEarlyJoinMinutes;
            this.CloseInstanceAfterEndMinutes = closeInstanceAfterEndMinutes;
            this.UsesInstanceOverflow = usesInstanceOverflow;
        }

        /// <summary>
        /// Event title
        /// </summary>
        /// <value>Event title</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Time the vent starts at
        /// </summary>
        /// <value>Time the vent starts at</value>
        [DataMember(Name = "startsAt", EmitDefaultValue = false)]
        public DateTime StartsAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Time the vent starts at
        /// </summary>
        /// <value>Time the vent starts at</value>
        [DataMember(Name = "endsAt", EmitDefaultValue = false)]
        public DateTime EndsAt { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets IsDraft
        /// </summary>
        [DataMember(Name = "isDraft", EmitDefaultValue = true)]
        public bool IsDraft { get; set; }

        /// <summary>
        /// Gets or Sets ImageId
        /// </summary>
        [DataMember(Name = "imageId", EmitDefaultValue = false)]
        public string ImageId { get; set; }

        /// <summary>
        /// Gets or Sets RoleIds
        /// </summary>
        [DataMember(Name = "roleIds", EmitDefaultValue = false)]
        public List<string> RoleIds { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets Platforms
        /// </summary>
        [DataMember(Name = "platforms", EmitDefaultValue = false)]
        public List<string> Platforms { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<string> Languages { get; set; }

        /// <summary>
        /// Send notification to group members.
        /// </summary>
        /// <value>Send notification to group members.</value>
        [DataMember(Name = "sendCreationNotification", EmitDefaultValue = true)]
        public bool SendCreationNotification { get; set; }

        /// <summary>
        /// Gets or Sets Featured
        /// </summary>
        [DataMember(Name = "featured", EmitDefaultValue = true)]
        public bool Featured { get; set; }

        /// <summary>
        /// Gets or Sets HostEarlyJoinMinutes
        /// </summary>
        [DataMember(Name = "hostEarlyJoinMinutes", EmitDefaultValue = false)]
        public int HostEarlyJoinMinutes { get; set; }

        /// <summary>
        /// Gets or Sets GuestEarlyJoinMinutes
        /// </summary>
        [DataMember(Name = "guestEarlyJoinMinutes", EmitDefaultValue = false)]
        public int GuestEarlyJoinMinutes { get; set; }

        /// <summary>
        /// Gets or Sets CloseInstanceAfterEndMinutes
        /// </summary>
        [DataMember(Name = "closeInstanceAfterEndMinutes", EmitDefaultValue = false)]
        public int CloseInstanceAfterEndMinutes { get; set; }

        /// <summary>
        /// Gets or Sets UsesInstanceOverflow
        /// </summary>
        [DataMember(Name = "usesInstanceOverflow", EmitDefaultValue = true)]
        public bool UsesInstanceOverflow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateCalendarEventRequest {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  StartsAt: ").Append(StartsAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndsAt: ").Append(EndsAt).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IsDraft: ").Append(IsDraft).Append("\n");
            sb.Append("  ImageId: ").Append(ImageId).Append("\n");
            sb.Append("  RoleIds: ").Append(RoleIds).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Platforms: ").Append(Platforms).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  SendCreationNotification: ").Append(SendCreationNotification).Append("\n");
            sb.Append("  Featured: ").Append(Featured).Append("\n");
            sb.Append("  HostEarlyJoinMinutes: ").Append(HostEarlyJoinMinutes).Append("\n");
            sb.Append("  GuestEarlyJoinMinutes: ").Append(GuestEarlyJoinMinutes).Append("\n");
            sb.Append("  CloseInstanceAfterEndMinutes: ").Append(CloseInstanceAfterEndMinutes).Append("\n");
            sb.Append("  UsesInstanceOverflow: ").Append(UsesInstanceOverflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCalendarEventRequest);
        }

        /// <summary>
        /// Returns true if UpdateCalendarEventRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCalendarEventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCalendarEventRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.StartsAt == input.StartsAt ||
                    (this.StartsAt != null &&
                    this.StartsAt.Equals(input.StartsAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EndsAt == input.EndsAt ||
                    (this.EndsAt != null &&
                    this.EndsAt.Equals(input.EndsAt))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.IsDraft == input.IsDraft ||
                    this.IsDraft.Equals(input.IsDraft)
                ) && 
                (
                    this.ImageId == input.ImageId ||
                    (this.ImageId != null &&
                    this.ImageId.Equals(input.ImageId))
                ) && 
                (
                    this.RoleIds == input.RoleIds ||
                    this.RoleIds != null &&
                    input.RoleIds != null &&
                    this.RoleIds.SequenceEqual(input.RoleIds)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.Platforms == input.Platforms ||
                    this.Platforms != null &&
                    input.Platforms != null &&
                    this.Platforms.SequenceEqual(input.Platforms)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.SendCreationNotification == input.SendCreationNotification ||
                    this.SendCreationNotification.Equals(input.SendCreationNotification)
                ) && 
                (
                    this.Featured == input.Featured ||
                    this.Featured.Equals(input.Featured)
                ) && 
                (
                    this.HostEarlyJoinMinutes == input.HostEarlyJoinMinutes ||
                    this.HostEarlyJoinMinutes.Equals(input.HostEarlyJoinMinutes)
                ) && 
                (
                    this.GuestEarlyJoinMinutes == input.GuestEarlyJoinMinutes ||
                    this.GuestEarlyJoinMinutes.Equals(input.GuestEarlyJoinMinutes)
                ) && 
                (
                    this.CloseInstanceAfterEndMinutes == input.CloseInstanceAfterEndMinutes ||
                    this.CloseInstanceAfterEndMinutes.Equals(input.CloseInstanceAfterEndMinutes)
                ) && 
                (
                    this.UsesInstanceOverflow == input.UsesInstanceOverflow ||
                    this.UsesInstanceOverflow.Equals(input.UsesInstanceOverflow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.StartsAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartsAt.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EndsAt != null)
                {
                    hashCode = (hashCode * 59) + this.EndsAt.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDraft.GetHashCode();
                if (this.ImageId != null)
                {
                    hashCode = (hashCode * 59) + this.ImageId.GetHashCode();
                }
                if (this.RoleIds != null)
                {
                    hashCode = (hashCode * 59) + this.RoleIds.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.Platforms != null)
                {
                    hashCode = (hashCode * 59) + this.Platforms.GetHashCode();
                }
                if (this.Languages != null)
                {
                    hashCode = (hashCode * 59) + this.Languages.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SendCreationNotification.GetHashCode();
                hashCode = (hashCode * 59) + this.Featured.GetHashCode();
                hashCode = (hashCode * 59) + this.HostEarlyJoinMinutes.GetHashCode();
                hashCode = (hashCode * 59) + this.GuestEarlyJoinMinutes.GetHashCode();
                hashCode = (hashCode * 59) + this.CloseInstanceAfterEndMinutes.GetHashCode();
                hashCode = (hashCode * 59) + this.UsesInstanceOverflow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            yield break;
        }
    }

}
