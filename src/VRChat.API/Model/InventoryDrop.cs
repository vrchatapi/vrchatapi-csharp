/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// InventoryDrop
    /// </summary>
    [DataContract(Name = "InventoryDrop")]
    public partial class InventoryDrop : IEquatable<InventoryDrop>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryDrop" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InventoryDrop() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryDrop" /> class.
        /// </summary>
        /// <param name="authorId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="dropExpiryDate">dropExpiryDate (required).</param>
        /// <param name="endDropDate">endDropDate (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="notificationDetails">notificationDetails (required).</param>
        /// <param name="startDropDate">startDropDate (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="targetGroup">targetGroup (required).</param>
        /// <param name="templateIds">templateIds (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public InventoryDrop(string authorId = default(string), DateTime createdAt = default(DateTime), DateTime? dropExpiryDate = default(DateTime?), DateTime endDropDate = default(DateTime), string id = default(string), string name = default(string), InventoryNotificationDetails notificationDetails = default(InventoryNotificationDetails), DateTime startDropDate = default(DateTime), string status = default(string), List<string> tags = default(List<string>), string targetGroup = default(string), List<string> templateIds = default(List<string>), DateTime updatedAt = default(DateTime))
        {
            // to ensure "authorId" is required (not null)
            if (authorId == null)
            {
                throw new ArgumentNullException("authorId is a required property for InventoryDrop and cannot be null");
            }
            this.AuthorId = authorId;
            this.CreatedAt = createdAt;
            // to ensure "dropExpiryDate" is required (not null)
            if (dropExpiryDate == null)
            {
                throw new ArgumentNullException("dropExpiryDate is a required property for InventoryDrop and cannot be null");
            }
            this.DropExpiryDate = dropExpiryDate;
            this.EndDropDate = endDropDate;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for InventoryDrop and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for InventoryDrop and cannot be null");
            }
            this.Name = name;
            // to ensure "notificationDetails" is required (not null)
            if (notificationDetails == null)
            {
                throw new ArgumentNullException("notificationDetails is a required property for InventoryDrop and cannot be null");
            }
            this.NotificationDetails = notificationDetails;
            this.StartDropDate = startDropDate;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for InventoryDrop and cannot be null");
            }
            this.Status = status;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for InventoryDrop and cannot be null");
            }
            this.Tags = tags;
            // to ensure "targetGroup" is required (not null)
            if (targetGroup == null)
            {
                throw new ArgumentNullException("targetGroup is a required property for InventoryDrop and cannot be null");
            }
            this.TargetGroup = targetGroup;
            // to ensure "templateIds" is required (not null)
            if (templateIds == null)
            {
                throw new ArgumentNullException("templateIds is a required property for InventoryDrop and cannot be null");
            }
            this.TemplateIds = templateIds;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "authorId", IsRequired = true, EmitDefaultValue = true)]
        public string AuthorId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DropExpiryDate
        /// </summary>
        [DataMember(Name = "dropExpiryDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? DropExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDropDate
        /// </summary>
        [DataMember(Name = "endDropDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndDropDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NotificationDetails
        /// </summary>
        [DataMember(Name = "notificationDetails", IsRequired = true, EmitDefaultValue = true)]
        public InventoryNotificationDetails NotificationDetails { get; set; }

        /// <summary>
        /// Gets or Sets StartDropDate
        /// </summary>
        [DataMember(Name = "startDropDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartDropDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets TargetGroup
        /// </summary>
        [DataMember(Name = "targetGroup", IsRequired = true, EmitDefaultValue = true)]
        public string TargetGroup { get; set; }

        /// <summary>
        /// Gets or Sets TemplateIds
        /// </summary>
        [DataMember(Name = "templateIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> TemplateIds { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryDrop {\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DropExpiryDate: ").Append(DropExpiryDate).Append("\n");
            sb.Append("  EndDropDate: ").Append(EndDropDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotificationDetails: ").Append(NotificationDetails).Append("\n");
            sb.Append("  StartDropDate: ").Append(StartDropDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetGroup: ").Append(TargetGroup).Append("\n");
            sb.Append("  TemplateIds: ").Append(TemplateIds).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryDrop);
        }

        /// <summary>
        /// Returns true if InventoryDrop instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryDrop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryDrop input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthorId == input.AuthorId ||
                    (this.AuthorId != null &&
                    this.AuthorId.Equals(input.AuthorId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DropExpiryDate == input.DropExpiryDate ||
                    (this.DropExpiryDate != null &&
                    this.DropExpiryDate.Equals(input.DropExpiryDate))
                ) && 
                (
                    this.EndDropDate == input.EndDropDate ||
                    (this.EndDropDate != null &&
                    this.EndDropDate.Equals(input.EndDropDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NotificationDetails == input.NotificationDetails ||
                    (this.NotificationDetails != null &&
                    this.NotificationDetails.Equals(input.NotificationDetails))
                ) && 
                (
                    this.StartDropDate == input.StartDropDate ||
                    (this.StartDropDate != null &&
                    this.StartDropDate.Equals(input.StartDropDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetGroup == input.TargetGroup ||
                    (this.TargetGroup != null &&
                    this.TargetGroup.Equals(input.TargetGroup))
                ) && 
                (
                    this.TemplateIds == input.TemplateIds ||
                    this.TemplateIds != null &&
                    input.TemplateIds != null &&
                    this.TemplateIds.SequenceEqual(input.TemplateIds)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthorId != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.DropExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.DropExpiryDate.GetHashCode();
                }
                if (this.EndDropDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDropDate.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NotificationDetails != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationDetails.GetHashCode();
                }
                if (this.StartDropDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDropDate.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetGroup != null)
                {
                    hashCode = (hashCode * 59) + this.TargetGroup.GetHashCode();
                }
                if (this.TemplateIds != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateIds.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
