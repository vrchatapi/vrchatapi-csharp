/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// GetGroupPosts200Response
    /// </summary>
    [DataContract(Name = "getGroupPosts_200_response")]
    public partial class GetGroupPosts200Response : IEquatable<GetGroupPosts200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGroupPosts200Response" /> class.
        /// </summary>
        /// <param name="posts">posts.</param>
        public GetGroupPosts200Response(List<GroupPost> posts = default(List<GroupPost>))
        {
            this.Posts = posts;
        }

        /// <summary>
        /// Gets or Sets Posts
        /// </summary>
        [DataMember(Name = "posts", EmitDefaultValue = false)]
        public List<GroupPost> Posts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGroupPosts200Response {\n");
            sb.Append("  Posts: ").Append(Posts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetGroupPosts200Response);
        }

        /// <summary>
        /// Returns true if GetGroupPosts200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of GetGroupPosts200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetGroupPosts200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Posts == input.Posts ||
                    this.Posts != null &&
                    input.Posts != null &&
                    this.Posts.SequenceEqual(input.Posts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Posts != null)
                {
                    hashCode = (hashCode * 59) + this.Posts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
