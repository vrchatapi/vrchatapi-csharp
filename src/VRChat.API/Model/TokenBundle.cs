/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// TokenBundle
    /// </summary>
    [DataContract(Name = "TokenBundle")]
    public partial class TokenBundle : IEquatable<TokenBundle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenBundle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenBundle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenBundle" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="appleProductId">appleProductId (required).</param>
        /// <param name="steamItemId">steamItemId (required).</param>
        /// <param name="oculusSku">oculusSku (required).</param>
        /// <param name="googleProductId">googleProductId.</param>
        /// <param name="amount">price of the bundle (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="tokens">number of tokens received (required).</param>
        /// <param name="imageUrl">direct url to image (required).</param>
        public TokenBundle(string id = default(string), string appleProductId = default(string), string steamItemId = default(string), string oculusSku = default(string), string googleProductId = default(string), int amount = default(int), string description = default(string), int tokens = default(int), string imageUrl = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for TokenBundle and cannot be null");
            }
            this.Id = id;
            // to ensure "appleProductId" is required (not null)
            if (appleProductId == null)
            {
                throw new ArgumentNullException("appleProductId is a required property for TokenBundle and cannot be null");
            }
            this.AppleProductId = appleProductId;
            // to ensure "steamItemId" is required (not null)
            if (steamItemId == null)
            {
                throw new ArgumentNullException("steamItemId is a required property for TokenBundle and cannot be null");
            }
            this.SteamItemId = steamItemId;
            // to ensure "oculusSku" is required (not null)
            if (oculusSku == null)
            {
                throw new ArgumentNullException("oculusSku is a required property for TokenBundle and cannot be null");
            }
            this.OculusSku = oculusSku;
            this.Amount = amount;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TokenBundle and cannot be null");
            }
            this.Description = description;
            this.Tokens = tokens;
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null)
            {
                throw new ArgumentNullException("imageUrl is a required property for TokenBundle and cannot be null");
            }
            this.ImageUrl = imageUrl;
            this.GoogleProductId = googleProductId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AppleProductId
        /// </summary>
        [DataMember(Name = "appleProductId", IsRequired = true, EmitDefaultValue = true)]
        public string AppleProductId { get; set; }

        /// <summary>
        /// Gets or Sets SteamItemId
        /// </summary>
        [DataMember(Name = "steamItemId", IsRequired = true, EmitDefaultValue = true)]
        public string SteamItemId { get; set; }

        /// <summary>
        /// Gets or Sets OculusSku
        /// </summary>
        [DataMember(Name = "oculusSku", IsRequired = true, EmitDefaultValue = true)]
        public string OculusSku { get; set; }

        /// <summary>
        /// Gets or Sets GoogleProductId
        /// </summary>
        [DataMember(Name = "googleProductId", EmitDefaultValue = false)]
        public string GoogleProductId { get; set; }

        /// <summary>
        /// price of the bundle
        /// </summary>
        /// <value>price of the bundle</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// number of tokens received
        /// </summary>
        /// <value>number of tokens received</value>
        [DataMember(Name = "tokens", IsRequired = true, EmitDefaultValue = true)]
        public int Tokens { get; set; }

        /// <summary>
        /// direct url to image
        /// </summary>
        /// <value>direct url to image</value>
        [DataMember(Name = "imageUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenBundle {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppleProductId: ").Append(AppleProductId).Append("\n");
            sb.Append("  SteamItemId: ").Append(SteamItemId).Append("\n");
            sb.Append("  OculusSku: ").Append(OculusSku).Append("\n");
            sb.Append("  GoogleProductId: ").Append(GoogleProductId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenBundle);
        }

        /// <summary>
        /// Returns true if TokenBundle instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenBundle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenBundle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AppleProductId == input.AppleProductId ||
                    (this.AppleProductId != null &&
                    this.AppleProductId.Equals(input.AppleProductId))
                ) && 
                (
                    this.SteamItemId == input.SteamItemId ||
                    (this.SteamItemId != null &&
                    this.SteamItemId.Equals(input.SteamItemId))
                ) && 
                (
                    this.OculusSku == input.OculusSku ||
                    (this.OculusSku != null &&
                    this.OculusSku.Equals(input.OculusSku))
                ) && 
                (
                    this.GoogleProductId == input.GoogleProductId ||
                    (this.GoogleProductId != null &&
                    this.GoogleProductId.Equals(input.GoogleProductId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens.Equals(input.Tokens)
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.AppleProductId != null)
                {
                    hashCode = (hashCode * 59) + this.AppleProductId.GetHashCode();
                }
                if (this.SteamItemId != null)
                {
                    hashCode = (hashCode * 59) + this.SteamItemId.GetHashCode();
                }
                if (this.OculusSku != null)
                {
                    hashCode = (hashCode * 59) + this.OculusSku.GetHashCode();
                }
                if (this.GoogleProductId != null)
                {
                    hashCode = (hashCode * 59) + this.GoogleProductId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Tokens.GetHashCode();
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
