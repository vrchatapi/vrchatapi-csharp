/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// APIConfig
    /// </summary>
    [DataContract(Name = "APIConfig")]
    public partial class APIConfig : IEquatable<APIConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected APIConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfig" /> class.
        /// </summary>
        /// <param name="voiceEnableDegradation">Unknown, probably voice optimization testing (required) (default to false).</param>
        /// <param name="voiceEnableReceiverLimiting">Unknown, probably voice optimization testing (required) (default to true).</param>
        /// <param name="accessLogsUrls">accessLogsUrls (required).</param>
        /// <param name="address">VRChat&#39;s office address (required).</param>
        /// <param name="ageVerificationInviteVisible">ageVerificationInviteVisible (required).</param>
        /// <param name="ageVerificationP">ageVerificationP (required).</param>
        /// <param name="ageVerificationStatusVisible">ageVerificationStatusVisible (required).</param>
        /// <param name="analysisMaxRetries">Max retries for avatar analysis requests (required).</param>
        /// <param name="analysisRetryInterval">Interval between retries for avatar analysis requests (required).</param>
        /// <param name="announcements">Public Announcements (required).</param>
        /// <param name="analyticsSegmentNewUIPctOfUsers">Unknown (required).</param>
        /// <param name="analyticsSegmentNewUISalt">Unknown (required).</param>
        /// <param name="availableLanguageCodes">List of supported Languages (required).</param>
        /// <param name="availableLanguages">List of supported Languages (required).</param>
        /// <param name="avatarPerfLimiter">avatarPerfLimiter (required).</param>
        /// <param name="chatboxLogBufferSeconds">Unknown (required) (default to 40).</param>
        /// <param name="clientApiKey">apiKey to be used for all other requests (required).</param>
        /// <param name="clientBPSCeiling">Unknown (required) (default to 18432).</param>
        /// <param name="clientDisconnectTimeout">Unknown (required) (default to 30000).</param>
        /// <param name="clientNetDispatchThread">Unknown (default to false).</param>
        /// <param name="clientNetDispatchThreadMobile">Unknown (required) (default to true).</param>
        /// <param name="clientNetInThread">Unknown (default to false).</param>
        /// <param name="clientNetInThread2">Unknown (default to false).</param>
        /// <param name="clientNetInThreadMobile">Unknown (default to false).</param>
        /// <param name="clientNetInThreadMobile2">Unknown (default to false).</param>
        /// <param name="clientNetOutThread">Unknown (default to false).</param>
        /// <param name="clientNetOutThread2">Unknown (default to false).</param>
        /// <param name="clientNetOutThreadMobile">Unknown (default to false).</param>
        /// <param name="clientNetOutThreadMobile2">Unknown (default to false).</param>
        /// <param name="clientQR">Unknown (default to 1).</param>
        /// <param name="clientReservedPlayerBPS">Unknown (required) (default to 7168).</param>
        /// <param name="clientSentCountAllowance">Unknown (required) (default to 15).</param>
        /// <param name="constants">constants (required).</param>
        /// <param name="contactEmail">VRChat&#39;s contact email (required).</param>
        /// <param name="copyrightEmail">VRChat&#39;s copyright-issues-related email (required).</param>
        /// <param name="currentPrivacyVersion">Current version number of the Privacy Agreement (default to 1).</param>
        /// <param name="currentTOSVersion">Current version number of the Terms of Service (required).</param>
        /// <param name="defaultAvatar">defaultAvatar (required).</param>
        /// <param name="defaultStickerSet">defaultStickerSet (required).</param>
        /// <param name="devLanguageCodes">Unknown.</param>
        /// <param name="devSdkUrl">Link to download the development SDK, use downloadUrls instead (required).</param>
        /// <param name="devSdkVersion">Version of the development SDK (required).</param>
        /// <param name="disCountdown">Unknown, \&quot;dis\&quot; maybe for disconnect? (required).</param>
        /// <param name="disableAVProInProton">Unknown (default to false).</param>
        /// <param name="disableAvatarCopying">Toggles if copying avatars should be disabled (required) (default to false).</param>
        /// <param name="disableAvatarGating">Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag (required) (default to false).</param>
        /// <param name="disableCommunityLabs">Toggles if the Community Labs should be disabled (required) (default to false).</param>
        /// <param name="disableCommunityLabsPromotion">Toggles if promotion out of Community Labs should be disabled (required) (default to false).</param>
        /// <param name="disableEmail">Unknown (required) (default to false).</param>
        /// <param name="disableCaptcha">Unknown (default to true).</param>
        /// <param name="disableEventStream">Toggles if Analytics should be disabled. (required) (default to false).</param>
        /// <param name="disableFeedbackGating">Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag. (required) (default to false).</param>
        /// <param name="disableFrontendBuilds">Unknown, probably toggles compilation of frontend web builds? So internal flag? (required) (default to false).</param>
        /// <param name="disableGiftDrops">Toggles if gift drops should be disabled (required) (default to false).</param>
        /// <param name="disableHello">Unknown (required) (default to false).</param>
        /// <param name="disableOculusSubs">Toggles if signing up for Subscriptions in Oculus is disabled or not. (required) (default to false).</param>
        /// <param name="disableRegistration">Toggles if new user account registration should be disabled. (required) (default to false).</param>
        /// <param name="disableSteamNetworking">Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead. (required) (default to true).</param>
        /// <param name="disableTwoFactorAuth">Toggles if 2FA should be disabled. (required) (default to false).</param>
        /// <param name="disableUdon">Toggles if Udon should be universally disabled in-game. (required) (default to false).</param>
        /// <param name="disableUpgradeAccount">Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled. (required) (default to false).</param>
        /// <param name="downloadLinkWindows">Download link for game on the Oculus Rift website. (required).</param>
        /// <param name="downloadUrls">downloadUrls (required).</param>
        /// <param name="dynamicWorldRows">Array of DynamicWorldRow objects, used by the game to display the list of world rows (required).</param>
        /// <param name="economyPauseEnd">Unknown.</param>
        /// <param name="economyPauseStart">Unknown.</param>
        /// <param name="economyState">Unknown (default to 1).</param>
        /// <param name="events">events (required).</param>
        /// <param name="forceUseLatestWorld">Unknown (required) (default to true).</param>
        /// <param name="giftDisplayType">Display type of gifts (required).</param>
        /// <param name="googleApiClientId">Unknown (required) (default to &quot;827942544393-r2ouvckvouldn9dg9uruseje575e878f.apps.googleusercontent.com&quot;).</param>
        /// <param name="homeWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="homepageRedirectTarget">Redirect target if you try to open the base API domain in your browser (required) (default to &quot;https://hello.vrchat.com&quot;).</param>
        /// <param name="hubWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="imageHostUrlList">A list of explicitly allowed origins that worlds can request images from via the Udon&#39;s [VRCImageDownloader#DownloadImage](https://creators.vrchat.com/worlds/udon/image-loading/#downloadimage). (required).</param>
        /// <param name="jobsEmail">VRChat&#39;s job application email (required).</param>
        /// <param name="minSupportedClientBuildNumber">minSupportedClientBuildNumber (required).</param>
        /// <param name="minimumUnityVersionForUploads">Minimum Unity version required for uploading assets (required) (default to &quot;2019.0.0f1&quot;).</param>
        /// <param name="moderationEmail">VRChat&#39;s moderation related email (required).</param>
        /// <param name="notAllowedToSelectAvatarInPrivateWorldMessage">Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds (required).</param>
        /// <param name="offlineAnalysis">offlineAnalysis (required).</param>
        /// <param name="photonNameserverOverrides">Unknown (required).</param>
        /// <param name="photonPublicKeys">Unknown (required).</param>
        /// <param name="reportCategories">reportCategories (required).</param>
        /// <param name="reportFormUrl">URL to the report form (required) (default to &quot;https://help.vrchat.com/hc/en-us/requests/new?ticket_form_id&#x3D;1500000182242&amp;tf_360056455174&#x3D;user_report&amp;tf_360057451993&#x3D;{userId}&amp;tf_1500001445142&#x3D;{reportedId}&amp;tf_subject&#x3D;{reason} {category} By {contentType} {reportedName}&amp;tf_description&#x3D;{description}&quot;).</param>
        /// <param name="reportOptions">reportOptions (required).</param>
        /// <param name="reportReasons">reportReasons (required).</param>
        /// <param name="requireAgeVerificationBetaTag">requireAgeVerificationBetaTag (required).</param>
        /// <param name="sdkDeveloperFaqUrl">Link to the developer FAQ (required).</param>
        /// <param name="sdkDiscordUrl">Link to the official VRChat Discord (required).</param>
        /// <param name="sdkNotAllowedToPublishMessage">Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet (required).</param>
        /// <param name="sdkUnityVersion">Unity version supported by the SDK (required).</param>
        /// <param name="stringHostUrlList">A list of explicitly allowed origins that worlds can request strings from via the Udon&#39;s [VRCStringDownloader.LoadUrl](https://creators.vrchat.com/worlds/udon/string-loading/#ivrcstringdownload). (required).</param>
        /// <param name="supportEmail">VRChat&#39;s support email (required).</param>
        /// <param name="supportFormUrl">VRChat&#39;s support form (required).</param>
        /// <param name="timekeeping">Unknown (required) (default to true).</param>
        /// <param name="timeOutWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="tutorialWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="updateRateMsMaximum">Unknown (required).</param>
        /// <param name="updateRateMsMinimum">Unknown (required).</param>
        /// <param name="updateRateMsNormal">Unknown (required).</param>
        /// <param name="updateRateMsUdonManual">Unknown (required).</param>
        /// <param name="uploadAnalysisPercent">Unknown (required).</param>
        /// <param name="urlList">List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game (required).</param>
        /// <param name="useReliableUdpForVoice">Unknown (required) (default to false).</param>
        /// <param name="viveWindowsUrl">Download link for game on the Steam website. (required).</param>
        /// <param name="whiteListedAssetUrls">List of allowed URLs that are allowed to host avatar assets (required).</param>
        /// <param name="playerUrlResolverVersion">Currently used youtube-dl.exe version (required).</param>
        /// <param name="playerUrlResolverSha1">Currently used youtube-dl.exe hash in SHA1-delimited format (required).</param>
        /// <param name="publicKey">Public key, hex encoded (required).</param>
        /// <param name="websocketMaxFriendsRefreshDelay">Unknown (required) (default to 900).</param>
        /// <param name="websocketQuickReconnectTime">Unknown (required) (default to 2).</param>
        /// <param name="websocketReconnectMaxDelay">Unknown (required) (default to 2).</param>
        public APIConfig(bool voiceEnableDegradation = false, bool voiceEnableReceiverLimiting = true, APIConfigAccessLogsUrls accessLogsUrls = default(APIConfigAccessLogsUrls), string address = default(string), bool ageVerificationInviteVisible = default(bool), bool ageVerificationP = default(bool), bool ageVerificationStatusVisible = default(bool), int analysisMaxRetries = default(int), int analysisRetryInterval = default(int), List<APIConfigAnnouncement> announcements = default(List<APIConfigAnnouncement>), int analyticsSegmentNewUIPctOfUsers = default(int), string analyticsSegmentNewUISalt = default(string), List<string> availableLanguageCodes = default(List<string>), List<string> availableLanguages = default(List<string>), APIConfigAvatarPerfLimiter avatarPerfLimiter = default(APIConfigAvatarPerfLimiter), int chatboxLogBufferSeconds = 40, string clientApiKey = default(string), int clientBPSCeiling = 18432, int clientDisconnectTimeout = 30000, bool clientNetDispatchThread = false, bool clientNetDispatchThreadMobile = true, bool clientNetInThread = false, bool clientNetInThread2 = false, bool clientNetInThreadMobile = false, bool clientNetInThreadMobile2 = false, bool clientNetOutThread = false, bool clientNetOutThread2 = false, bool clientNetOutThreadMobile = false, bool clientNetOutThreadMobile2 = false, int clientQR = 1, int clientReservedPlayerBPS = 7168, int clientSentCountAllowance = 15, APIConfigConstants constants = default(APIConfigConstants), string contactEmail = default(string), string copyrightEmail = default(string), int currentPrivacyVersion = 1, int currentTOSVersion = default(int), string defaultAvatar = default(string), string defaultStickerSet = default(string), List<string> devLanguageCodes = default(List<string>), string devSdkUrl = default(string), string devSdkVersion = default(string), DateTime disCountdown = default(DateTime), bool disableAVProInProton = false, bool disableAvatarCopying = false, bool disableAvatarGating = false, bool disableCommunityLabs = false, bool disableCommunityLabsPromotion = false, bool disableEmail = false, bool disableCaptcha = true, bool disableEventStream = false, bool disableFeedbackGating = false, bool disableFrontendBuilds = false, bool disableGiftDrops = false, bool disableHello = false, bool disableOculusSubs = false, bool disableRegistration = false, bool disableSteamNetworking = true, bool disableTwoFactorAuth = false, bool disableUdon = false, bool disableUpgradeAccount = false, string downloadLinkWindows = default(string), APIConfigDownloadURLList downloadUrls = default(APIConfigDownloadURLList), List<DynamicContentRow> dynamicWorldRows = default(List<DynamicContentRow>), string economyPauseEnd = default(string), string economyPauseStart = default(string), int economyState = 1, APIConfigEvents events = default(APIConfigEvents), bool forceUseLatestWorld = true, string giftDisplayType = default(string), string googleApiClientId = "827942544393-r2ouvckvouldn9dg9uruseje575e878f.apps.googleusercontent.com", string homeWorldId = default(string), string homepageRedirectTarget = "https://hello.vrchat.com", string hubWorldId = default(string), List<string> imageHostUrlList = default(List<string>), string jobsEmail = default(string), APIConfigMinSupportedClientBuildNumber minSupportedClientBuildNumber = default(APIConfigMinSupportedClientBuildNumber), string minimumUnityVersionForUploads = "2019.0.0f1", string moderationEmail = default(string), string notAllowedToSelectAvatarInPrivateWorldMessage = default(string), APIConfigOfflineAnalysis offlineAnalysis = default(APIConfigOfflineAnalysis), List<string> photonNameserverOverrides = default(List<string>), List<string> photonPublicKeys = default(List<string>), APIConfigReportCategories reportCategories = default(APIConfigReportCategories), string reportFormUrl = "https://help.vrchat.com/hc/en-us/requests/new?ticket_form_id=1500000182242&tf_360056455174=user_report&tf_360057451993={userId}&tf_1500001445142={reportedId}&tf_subject={reason} {category} By {contentType} {reportedName}&tf_description={description}", APIConfigReportOptions reportOptions = default(APIConfigReportOptions), APIConfigReportReasons reportReasons = default(APIConfigReportReasons), bool requireAgeVerificationBetaTag = default(bool), string sdkDeveloperFaqUrl = default(string), string sdkDiscordUrl = default(string), string sdkNotAllowedToPublishMessage = default(string), string sdkUnityVersion = default(string), List<string> stringHostUrlList = default(List<string>), string supportEmail = default(string), string supportFormUrl = default(string), bool timekeeping = true, string timeOutWorldId = default(string), string tutorialWorldId = default(string), int updateRateMsMaximum = default(int), int updateRateMsMinimum = default(int), int updateRateMsNormal = default(int), int updateRateMsUdonManual = default(int), int uploadAnalysisPercent = default(int), List<string> urlList = default(List<string>), bool useReliableUdpForVoice = false, string viveWindowsUrl = default(string), List<string> whiteListedAssetUrls = default(List<string>), string playerUrlResolverVersion = default(string), string playerUrlResolverSha1 = default(string), string publicKey = default(string), int websocketMaxFriendsRefreshDelay = 900, int websocketQuickReconnectTime = 2, int websocketReconnectMaxDelay = 2)
        {
            this.VoiceEnableDegradation = voiceEnableDegradation;
            this.VoiceEnableReceiverLimiting = voiceEnableReceiverLimiting;
            // to ensure "accessLogsUrls" is required (not null)
            if (accessLogsUrls == null)
            {
                throw new ArgumentNullException("accessLogsUrls is a required property for APIConfig and cannot be null");
            }
            this.AccessLogsUrls = accessLogsUrls;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for APIConfig and cannot be null");
            }
            this.Address = address;
            this.AgeVerificationInviteVisible = ageVerificationInviteVisible;
            this.AgeVerificationP = ageVerificationP;
            this.AgeVerificationStatusVisible = ageVerificationStatusVisible;
            this.AnalysisMaxRetries = analysisMaxRetries;
            this.AnalysisRetryInterval = analysisRetryInterval;
            // to ensure "announcements" is required (not null)
            if (announcements == null)
            {
                throw new ArgumentNullException("announcements is a required property for APIConfig and cannot be null");
            }
            this.Announcements = announcements;
            this.AnalyticsSegmentNewUIPctOfUsers = analyticsSegmentNewUIPctOfUsers;
            // to ensure "analyticsSegmentNewUISalt" is required (not null)
            if (analyticsSegmentNewUISalt == null)
            {
                throw new ArgumentNullException("analyticsSegmentNewUISalt is a required property for APIConfig and cannot be null");
            }
            this.AnalyticsSegmentNewUISalt = analyticsSegmentNewUISalt;
            // to ensure "availableLanguageCodes" is required (not null)
            if (availableLanguageCodes == null)
            {
                throw new ArgumentNullException("availableLanguageCodes is a required property for APIConfig and cannot be null");
            }
            this.AvailableLanguageCodes = availableLanguageCodes;
            // to ensure "availableLanguages" is required (not null)
            if (availableLanguages == null)
            {
                throw new ArgumentNullException("availableLanguages is a required property for APIConfig and cannot be null");
            }
            this.AvailableLanguages = availableLanguages;
            // to ensure "avatarPerfLimiter" is required (not null)
            if (avatarPerfLimiter == null)
            {
                throw new ArgumentNullException("avatarPerfLimiter is a required property for APIConfig and cannot be null");
            }
            this.AvatarPerfLimiter = avatarPerfLimiter;
            this.ChatboxLogBufferSeconds = chatboxLogBufferSeconds;
            // to ensure "clientApiKey" is required (not null)
            if (clientApiKey == null)
            {
                throw new ArgumentNullException("clientApiKey is a required property for APIConfig and cannot be null");
            }
            this.ClientApiKey = clientApiKey;
            this.ClientBPSCeiling = clientBPSCeiling;
            this.ClientDisconnectTimeout = clientDisconnectTimeout;
            this.ClientNetDispatchThreadMobile = clientNetDispatchThreadMobile;
            this.ClientReservedPlayerBPS = clientReservedPlayerBPS;
            this.ClientSentCountAllowance = clientSentCountAllowance;
            // to ensure "constants" is required (not null)
            if (constants == null)
            {
                throw new ArgumentNullException("constants is a required property for APIConfig and cannot be null");
            }
            this.Constants = constants;
            // to ensure "contactEmail" is required (not null)
            if (contactEmail == null)
            {
                throw new ArgumentNullException("contactEmail is a required property for APIConfig and cannot be null");
            }
            this.ContactEmail = contactEmail;
            // to ensure "copyrightEmail" is required (not null)
            if (copyrightEmail == null)
            {
                throw new ArgumentNullException("copyrightEmail is a required property for APIConfig and cannot be null");
            }
            this.CopyrightEmail = copyrightEmail;
            this.CurrentTOSVersion = currentTOSVersion;
            // to ensure "defaultAvatar" is required (not null)
            if (defaultAvatar == null)
            {
                throw new ArgumentNullException("defaultAvatar is a required property for APIConfig and cannot be null");
            }
            this.DefaultAvatar = defaultAvatar;
            // to ensure "defaultStickerSet" is required (not null)
            if (defaultStickerSet == null)
            {
                throw new ArgumentNullException("defaultStickerSet is a required property for APIConfig and cannot be null");
            }
            this.DefaultStickerSet = defaultStickerSet;
            // to ensure "devSdkUrl" is required (not null)
            if (devSdkUrl == null)
            {
                throw new ArgumentNullException("devSdkUrl is a required property for APIConfig and cannot be null");
            }
            this.DevSdkUrl = devSdkUrl;
            // to ensure "devSdkVersion" is required (not null)
            if (devSdkVersion == null)
            {
                throw new ArgumentNullException("devSdkVersion is a required property for APIConfig and cannot be null");
            }
            this.DevSdkVersion = devSdkVersion;
            this.DisCountdown = disCountdown;
            this.DisableAvatarCopying = disableAvatarCopying;
            this.DisableAvatarGating = disableAvatarGating;
            this.DisableCommunityLabs = disableCommunityLabs;
            this.DisableCommunityLabsPromotion = disableCommunityLabsPromotion;
            this.DisableEmail = disableEmail;
            this.DisableEventStream = disableEventStream;
            this.DisableFeedbackGating = disableFeedbackGating;
            this.DisableFrontendBuilds = disableFrontendBuilds;
            this.DisableGiftDrops = disableGiftDrops;
            this.DisableHello = disableHello;
            this.DisableOculusSubs = disableOculusSubs;
            this.DisableRegistration = disableRegistration;
            this.DisableSteamNetworking = disableSteamNetworking;
            this.DisableTwoFactorAuth = disableTwoFactorAuth;
            this.DisableUdon = disableUdon;
            this.DisableUpgradeAccount = disableUpgradeAccount;
            // to ensure "downloadLinkWindows" is required (not null)
            if (downloadLinkWindows == null)
            {
                throw new ArgumentNullException("downloadLinkWindows is a required property for APIConfig and cannot be null");
            }
            this.DownloadLinkWindows = downloadLinkWindows;
            // to ensure "downloadUrls" is required (not null)
            if (downloadUrls == null)
            {
                throw new ArgumentNullException("downloadUrls is a required property for APIConfig and cannot be null");
            }
            this.DownloadUrls = downloadUrls;
            // to ensure "dynamicWorldRows" is required (not null)
            if (dynamicWorldRows == null)
            {
                throw new ArgumentNullException("dynamicWorldRows is a required property for APIConfig and cannot be null");
            }
            this.DynamicWorldRows = dynamicWorldRows;
            // to ensure "events" is required (not null)
            if (events == null)
            {
                throw new ArgumentNullException("events is a required property for APIConfig and cannot be null");
            }
            this.Events = events;
            this.ForceUseLatestWorld = forceUseLatestWorld;
            // to ensure "giftDisplayType" is required (not null)
            if (giftDisplayType == null)
            {
                throw new ArgumentNullException("giftDisplayType is a required property for APIConfig and cannot be null");
            }
            this.GiftDisplayType = giftDisplayType;
            // to ensure "googleApiClientId" is required (not null)
            if (googleApiClientId == null)
            {
                throw new ArgumentNullException("googleApiClientId is a required property for APIConfig and cannot be null");
            }
            this.GoogleApiClientId = googleApiClientId;
            // to ensure "homeWorldId" is required (not null)
            if (homeWorldId == null)
            {
                throw new ArgumentNullException("homeWorldId is a required property for APIConfig and cannot be null");
            }
            this.HomeWorldId = homeWorldId;
            // to ensure "homepageRedirectTarget" is required (not null)
            if (homepageRedirectTarget == null)
            {
                throw new ArgumentNullException("homepageRedirectTarget is a required property for APIConfig and cannot be null");
            }
            this.HomepageRedirectTarget = homepageRedirectTarget;
            // to ensure "hubWorldId" is required (not null)
            if (hubWorldId == null)
            {
                throw new ArgumentNullException("hubWorldId is a required property for APIConfig and cannot be null");
            }
            this.HubWorldId = hubWorldId;
            // to ensure "imageHostUrlList" is required (not null)
            if (imageHostUrlList == null)
            {
                throw new ArgumentNullException("imageHostUrlList is a required property for APIConfig and cannot be null");
            }
            this.ImageHostUrlList = imageHostUrlList;
            // to ensure "jobsEmail" is required (not null)
            if (jobsEmail == null)
            {
                throw new ArgumentNullException("jobsEmail is a required property for APIConfig and cannot be null");
            }
            this.JobsEmail = jobsEmail;
            // to ensure "minSupportedClientBuildNumber" is required (not null)
            if (minSupportedClientBuildNumber == null)
            {
                throw new ArgumentNullException("minSupportedClientBuildNumber is a required property for APIConfig and cannot be null");
            }
            this.MinSupportedClientBuildNumber = minSupportedClientBuildNumber;
            // to ensure "minimumUnityVersionForUploads" is required (not null)
            if (minimumUnityVersionForUploads == null)
            {
                throw new ArgumentNullException("minimumUnityVersionForUploads is a required property for APIConfig and cannot be null");
            }
            this.MinimumUnityVersionForUploads = minimumUnityVersionForUploads;
            // to ensure "moderationEmail" is required (not null)
            if (moderationEmail == null)
            {
                throw new ArgumentNullException("moderationEmail is a required property for APIConfig and cannot be null");
            }
            this.ModerationEmail = moderationEmail;
            // to ensure "notAllowedToSelectAvatarInPrivateWorldMessage" is required (not null)
            if (notAllowedToSelectAvatarInPrivateWorldMessage == null)
            {
                throw new ArgumentNullException("notAllowedToSelectAvatarInPrivateWorldMessage is a required property for APIConfig and cannot be null");
            }
            this.NotAllowedToSelectAvatarInPrivateWorldMessage = notAllowedToSelectAvatarInPrivateWorldMessage;
            // to ensure "offlineAnalysis" is required (not null)
            if (offlineAnalysis == null)
            {
                throw new ArgumentNullException("offlineAnalysis is a required property for APIConfig and cannot be null");
            }
            this.OfflineAnalysis = offlineAnalysis;
            // to ensure "photonNameserverOverrides" is required (not null)
            if (photonNameserverOverrides == null)
            {
                throw new ArgumentNullException("photonNameserverOverrides is a required property for APIConfig and cannot be null");
            }
            this.PhotonNameserverOverrides = photonNameserverOverrides;
            // to ensure "photonPublicKeys" is required (not null)
            if (photonPublicKeys == null)
            {
                throw new ArgumentNullException("photonPublicKeys is a required property for APIConfig and cannot be null");
            }
            this.PhotonPublicKeys = photonPublicKeys;
            // to ensure "reportCategories" is required (not null)
            if (reportCategories == null)
            {
                throw new ArgumentNullException("reportCategories is a required property for APIConfig and cannot be null");
            }
            this.ReportCategories = reportCategories;
            // to ensure "reportFormUrl" is required (not null)
            if (reportFormUrl == null)
            {
                throw new ArgumentNullException("reportFormUrl is a required property for APIConfig and cannot be null");
            }
            this.ReportFormUrl = reportFormUrl;
            // to ensure "reportOptions" is required (not null)
            if (reportOptions == null)
            {
                throw new ArgumentNullException("reportOptions is a required property for APIConfig and cannot be null");
            }
            this.ReportOptions = reportOptions;
            // to ensure "reportReasons" is required (not null)
            if (reportReasons == null)
            {
                throw new ArgumentNullException("reportReasons is a required property for APIConfig and cannot be null");
            }
            this.ReportReasons = reportReasons;
            this.RequireAgeVerificationBetaTag = requireAgeVerificationBetaTag;
            // to ensure "sdkDeveloperFaqUrl" is required (not null)
            if (sdkDeveloperFaqUrl == null)
            {
                throw new ArgumentNullException("sdkDeveloperFaqUrl is a required property for APIConfig and cannot be null");
            }
            this.SdkDeveloperFaqUrl = sdkDeveloperFaqUrl;
            // to ensure "sdkDiscordUrl" is required (not null)
            if (sdkDiscordUrl == null)
            {
                throw new ArgumentNullException("sdkDiscordUrl is a required property for APIConfig and cannot be null");
            }
            this.SdkDiscordUrl = sdkDiscordUrl;
            // to ensure "sdkNotAllowedToPublishMessage" is required (not null)
            if (sdkNotAllowedToPublishMessage == null)
            {
                throw new ArgumentNullException("sdkNotAllowedToPublishMessage is a required property for APIConfig and cannot be null");
            }
            this.SdkNotAllowedToPublishMessage = sdkNotAllowedToPublishMessage;
            // to ensure "sdkUnityVersion" is required (not null)
            if (sdkUnityVersion == null)
            {
                throw new ArgumentNullException("sdkUnityVersion is a required property for APIConfig and cannot be null");
            }
            this.SdkUnityVersion = sdkUnityVersion;
            // to ensure "stringHostUrlList" is required (not null)
            if (stringHostUrlList == null)
            {
                throw new ArgumentNullException("stringHostUrlList is a required property for APIConfig and cannot be null");
            }
            this.StringHostUrlList = stringHostUrlList;
            // to ensure "supportEmail" is required (not null)
            if (supportEmail == null)
            {
                throw new ArgumentNullException("supportEmail is a required property for APIConfig and cannot be null");
            }
            this.SupportEmail = supportEmail;
            // to ensure "supportFormUrl" is required (not null)
            if (supportFormUrl == null)
            {
                throw new ArgumentNullException("supportFormUrl is a required property for APIConfig and cannot be null");
            }
            this.SupportFormUrl = supportFormUrl;
            this.Timekeeping = timekeeping;
            // to ensure "timeOutWorldId" is required (not null)
            if (timeOutWorldId == null)
            {
                throw new ArgumentNullException("timeOutWorldId is a required property for APIConfig and cannot be null");
            }
            this.TimeOutWorldId = timeOutWorldId;
            // to ensure "tutorialWorldId" is required (not null)
            if (tutorialWorldId == null)
            {
                throw new ArgumentNullException("tutorialWorldId is a required property for APIConfig and cannot be null");
            }
            this.TutorialWorldId = tutorialWorldId;
            this.UpdateRateMsMaximum = updateRateMsMaximum;
            this.UpdateRateMsMinimum = updateRateMsMinimum;
            this.UpdateRateMsNormal = updateRateMsNormal;
            this.UpdateRateMsUdonManual = updateRateMsUdonManual;
            this.UploadAnalysisPercent = uploadAnalysisPercent;
            // to ensure "urlList" is required (not null)
            if (urlList == null)
            {
                throw new ArgumentNullException("urlList is a required property for APIConfig and cannot be null");
            }
            this.UrlList = urlList;
            this.UseReliableUdpForVoice = useReliableUdpForVoice;
            // to ensure "viveWindowsUrl" is required (not null)
            if (viveWindowsUrl == null)
            {
                throw new ArgumentNullException("viveWindowsUrl is a required property for APIConfig and cannot be null");
            }
            this.ViveWindowsUrl = viveWindowsUrl;
            // to ensure "whiteListedAssetUrls" is required (not null)
            if (whiteListedAssetUrls == null)
            {
                throw new ArgumentNullException("whiteListedAssetUrls is a required property for APIConfig and cannot be null");
            }
            this.WhiteListedAssetUrls = whiteListedAssetUrls;
            // to ensure "playerUrlResolverVersion" is required (not null)
            if (playerUrlResolverVersion == null)
            {
                throw new ArgumentNullException("playerUrlResolverVersion is a required property for APIConfig and cannot be null");
            }
            this.PlayerUrlResolverVersion = playerUrlResolverVersion;
            // to ensure "playerUrlResolverSha1" is required (not null)
            if (playerUrlResolverSha1 == null)
            {
                throw new ArgumentNullException("playerUrlResolverSha1 is a required property for APIConfig and cannot be null");
            }
            this.PlayerUrlResolverSha1 = playerUrlResolverSha1;
            // to ensure "publicKey" is required (not null)
            if (publicKey == null)
            {
                throw new ArgumentNullException("publicKey is a required property for APIConfig and cannot be null");
            }
            this.PublicKey = publicKey;
            this.WebsocketMaxFriendsRefreshDelay = websocketMaxFriendsRefreshDelay;
            this.WebsocketQuickReconnectTime = websocketQuickReconnectTime;
            this.WebsocketReconnectMaxDelay = websocketReconnectMaxDelay;
            this.ClientNetDispatchThread = clientNetDispatchThread;
            this.ClientNetInThread = clientNetInThread;
            this.ClientNetInThread2 = clientNetInThread2;
            this.ClientNetInThreadMobile = clientNetInThreadMobile;
            this.ClientNetInThreadMobile2 = clientNetInThreadMobile2;
            this.ClientNetOutThread = clientNetOutThread;
            this.ClientNetOutThread2 = clientNetOutThread2;
            this.ClientNetOutThreadMobile = clientNetOutThreadMobile;
            this.ClientNetOutThreadMobile2 = clientNetOutThreadMobile2;
            this.ClientQR = clientQR;
            this.CurrentPrivacyVersion = currentPrivacyVersion;
            this.DevLanguageCodes = devLanguageCodes;
            this.DisableAVProInProton = disableAVProInProton;
            this.DisableCaptcha = disableCaptcha;
            this.EconomyPauseEnd = economyPauseEnd;
            this.EconomyPauseStart = economyPauseStart;
            this.EconomyState = economyState;
        }

        /// <summary>
        /// Unknown, probably voice optimization testing
        /// </summary>
        /// <value>Unknown, probably voice optimization testing</value>
        [DataMember(Name = "VoiceEnableDegradation", IsRequired = true, EmitDefaultValue = true)]
        public bool VoiceEnableDegradation { get; set; }

        /// <summary>
        /// Unknown, probably voice optimization testing
        /// </summary>
        /// <value>Unknown, probably voice optimization testing</value>
        [DataMember(Name = "VoiceEnableReceiverLimiting", IsRequired = true, EmitDefaultValue = true)]
        public bool VoiceEnableReceiverLimiting { get; set; }

        /// <summary>
        /// Gets or Sets AccessLogsUrls
        /// </summary>
        [DataMember(Name = "accessLogsUrls", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigAccessLogsUrls AccessLogsUrls { get; set; }

        /// <summary>
        /// VRChat&#39;s office address
        /// </summary>
        /// <value>VRChat&#39;s office address</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets AgeVerificationInviteVisible
        /// </summary>
        [DataMember(Name = "ageVerificationInviteVisible", IsRequired = true, EmitDefaultValue = true)]
        public bool AgeVerificationInviteVisible { get; set; }

        /// <summary>
        /// Gets or Sets AgeVerificationP
        /// </summary>
        [DataMember(Name = "ageVerificationP", IsRequired = true, EmitDefaultValue = true)]
        public bool AgeVerificationP { get; set; }

        /// <summary>
        /// Gets or Sets AgeVerificationStatusVisible
        /// </summary>
        [DataMember(Name = "ageVerificationStatusVisible", IsRequired = true, EmitDefaultValue = true)]
        public bool AgeVerificationStatusVisible { get; set; }

        /// <summary>
        /// Max retries for avatar analysis requests
        /// </summary>
        /// <value>Max retries for avatar analysis requests</value>
        [DataMember(Name = "analysisMaxRetries", IsRequired = true, EmitDefaultValue = true)]
        public int AnalysisMaxRetries { get; set; }

        /// <summary>
        /// Interval between retries for avatar analysis requests
        /// </summary>
        /// <value>Interval between retries for avatar analysis requests</value>
        [DataMember(Name = "analysisRetryInterval", IsRequired = true, EmitDefaultValue = true)]
        public int AnalysisRetryInterval { get; set; }

        /// <summary>
        /// Public Announcements
        /// </summary>
        /// <value>Public Announcements</value>
        [DataMember(Name = "announcements", IsRequired = true, EmitDefaultValue = true)]
        public List<APIConfigAnnouncement> Announcements { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "analyticsSegment_NewUI_PctOfUsers", IsRequired = true, EmitDefaultValue = true)]
        public int AnalyticsSegmentNewUIPctOfUsers { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "analyticsSegment_NewUI_Salt", IsRequired = true, EmitDefaultValue = true)]
        public string AnalyticsSegmentNewUISalt { get; set; }

        /// <summary>
        /// List of supported Languages
        /// </summary>
        /// <value>List of supported Languages</value>
        [DataMember(Name = "availableLanguageCodes", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AvailableLanguageCodes { get; set; }

        /// <summary>
        /// List of supported Languages
        /// </summary>
        /// <value>List of supported Languages</value>
        [DataMember(Name = "availableLanguages", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AvailableLanguages { get; set; }

        /// <summary>
        /// Gets or Sets AvatarPerfLimiter
        /// </summary>
        [DataMember(Name = "avatarPerfLimiter", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigAvatarPerfLimiter AvatarPerfLimiter { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "chatboxLogBufferSeconds", IsRequired = true, EmitDefaultValue = true)]
        public int ChatboxLogBufferSeconds { get; set; }

        /// <summary>
        /// apiKey to be used for all other requests
        /// </summary>
        /// <value>apiKey to be used for all other requests</value>
        [DataMember(Name = "clientApiKey", IsRequired = true, EmitDefaultValue = true)]
        public string ClientApiKey { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientBPSCeiling", IsRequired = true, EmitDefaultValue = true)]
        public int ClientBPSCeiling { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientDisconnectTimeout", IsRequired = true, EmitDefaultValue = true)]
        public int ClientDisconnectTimeout { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetDispatchThread", EmitDefaultValue = true)]
        public bool ClientNetDispatchThread { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetDispatchThreadMobile", IsRequired = true, EmitDefaultValue = true)]
        public bool ClientNetDispatchThreadMobile { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetInThread", EmitDefaultValue = true)]
        public bool ClientNetInThread { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetInThread2", EmitDefaultValue = true)]
        public bool ClientNetInThread2 { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetInThreadMobile", EmitDefaultValue = true)]
        public bool ClientNetInThreadMobile { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetInThreadMobile2", EmitDefaultValue = true)]
        public bool ClientNetInThreadMobile2 { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetOutThread", EmitDefaultValue = true)]
        public bool ClientNetOutThread { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetOutThread2", EmitDefaultValue = true)]
        public bool ClientNetOutThread2 { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetOutThreadMobile", EmitDefaultValue = true)]
        public bool ClientNetOutThreadMobile { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientNetOutThreadMobile2", EmitDefaultValue = true)]
        public bool ClientNetOutThreadMobile2 { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientQR", EmitDefaultValue = false)]
        public int ClientQR { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientReservedPlayerBPS", IsRequired = true, EmitDefaultValue = true)]
        public int ClientReservedPlayerBPS { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientSentCountAllowance", IsRequired = true, EmitDefaultValue = true)]
        public int ClientSentCountAllowance { get; set; }

        /// <summary>
        /// Gets or Sets Constants
        /// </summary>
        [DataMember(Name = "constants", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigConstants Constants { get; set; }

        /// <summary>
        /// VRChat&#39;s contact email
        /// </summary>
        /// <value>VRChat&#39;s contact email</value>
        [DataMember(Name = "contactEmail", IsRequired = true, EmitDefaultValue = true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// VRChat&#39;s copyright-issues-related email
        /// </summary>
        /// <value>VRChat&#39;s copyright-issues-related email</value>
        [DataMember(Name = "copyrightEmail", IsRequired = true, EmitDefaultValue = true)]
        public string CopyrightEmail { get; set; }

        /// <summary>
        /// Current version number of the Privacy Agreement
        /// </summary>
        /// <value>Current version number of the Privacy Agreement</value>
        [DataMember(Name = "currentPrivacyVersion", EmitDefaultValue = false)]
        public int CurrentPrivacyVersion { get; set; }

        /// <summary>
        /// Current version number of the Terms of Service
        /// </summary>
        /// <value>Current version number of the Terms of Service</value>
        [DataMember(Name = "currentTOSVersion", IsRequired = true, EmitDefaultValue = true)]
        public int CurrentTOSVersion { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAvatar
        /// </summary>
        [DataMember(Name = "defaultAvatar", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultAvatar { get; set; }

        /// <summary>
        /// Gets or Sets DefaultStickerSet
        /// </summary>
        [DataMember(Name = "defaultStickerSet", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultStickerSet { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "devLanguageCodes", EmitDefaultValue = false)]
        public List<string> DevLanguageCodes { get; set; }

        /// <summary>
        /// Link to download the development SDK, use downloadUrls instead
        /// </summary>
        /// <value>Link to download the development SDK, use downloadUrls instead</value>
        [DataMember(Name = "devSdkUrl", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string DevSdkUrl { get; set; }

        /// <summary>
        /// Version of the development SDK
        /// </summary>
        /// <value>Version of the development SDK</value>
        [DataMember(Name = "devSdkVersion", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string DevSdkVersion { get; set; }

        /// <summary>
        /// Unknown, \&quot;dis\&quot; maybe for disconnect?
        /// </summary>
        /// <value>Unknown, \&quot;dis\&quot; maybe for disconnect?</value>
        [DataMember(Name = "dis-countdown", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DisCountdown { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "disableAVProInProton", EmitDefaultValue = true)]
        public bool DisableAVProInProton { get; set; }

        /// <summary>
        /// Toggles if copying avatars should be disabled
        /// </summary>
        /// <value>Toggles if copying avatars should be disabled</value>
        [DataMember(Name = "disableAvatarCopying", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableAvatarCopying { get; set; }

        /// <summary>
        /// Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag
        /// </summary>
        /// <value>Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag</value>
        [DataMember(Name = "disableAvatarGating", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableAvatarGating { get; set; }

        /// <summary>
        /// Toggles if the Community Labs should be disabled
        /// </summary>
        /// <value>Toggles if the Community Labs should be disabled</value>
        [DataMember(Name = "disableCommunityLabs", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableCommunityLabs { get; set; }

        /// <summary>
        /// Toggles if promotion out of Community Labs should be disabled
        /// </summary>
        /// <value>Toggles if promotion out of Community Labs should be disabled</value>
        [DataMember(Name = "disableCommunityLabsPromotion", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableCommunityLabsPromotion { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "disableEmail", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableEmail { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "disableCaptcha", EmitDefaultValue = true)]
        public bool DisableCaptcha { get; set; }

        /// <summary>
        /// Toggles if Analytics should be disabled.
        /// </summary>
        /// <value>Toggles if Analytics should be disabled.</value>
        [DataMember(Name = "disableEventStream", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableEventStream { get; set; }

        /// <summary>
        /// Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag.
        /// </summary>
        /// <value>Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag.</value>
        [DataMember(Name = "disableFeedbackGating", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableFeedbackGating { get; set; }

        /// <summary>
        /// Unknown, probably toggles compilation of frontend web builds? So internal flag?
        /// </summary>
        /// <value>Unknown, probably toggles compilation of frontend web builds? So internal flag?</value>
        [DataMember(Name = "disableFrontendBuilds", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableFrontendBuilds { get; set; }

        /// <summary>
        /// Toggles if gift drops should be disabled
        /// </summary>
        /// <value>Toggles if gift drops should be disabled</value>
        [DataMember(Name = "disableGiftDrops", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableGiftDrops { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "disableHello", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableHello { get; set; }

        /// <summary>
        /// Toggles if signing up for Subscriptions in Oculus is disabled or not.
        /// </summary>
        /// <value>Toggles if signing up for Subscriptions in Oculus is disabled or not.</value>
        [DataMember(Name = "disableOculusSubs", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableOculusSubs { get; set; }

        /// <summary>
        /// Toggles if new user account registration should be disabled.
        /// </summary>
        /// <value>Toggles if new user account registration should be disabled.</value>
        [DataMember(Name = "disableRegistration", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableRegistration { get; set; }

        /// <summary>
        /// Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.
        /// </summary>
        /// <value>Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.</value>
        [DataMember(Name = "disableSteamNetworking", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableSteamNetworking { get; set; }

        /// <summary>
        /// Toggles if 2FA should be disabled.
        /// </summary>
        /// <value>Toggles if 2FA should be disabled.</value>
        [DataMember(Name = "disableTwoFactorAuth", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public bool DisableTwoFactorAuth { get; set; }

        /// <summary>
        /// Toggles if Udon should be universally disabled in-game.
        /// </summary>
        /// <value>Toggles if Udon should be universally disabled in-game.</value>
        [DataMember(Name = "disableUdon", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableUdon { get; set; }

        /// <summary>
        /// Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled.
        /// </summary>
        /// <value>Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled.</value>
        [DataMember(Name = "disableUpgradeAccount", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableUpgradeAccount { get; set; }

        /// <summary>
        /// Download link for game on the Oculus Rift website.
        /// </summary>
        /// <value>Download link for game on the Oculus Rift website.</value>
        [DataMember(Name = "downloadLinkWindows", IsRequired = true, EmitDefaultValue = true)]
        public string DownloadLinkWindows { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrls
        /// </summary>
        [DataMember(Name = "downloadUrls", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigDownloadURLList DownloadUrls { get; set; }

        /// <summary>
        /// Array of DynamicWorldRow objects, used by the game to display the list of world rows
        /// </summary>
        /// <value>Array of DynamicWorldRow objects, used by the game to display the list of world rows</value>
        [DataMember(Name = "dynamicWorldRows", IsRequired = true, EmitDefaultValue = true)]
        public List<DynamicContentRow> DynamicWorldRows { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "economyPauseEnd", EmitDefaultValue = false)]
        public string EconomyPauseEnd { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "economyPauseStart", EmitDefaultValue = false)]
        public string EconomyPauseStart { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "economyState", EmitDefaultValue = false)]
        public int EconomyState { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigEvents Events { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "forceUseLatestWorld", IsRequired = true, EmitDefaultValue = true)]
        public bool ForceUseLatestWorld { get; set; }

        /// <summary>
        /// Display type of gifts
        /// </summary>
        /// <value>Display type of gifts</value>
        [DataMember(Name = "giftDisplayType", IsRequired = true, EmitDefaultValue = true)]
        public string GiftDisplayType { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "googleApiClientId", IsRequired = true, EmitDefaultValue = true)]
        public string GoogleApiClientId { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "homeWorldId", IsRequired = true, EmitDefaultValue = true)]
        public string HomeWorldId { get; set; }

        /// <summary>
        /// Redirect target if you try to open the base API domain in your browser
        /// </summary>
        /// <value>Redirect target if you try to open the base API domain in your browser</value>
        [DataMember(Name = "homepageRedirectTarget", IsRequired = true, EmitDefaultValue = true)]
        public string HomepageRedirectTarget { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "hubWorldId", IsRequired = true, EmitDefaultValue = true)]
        public string HubWorldId { get; set; }

        /// <summary>
        /// A list of explicitly allowed origins that worlds can request images from via the Udon&#39;s [VRCImageDownloader#DownloadImage](https://creators.vrchat.com/worlds/udon/image-loading/#downloadimage).
        /// </summary>
        /// <value>A list of explicitly allowed origins that worlds can request images from via the Udon&#39;s [VRCImageDownloader#DownloadImage](https://creators.vrchat.com/worlds/udon/image-loading/#downloadimage).</value>
        [DataMember(Name = "imageHostUrlList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ImageHostUrlList { get; set; }

        /// <summary>
        /// VRChat&#39;s job application email
        /// </summary>
        /// <value>VRChat&#39;s job application email</value>
        [DataMember(Name = "jobsEmail", IsRequired = true, EmitDefaultValue = true)]
        public string JobsEmail { get; set; }

        /// <summary>
        /// Gets or Sets MinSupportedClientBuildNumber
        /// </summary>
        [DataMember(Name = "minSupportedClientBuildNumber", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigMinSupportedClientBuildNumber MinSupportedClientBuildNumber { get; set; }

        /// <summary>
        /// Minimum Unity version required for uploading assets
        /// </summary>
        /// <value>Minimum Unity version required for uploading assets</value>
        [DataMember(Name = "minimumUnityVersionForUploads", IsRequired = true, EmitDefaultValue = true)]
        public string MinimumUnityVersionForUploads { get; set; }

        /// <summary>
        /// VRChat&#39;s moderation related email
        /// </summary>
        /// <value>VRChat&#39;s moderation related email</value>
        [DataMember(Name = "moderationEmail", IsRequired = true, EmitDefaultValue = true)]
        public string ModerationEmail { get; set; }

        /// <summary>
        /// Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds
        /// </summary>
        /// <value>Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds</value>
        [DataMember(Name = "notAllowedToSelectAvatarInPrivateWorldMessage", IsRequired = true, EmitDefaultValue = true)]
        public string NotAllowedToSelectAvatarInPrivateWorldMessage { get; set; }

        /// <summary>
        /// Gets or Sets OfflineAnalysis
        /// </summary>
        [DataMember(Name = "offlineAnalysis", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigOfflineAnalysis OfflineAnalysis { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "photonNameserverOverrides", IsRequired = true, EmitDefaultValue = true)]
        public List<string> PhotonNameserverOverrides { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "photonPublicKeys", IsRequired = true, EmitDefaultValue = true)]
        public List<string> PhotonPublicKeys { get; set; }

        /// <summary>
        /// Gets or Sets ReportCategories
        /// </summary>
        [DataMember(Name = "reportCategories", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigReportCategories ReportCategories { get; set; }

        /// <summary>
        /// URL to the report form
        /// </summary>
        /// <value>URL to the report form</value>
        [DataMember(Name = "reportFormUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ReportFormUrl { get; set; }

        /// <summary>
        /// Gets or Sets ReportOptions
        /// </summary>
        [DataMember(Name = "reportOptions", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigReportOptions ReportOptions { get; set; }

        /// <summary>
        /// Gets or Sets ReportReasons
        /// </summary>
        [DataMember(Name = "reportReasons", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigReportReasons ReportReasons { get; set; }

        /// <summary>
        /// Gets or Sets RequireAgeVerificationBetaTag
        /// </summary>
        [DataMember(Name = "requireAgeVerificationBetaTag", IsRequired = true, EmitDefaultValue = true)]
        public bool RequireAgeVerificationBetaTag { get; set; }

        /// <summary>
        /// Link to the developer FAQ
        /// </summary>
        /// <value>Link to the developer FAQ</value>
        [DataMember(Name = "sdkDeveloperFaqUrl", IsRequired = true, EmitDefaultValue = true)]
        public string SdkDeveloperFaqUrl { get; set; }

        /// <summary>
        /// Link to the official VRChat Discord
        /// </summary>
        /// <value>Link to the official VRChat Discord</value>
        [DataMember(Name = "sdkDiscordUrl", IsRequired = true, EmitDefaultValue = true)]
        public string SdkDiscordUrl { get; set; }

        /// <summary>
        /// Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet
        /// </summary>
        /// <value>Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet</value>
        [DataMember(Name = "sdkNotAllowedToPublishMessage", IsRequired = true, EmitDefaultValue = true)]
        public string SdkNotAllowedToPublishMessage { get; set; }

        /// <summary>
        /// Unity version supported by the SDK
        /// </summary>
        /// <value>Unity version supported by the SDK</value>
        [DataMember(Name = "sdkUnityVersion", IsRequired = true, EmitDefaultValue = true)]
        public string SdkUnityVersion { get; set; }

        /// <summary>
        /// A list of explicitly allowed origins that worlds can request strings from via the Udon&#39;s [VRCStringDownloader.LoadUrl](https://creators.vrchat.com/worlds/udon/string-loading/#ivrcstringdownload).
        /// </summary>
        /// <value>A list of explicitly allowed origins that worlds can request strings from via the Udon&#39;s [VRCStringDownloader.LoadUrl](https://creators.vrchat.com/worlds/udon/string-loading/#ivrcstringdownload).</value>
        [DataMember(Name = "stringHostUrlList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> StringHostUrlList { get; set; }

        /// <summary>
        /// VRChat&#39;s support email
        /// </summary>
        /// <value>VRChat&#39;s support email</value>
        [DataMember(Name = "supportEmail", IsRequired = true, EmitDefaultValue = true)]
        public string SupportEmail { get; set; }

        /// <summary>
        /// VRChat&#39;s support form
        /// </summary>
        /// <value>VRChat&#39;s support form</value>
        [DataMember(Name = "supportFormUrl", IsRequired = true, EmitDefaultValue = true)]
        public string SupportFormUrl { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "timekeeping", IsRequired = true, EmitDefaultValue = true)]
        public bool Timekeeping { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "timeOutWorldId", IsRequired = true, EmitDefaultValue = true)]
        public string TimeOutWorldId { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "tutorialWorldId", IsRequired = true, EmitDefaultValue = true)]
        public string TutorialWorldId { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "updateRateMsMaximum", IsRequired = true, EmitDefaultValue = true)]
        public int UpdateRateMsMaximum { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "updateRateMsMinimum", IsRequired = true, EmitDefaultValue = true)]
        public int UpdateRateMsMinimum { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "updateRateMsNormal", IsRequired = true, EmitDefaultValue = true)]
        public int UpdateRateMsNormal { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "updateRateMsUdonManual", IsRequired = true, EmitDefaultValue = true)]
        public int UpdateRateMsUdonManual { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "uploadAnalysisPercent", IsRequired = true, EmitDefaultValue = true)]
        public int UploadAnalysisPercent { get; set; }

        /// <summary>
        /// List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game
        /// </summary>
        /// <value>List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game</value>
        [DataMember(Name = "urlList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> UrlList { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "useReliableUdpForVoice", IsRequired = true, EmitDefaultValue = true)]
        public bool UseReliableUdpForVoice { get; set; }

        /// <summary>
        /// Download link for game on the Steam website.
        /// </summary>
        /// <value>Download link for game on the Steam website.</value>
        [DataMember(Name = "viveWindowsUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ViveWindowsUrl { get; set; }

        /// <summary>
        /// List of allowed URLs that are allowed to host avatar assets
        /// </summary>
        /// <value>List of allowed URLs that are allowed to host avatar assets</value>
        [DataMember(Name = "whiteListedAssetUrls", IsRequired = true, EmitDefaultValue = true)]
        public List<string> WhiteListedAssetUrls { get; set; }

        /// <summary>
        /// Currently used youtube-dl.exe version
        /// </summary>
        /// <value>Currently used youtube-dl.exe version</value>
        [DataMember(Name = "player-url-resolver-version", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerUrlResolverVersion { get; set; }

        /// <summary>
        /// Currently used youtube-dl.exe hash in SHA1-delimited format
        /// </summary>
        /// <value>Currently used youtube-dl.exe hash in SHA1-delimited format</value>
        [DataMember(Name = "player-url-resolver-sha1", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerUrlResolverSha1 { get; set; }

        /// <summary>
        /// Public key, hex encoded
        /// </summary>
        /// <value>Public key, hex encoded</value>
        [DataMember(Name = "publicKey", IsRequired = true, EmitDefaultValue = true)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "websocketMaxFriendsRefreshDelay", IsRequired = true, EmitDefaultValue = true)]
        public int WebsocketMaxFriendsRefreshDelay { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "websocketQuickReconnectTime", IsRequired = true, EmitDefaultValue = true)]
        public int WebsocketQuickReconnectTime { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "websocketReconnectMaxDelay", IsRequired = true, EmitDefaultValue = true)]
        public int WebsocketReconnectMaxDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIConfig {\n");
            sb.Append("  VoiceEnableDegradation: ").Append(VoiceEnableDegradation).Append("\n");
            sb.Append("  VoiceEnableReceiverLimiting: ").Append(VoiceEnableReceiverLimiting).Append("\n");
            sb.Append("  AccessLogsUrls: ").Append(AccessLogsUrls).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AgeVerificationInviteVisible: ").Append(AgeVerificationInviteVisible).Append("\n");
            sb.Append("  AgeVerificationP: ").Append(AgeVerificationP).Append("\n");
            sb.Append("  AgeVerificationStatusVisible: ").Append(AgeVerificationStatusVisible).Append("\n");
            sb.Append("  AnalysisMaxRetries: ").Append(AnalysisMaxRetries).Append("\n");
            sb.Append("  AnalysisRetryInterval: ").Append(AnalysisRetryInterval).Append("\n");
            sb.Append("  Announcements: ").Append(Announcements).Append("\n");
            sb.Append("  AnalyticsSegmentNewUIPctOfUsers: ").Append(AnalyticsSegmentNewUIPctOfUsers).Append("\n");
            sb.Append("  AnalyticsSegmentNewUISalt: ").Append(AnalyticsSegmentNewUISalt).Append("\n");
            sb.Append("  AvailableLanguageCodes: ").Append(AvailableLanguageCodes).Append("\n");
            sb.Append("  AvailableLanguages: ").Append(AvailableLanguages).Append("\n");
            sb.Append("  AvatarPerfLimiter: ").Append(AvatarPerfLimiter).Append("\n");
            sb.Append("  ChatboxLogBufferSeconds: ").Append(ChatboxLogBufferSeconds).Append("\n");
            sb.Append("  ClientApiKey: ").Append(ClientApiKey).Append("\n");
            sb.Append("  ClientBPSCeiling: ").Append(ClientBPSCeiling).Append("\n");
            sb.Append("  ClientDisconnectTimeout: ").Append(ClientDisconnectTimeout).Append("\n");
            sb.Append("  ClientNetDispatchThread: ").Append(ClientNetDispatchThread).Append("\n");
            sb.Append("  ClientNetDispatchThreadMobile: ").Append(ClientNetDispatchThreadMobile).Append("\n");
            sb.Append("  ClientNetInThread: ").Append(ClientNetInThread).Append("\n");
            sb.Append("  ClientNetInThread2: ").Append(ClientNetInThread2).Append("\n");
            sb.Append("  ClientNetInThreadMobile: ").Append(ClientNetInThreadMobile).Append("\n");
            sb.Append("  ClientNetInThreadMobile2: ").Append(ClientNetInThreadMobile2).Append("\n");
            sb.Append("  ClientNetOutThread: ").Append(ClientNetOutThread).Append("\n");
            sb.Append("  ClientNetOutThread2: ").Append(ClientNetOutThread2).Append("\n");
            sb.Append("  ClientNetOutThreadMobile: ").Append(ClientNetOutThreadMobile).Append("\n");
            sb.Append("  ClientNetOutThreadMobile2: ").Append(ClientNetOutThreadMobile2).Append("\n");
            sb.Append("  ClientQR: ").Append(ClientQR).Append("\n");
            sb.Append("  ClientReservedPlayerBPS: ").Append(ClientReservedPlayerBPS).Append("\n");
            sb.Append("  ClientSentCountAllowance: ").Append(ClientSentCountAllowance).Append("\n");
            sb.Append("  Constants: ").Append(Constants).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  CopyrightEmail: ").Append(CopyrightEmail).Append("\n");
            sb.Append("  CurrentPrivacyVersion: ").Append(CurrentPrivacyVersion).Append("\n");
            sb.Append("  CurrentTOSVersion: ").Append(CurrentTOSVersion).Append("\n");
            sb.Append("  DefaultAvatar: ").Append(DefaultAvatar).Append("\n");
            sb.Append("  DefaultStickerSet: ").Append(DefaultStickerSet).Append("\n");
            sb.Append("  DevLanguageCodes: ").Append(DevLanguageCodes).Append("\n");
            sb.Append("  DevSdkUrl: ").Append(DevSdkUrl).Append("\n");
            sb.Append("  DevSdkVersion: ").Append(DevSdkVersion).Append("\n");
            sb.Append("  DisCountdown: ").Append(DisCountdown).Append("\n");
            sb.Append("  DisableAVProInProton: ").Append(DisableAVProInProton).Append("\n");
            sb.Append("  DisableAvatarCopying: ").Append(DisableAvatarCopying).Append("\n");
            sb.Append("  DisableAvatarGating: ").Append(DisableAvatarGating).Append("\n");
            sb.Append("  DisableCommunityLabs: ").Append(DisableCommunityLabs).Append("\n");
            sb.Append("  DisableCommunityLabsPromotion: ").Append(DisableCommunityLabsPromotion).Append("\n");
            sb.Append("  DisableEmail: ").Append(DisableEmail).Append("\n");
            sb.Append("  DisableCaptcha: ").Append(DisableCaptcha).Append("\n");
            sb.Append("  DisableEventStream: ").Append(DisableEventStream).Append("\n");
            sb.Append("  DisableFeedbackGating: ").Append(DisableFeedbackGating).Append("\n");
            sb.Append("  DisableFrontendBuilds: ").Append(DisableFrontendBuilds).Append("\n");
            sb.Append("  DisableGiftDrops: ").Append(DisableGiftDrops).Append("\n");
            sb.Append("  DisableHello: ").Append(DisableHello).Append("\n");
            sb.Append("  DisableOculusSubs: ").Append(DisableOculusSubs).Append("\n");
            sb.Append("  DisableRegistration: ").Append(DisableRegistration).Append("\n");
            sb.Append("  DisableSteamNetworking: ").Append(DisableSteamNetworking).Append("\n");
            sb.Append("  DisableTwoFactorAuth: ").Append(DisableTwoFactorAuth).Append("\n");
            sb.Append("  DisableUdon: ").Append(DisableUdon).Append("\n");
            sb.Append("  DisableUpgradeAccount: ").Append(DisableUpgradeAccount).Append("\n");
            sb.Append("  DownloadLinkWindows: ").Append(DownloadLinkWindows).Append("\n");
            sb.Append("  DownloadUrls: ").Append(DownloadUrls).Append("\n");
            sb.Append("  DynamicWorldRows: ").Append(DynamicWorldRows).Append("\n");
            sb.Append("  EconomyPauseEnd: ").Append(EconomyPauseEnd).Append("\n");
            sb.Append("  EconomyPauseStart: ").Append(EconomyPauseStart).Append("\n");
            sb.Append("  EconomyState: ").Append(EconomyState).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  ForceUseLatestWorld: ").Append(ForceUseLatestWorld).Append("\n");
            sb.Append("  GiftDisplayType: ").Append(GiftDisplayType).Append("\n");
            sb.Append("  GoogleApiClientId: ").Append(GoogleApiClientId).Append("\n");
            sb.Append("  HomeWorldId: ").Append(HomeWorldId).Append("\n");
            sb.Append("  HomepageRedirectTarget: ").Append(HomepageRedirectTarget).Append("\n");
            sb.Append("  HubWorldId: ").Append(HubWorldId).Append("\n");
            sb.Append("  ImageHostUrlList: ").Append(ImageHostUrlList).Append("\n");
            sb.Append("  JobsEmail: ").Append(JobsEmail).Append("\n");
            sb.Append("  MinSupportedClientBuildNumber: ").Append(MinSupportedClientBuildNumber).Append("\n");
            sb.Append("  MinimumUnityVersionForUploads: ").Append(MinimumUnityVersionForUploads).Append("\n");
            sb.Append("  ModerationEmail: ").Append(ModerationEmail).Append("\n");
            sb.Append("  NotAllowedToSelectAvatarInPrivateWorldMessage: ").Append(NotAllowedToSelectAvatarInPrivateWorldMessage).Append("\n");
            sb.Append("  OfflineAnalysis: ").Append(OfflineAnalysis).Append("\n");
            sb.Append("  PhotonNameserverOverrides: ").Append(PhotonNameserverOverrides).Append("\n");
            sb.Append("  PhotonPublicKeys: ").Append(PhotonPublicKeys).Append("\n");
            sb.Append("  ReportCategories: ").Append(ReportCategories).Append("\n");
            sb.Append("  ReportFormUrl: ").Append(ReportFormUrl).Append("\n");
            sb.Append("  ReportOptions: ").Append(ReportOptions).Append("\n");
            sb.Append("  ReportReasons: ").Append(ReportReasons).Append("\n");
            sb.Append("  RequireAgeVerificationBetaTag: ").Append(RequireAgeVerificationBetaTag).Append("\n");
            sb.Append("  SdkDeveloperFaqUrl: ").Append(SdkDeveloperFaqUrl).Append("\n");
            sb.Append("  SdkDiscordUrl: ").Append(SdkDiscordUrl).Append("\n");
            sb.Append("  SdkNotAllowedToPublishMessage: ").Append(SdkNotAllowedToPublishMessage).Append("\n");
            sb.Append("  SdkUnityVersion: ").Append(SdkUnityVersion).Append("\n");
            sb.Append("  StringHostUrlList: ").Append(StringHostUrlList).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("  SupportFormUrl: ").Append(SupportFormUrl).Append("\n");
            sb.Append("  Timekeeping: ").Append(Timekeeping).Append("\n");
            sb.Append("  TimeOutWorldId: ").Append(TimeOutWorldId).Append("\n");
            sb.Append("  TutorialWorldId: ").Append(TutorialWorldId).Append("\n");
            sb.Append("  UpdateRateMsMaximum: ").Append(UpdateRateMsMaximum).Append("\n");
            sb.Append("  UpdateRateMsMinimum: ").Append(UpdateRateMsMinimum).Append("\n");
            sb.Append("  UpdateRateMsNormal: ").Append(UpdateRateMsNormal).Append("\n");
            sb.Append("  UpdateRateMsUdonManual: ").Append(UpdateRateMsUdonManual).Append("\n");
            sb.Append("  UploadAnalysisPercent: ").Append(UploadAnalysisPercent).Append("\n");
            sb.Append("  UrlList: ").Append(UrlList).Append("\n");
            sb.Append("  UseReliableUdpForVoice: ").Append(UseReliableUdpForVoice).Append("\n");
            sb.Append("  ViveWindowsUrl: ").Append(ViveWindowsUrl).Append("\n");
            sb.Append("  WhiteListedAssetUrls: ").Append(WhiteListedAssetUrls).Append("\n");
            sb.Append("  PlayerUrlResolverVersion: ").Append(PlayerUrlResolverVersion).Append("\n");
            sb.Append("  PlayerUrlResolverSha1: ").Append(PlayerUrlResolverSha1).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  WebsocketMaxFriendsRefreshDelay: ").Append(WebsocketMaxFriendsRefreshDelay).Append("\n");
            sb.Append("  WebsocketQuickReconnectTime: ").Append(WebsocketQuickReconnectTime).Append("\n");
            sb.Append("  WebsocketReconnectMaxDelay: ").Append(WebsocketReconnectMaxDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APIConfig);
        }

        /// <summary>
        /// Returns true if APIConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of APIConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APIConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VoiceEnableDegradation == input.VoiceEnableDegradation ||
                    this.VoiceEnableDegradation.Equals(input.VoiceEnableDegradation)
                ) && 
                (
                    this.VoiceEnableReceiverLimiting == input.VoiceEnableReceiverLimiting ||
                    this.VoiceEnableReceiverLimiting.Equals(input.VoiceEnableReceiverLimiting)
                ) && 
                (
                    this.AccessLogsUrls == input.AccessLogsUrls ||
                    (this.AccessLogsUrls != null &&
                    this.AccessLogsUrls.Equals(input.AccessLogsUrls))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AgeVerificationInviteVisible == input.AgeVerificationInviteVisible ||
                    this.AgeVerificationInviteVisible.Equals(input.AgeVerificationInviteVisible)
                ) && 
                (
                    this.AgeVerificationP == input.AgeVerificationP ||
                    this.AgeVerificationP.Equals(input.AgeVerificationP)
                ) && 
                (
                    this.AgeVerificationStatusVisible == input.AgeVerificationStatusVisible ||
                    this.AgeVerificationStatusVisible.Equals(input.AgeVerificationStatusVisible)
                ) && 
                (
                    this.AnalysisMaxRetries == input.AnalysisMaxRetries ||
                    this.AnalysisMaxRetries.Equals(input.AnalysisMaxRetries)
                ) && 
                (
                    this.AnalysisRetryInterval == input.AnalysisRetryInterval ||
                    this.AnalysisRetryInterval.Equals(input.AnalysisRetryInterval)
                ) && 
                (
                    this.Announcements == input.Announcements ||
                    this.Announcements != null &&
                    input.Announcements != null &&
                    this.Announcements.SequenceEqual(input.Announcements)
                ) && 
                (
                    this.AnalyticsSegmentNewUIPctOfUsers == input.AnalyticsSegmentNewUIPctOfUsers ||
                    this.AnalyticsSegmentNewUIPctOfUsers.Equals(input.AnalyticsSegmentNewUIPctOfUsers)
                ) && 
                (
                    this.AnalyticsSegmentNewUISalt == input.AnalyticsSegmentNewUISalt ||
                    (this.AnalyticsSegmentNewUISalt != null &&
                    this.AnalyticsSegmentNewUISalt.Equals(input.AnalyticsSegmentNewUISalt))
                ) && 
                (
                    this.AvailableLanguageCodes == input.AvailableLanguageCodes ||
                    this.AvailableLanguageCodes != null &&
                    input.AvailableLanguageCodes != null &&
                    this.AvailableLanguageCodes.SequenceEqual(input.AvailableLanguageCodes)
                ) && 
                (
                    this.AvailableLanguages == input.AvailableLanguages ||
                    this.AvailableLanguages != null &&
                    input.AvailableLanguages != null &&
                    this.AvailableLanguages.SequenceEqual(input.AvailableLanguages)
                ) && 
                (
                    this.AvatarPerfLimiter == input.AvatarPerfLimiter ||
                    (this.AvatarPerfLimiter != null &&
                    this.AvatarPerfLimiter.Equals(input.AvatarPerfLimiter))
                ) && 
                (
                    this.ChatboxLogBufferSeconds == input.ChatboxLogBufferSeconds ||
                    this.ChatboxLogBufferSeconds.Equals(input.ChatboxLogBufferSeconds)
                ) && 
                (
                    this.ClientApiKey == input.ClientApiKey ||
                    (this.ClientApiKey != null &&
                    this.ClientApiKey.Equals(input.ClientApiKey))
                ) && 
                (
                    this.ClientBPSCeiling == input.ClientBPSCeiling ||
                    this.ClientBPSCeiling.Equals(input.ClientBPSCeiling)
                ) && 
                (
                    this.ClientDisconnectTimeout == input.ClientDisconnectTimeout ||
                    this.ClientDisconnectTimeout.Equals(input.ClientDisconnectTimeout)
                ) && 
                (
                    this.ClientNetDispatchThread == input.ClientNetDispatchThread ||
                    this.ClientNetDispatchThread.Equals(input.ClientNetDispatchThread)
                ) && 
                (
                    this.ClientNetDispatchThreadMobile == input.ClientNetDispatchThreadMobile ||
                    this.ClientNetDispatchThreadMobile.Equals(input.ClientNetDispatchThreadMobile)
                ) && 
                (
                    this.ClientNetInThread == input.ClientNetInThread ||
                    this.ClientNetInThread.Equals(input.ClientNetInThread)
                ) && 
                (
                    this.ClientNetInThread2 == input.ClientNetInThread2 ||
                    this.ClientNetInThread2.Equals(input.ClientNetInThread2)
                ) && 
                (
                    this.ClientNetInThreadMobile == input.ClientNetInThreadMobile ||
                    this.ClientNetInThreadMobile.Equals(input.ClientNetInThreadMobile)
                ) && 
                (
                    this.ClientNetInThreadMobile2 == input.ClientNetInThreadMobile2 ||
                    this.ClientNetInThreadMobile2.Equals(input.ClientNetInThreadMobile2)
                ) && 
                (
                    this.ClientNetOutThread == input.ClientNetOutThread ||
                    this.ClientNetOutThread.Equals(input.ClientNetOutThread)
                ) && 
                (
                    this.ClientNetOutThread2 == input.ClientNetOutThread2 ||
                    this.ClientNetOutThread2.Equals(input.ClientNetOutThread2)
                ) && 
                (
                    this.ClientNetOutThreadMobile == input.ClientNetOutThreadMobile ||
                    this.ClientNetOutThreadMobile.Equals(input.ClientNetOutThreadMobile)
                ) && 
                (
                    this.ClientNetOutThreadMobile2 == input.ClientNetOutThreadMobile2 ||
                    this.ClientNetOutThreadMobile2.Equals(input.ClientNetOutThreadMobile2)
                ) && 
                (
                    this.ClientQR == input.ClientQR ||
                    this.ClientQR.Equals(input.ClientQR)
                ) && 
                (
                    this.ClientReservedPlayerBPS == input.ClientReservedPlayerBPS ||
                    this.ClientReservedPlayerBPS.Equals(input.ClientReservedPlayerBPS)
                ) && 
                (
                    this.ClientSentCountAllowance == input.ClientSentCountAllowance ||
                    this.ClientSentCountAllowance.Equals(input.ClientSentCountAllowance)
                ) && 
                (
                    this.Constants == input.Constants ||
                    (this.Constants != null &&
                    this.Constants.Equals(input.Constants))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.CopyrightEmail == input.CopyrightEmail ||
                    (this.CopyrightEmail != null &&
                    this.CopyrightEmail.Equals(input.CopyrightEmail))
                ) && 
                (
                    this.CurrentPrivacyVersion == input.CurrentPrivacyVersion ||
                    this.CurrentPrivacyVersion.Equals(input.CurrentPrivacyVersion)
                ) && 
                (
                    this.CurrentTOSVersion == input.CurrentTOSVersion ||
                    this.CurrentTOSVersion.Equals(input.CurrentTOSVersion)
                ) && 
                (
                    this.DefaultAvatar == input.DefaultAvatar ||
                    (this.DefaultAvatar != null &&
                    this.DefaultAvatar.Equals(input.DefaultAvatar))
                ) && 
                (
                    this.DefaultStickerSet == input.DefaultStickerSet ||
                    (this.DefaultStickerSet != null &&
                    this.DefaultStickerSet.Equals(input.DefaultStickerSet))
                ) && 
                (
                    this.DevLanguageCodes == input.DevLanguageCodes ||
                    this.DevLanguageCodes != null &&
                    input.DevLanguageCodes != null &&
                    this.DevLanguageCodes.SequenceEqual(input.DevLanguageCodes)
                ) && 
                (
                    this.DevSdkUrl == input.DevSdkUrl ||
                    (this.DevSdkUrl != null &&
                    this.DevSdkUrl.Equals(input.DevSdkUrl))
                ) && 
                (
                    this.DevSdkVersion == input.DevSdkVersion ||
                    (this.DevSdkVersion != null &&
                    this.DevSdkVersion.Equals(input.DevSdkVersion))
                ) && 
                (
                    this.DisCountdown == input.DisCountdown ||
                    (this.DisCountdown != null &&
                    this.DisCountdown.Equals(input.DisCountdown))
                ) && 
                (
                    this.DisableAVProInProton == input.DisableAVProInProton ||
                    this.DisableAVProInProton.Equals(input.DisableAVProInProton)
                ) && 
                (
                    this.DisableAvatarCopying == input.DisableAvatarCopying ||
                    this.DisableAvatarCopying.Equals(input.DisableAvatarCopying)
                ) && 
                (
                    this.DisableAvatarGating == input.DisableAvatarGating ||
                    this.DisableAvatarGating.Equals(input.DisableAvatarGating)
                ) && 
                (
                    this.DisableCommunityLabs == input.DisableCommunityLabs ||
                    this.DisableCommunityLabs.Equals(input.DisableCommunityLabs)
                ) && 
                (
                    this.DisableCommunityLabsPromotion == input.DisableCommunityLabsPromotion ||
                    this.DisableCommunityLabsPromotion.Equals(input.DisableCommunityLabsPromotion)
                ) && 
                (
                    this.DisableEmail == input.DisableEmail ||
                    this.DisableEmail.Equals(input.DisableEmail)
                ) && 
                (
                    this.DisableCaptcha == input.DisableCaptcha ||
                    this.DisableCaptcha.Equals(input.DisableCaptcha)
                ) && 
                (
                    this.DisableEventStream == input.DisableEventStream ||
                    this.DisableEventStream.Equals(input.DisableEventStream)
                ) && 
                (
                    this.DisableFeedbackGating == input.DisableFeedbackGating ||
                    this.DisableFeedbackGating.Equals(input.DisableFeedbackGating)
                ) && 
                (
                    this.DisableFrontendBuilds == input.DisableFrontendBuilds ||
                    this.DisableFrontendBuilds.Equals(input.DisableFrontendBuilds)
                ) && 
                (
                    this.DisableGiftDrops == input.DisableGiftDrops ||
                    this.DisableGiftDrops.Equals(input.DisableGiftDrops)
                ) && 
                (
                    this.DisableHello == input.DisableHello ||
                    this.DisableHello.Equals(input.DisableHello)
                ) && 
                (
                    this.DisableOculusSubs == input.DisableOculusSubs ||
                    this.DisableOculusSubs.Equals(input.DisableOculusSubs)
                ) && 
                (
                    this.DisableRegistration == input.DisableRegistration ||
                    this.DisableRegistration.Equals(input.DisableRegistration)
                ) && 
                (
                    this.DisableSteamNetworking == input.DisableSteamNetworking ||
                    this.DisableSteamNetworking.Equals(input.DisableSteamNetworking)
                ) && 
                (
                    this.DisableTwoFactorAuth == input.DisableTwoFactorAuth ||
                    this.DisableTwoFactorAuth.Equals(input.DisableTwoFactorAuth)
                ) && 
                (
                    this.DisableUdon == input.DisableUdon ||
                    this.DisableUdon.Equals(input.DisableUdon)
                ) && 
                (
                    this.DisableUpgradeAccount == input.DisableUpgradeAccount ||
                    this.DisableUpgradeAccount.Equals(input.DisableUpgradeAccount)
                ) && 
                (
                    this.DownloadLinkWindows == input.DownloadLinkWindows ||
                    (this.DownloadLinkWindows != null &&
                    this.DownloadLinkWindows.Equals(input.DownloadLinkWindows))
                ) && 
                (
                    this.DownloadUrls == input.DownloadUrls ||
                    (this.DownloadUrls != null &&
                    this.DownloadUrls.Equals(input.DownloadUrls))
                ) && 
                (
                    this.DynamicWorldRows == input.DynamicWorldRows ||
                    this.DynamicWorldRows != null &&
                    input.DynamicWorldRows != null &&
                    this.DynamicWorldRows.SequenceEqual(input.DynamicWorldRows)
                ) && 
                (
                    this.EconomyPauseEnd == input.EconomyPauseEnd ||
                    (this.EconomyPauseEnd != null &&
                    this.EconomyPauseEnd.Equals(input.EconomyPauseEnd))
                ) && 
                (
                    this.EconomyPauseStart == input.EconomyPauseStart ||
                    (this.EconomyPauseStart != null &&
                    this.EconomyPauseStart.Equals(input.EconomyPauseStart))
                ) && 
                (
                    this.EconomyState == input.EconomyState ||
                    this.EconomyState.Equals(input.EconomyState)
                ) && 
                (
                    this.Events == input.Events ||
                    (this.Events != null &&
                    this.Events.Equals(input.Events))
                ) && 
                (
                    this.ForceUseLatestWorld == input.ForceUseLatestWorld ||
                    this.ForceUseLatestWorld.Equals(input.ForceUseLatestWorld)
                ) && 
                (
                    this.GiftDisplayType == input.GiftDisplayType ||
                    (this.GiftDisplayType != null &&
                    this.GiftDisplayType.Equals(input.GiftDisplayType))
                ) && 
                (
                    this.GoogleApiClientId == input.GoogleApiClientId ||
                    (this.GoogleApiClientId != null &&
                    this.GoogleApiClientId.Equals(input.GoogleApiClientId))
                ) && 
                (
                    this.HomeWorldId == input.HomeWorldId ||
                    (this.HomeWorldId != null &&
                    this.HomeWorldId.Equals(input.HomeWorldId))
                ) && 
                (
                    this.HomepageRedirectTarget == input.HomepageRedirectTarget ||
                    (this.HomepageRedirectTarget != null &&
                    this.HomepageRedirectTarget.Equals(input.HomepageRedirectTarget))
                ) && 
                (
                    this.HubWorldId == input.HubWorldId ||
                    (this.HubWorldId != null &&
                    this.HubWorldId.Equals(input.HubWorldId))
                ) && 
                (
                    this.ImageHostUrlList == input.ImageHostUrlList ||
                    this.ImageHostUrlList != null &&
                    input.ImageHostUrlList != null &&
                    this.ImageHostUrlList.SequenceEqual(input.ImageHostUrlList)
                ) && 
                (
                    this.JobsEmail == input.JobsEmail ||
                    (this.JobsEmail != null &&
                    this.JobsEmail.Equals(input.JobsEmail))
                ) && 
                (
                    this.MinSupportedClientBuildNumber == input.MinSupportedClientBuildNumber ||
                    (this.MinSupportedClientBuildNumber != null &&
                    this.MinSupportedClientBuildNumber.Equals(input.MinSupportedClientBuildNumber))
                ) && 
                (
                    this.MinimumUnityVersionForUploads == input.MinimumUnityVersionForUploads ||
                    (this.MinimumUnityVersionForUploads != null &&
                    this.MinimumUnityVersionForUploads.Equals(input.MinimumUnityVersionForUploads))
                ) && 
                (
                    this.ModerationEmail == input.ModerationEmail ||
                    (this.ModerationEmail != null &&
                    this.ModerationEmail.Equals(input.ModerationEmail))
                ) && 
                (
                    this.NotAllowedToSelectAvatarInPrivateWorldMessage == input.NotAllowedToSelectAvatarInPrivateWorldMessage ||
                    (this.NotAllowedToSelectAvatarInPrivateWorldMessage != null &&
                    this.NotAllowedToSelectAvatarInPrivateWorldMessage.Equals(input.NotAllowedToSelectAvatarInPrivateWorldMessage))
                ) && 
                (
                    this.OfflineAnalysis == input.OfflineAnalysis ||
                    (this.OfflineAnalysis != null &&
                    this.OfflineAnalysis.Equals(input.OfflineAnalysis))
                ) && 
                (
                    this.PhotonNameserverOverrides == input.PhotonNameserverOverrides ||
                    this.PhotonNameserverOverrides != null &&
                    input.PhotonNameserverOverrides != null &&
                    this.PhotonNameserverOverrides.SequenceEqual(input.PhotonNameserverOverrides)
                ) && 
                (
                    this.PhotonPublicKeys == input.PhotonPublicKeys ||
                    this.PhotonPublicKeys != null &&
                    input.PhotonPublicKeys != null &&
                    this.PhotonPublicKeys.SequenceEqual(input.PhotonPublicKeys)
                ) && 
                (
                    this.ReportCategories == input.ReportCategories ||
                    (this.ReportCategories != null &&
                    this.ReportCategories.Equals(input.ReportCategories))
                ) && 
                (
                    this.ReportFormUrl == input.ReportFormUrl ||
                    (this.ReportFormUrl != null &&
                    this.ReportFormUrl.Equals(input.ReportFormUrl))
                ) && 
                (
                    this.ReportOptions == input.ReportOptions ||
                    (this.ReportOptions != null &&
                    this.ReportOptions.Equals(input.ReportOptions))
                ) && 
                (
                    this.ReportReasons == input.ReportReasons ||
                    (this.ReportReasons != null &&
                    this.ReportReasons.Equals(input.ReportReasons))
                ) && 
                (
                    this.RequireAgeVerificationBetaTag == input.RequireAgeVerificationBetaTag ||
                    this.RequireAgeVerificationBetaTag.Equals(input.RequireAgeVerificationBetaTag)
                ) && 
                (
                    this.SdkDeveloperFaqUrl == input.SdkDeveloperFaqUrl ||
                    (this.SdkDeveloperFaqUrl != null &&
                    this.SdkDeveloperFaqUrl.Equals(input.SdkDeveloperFaqUrl))
                ) && 
                (
                    this.SdkDiscordUrl == input.SdkDiscordUrl ||
                    (this.SdkDiscordUrl != null &&
                    this.SdkDiscordUrl.Equals(input.SdkDiscordUrl))
                ) && 
                (
                    this.SdkNotAllowedToPublishMessage == input.SdkNotAllowedToPublishMessage ||
                    (this.SdkNotAllowedToPublishMessage != null &&
                    this.SdkNotAllowedToPublishMessage.Equals(input.SdkNotAllowedToPublishMessage))
                ) && 
                (
                    this.SdkUnityVersion == input.SdkUnityVersion ||
                    (this.SdkUnityVersion != null &&
                    this.SdkUnityVersion.Equals(input.SdkUnityVersion))
                ) && 
                (
                    this.StringHostUrlList == input.StringHostUrlList ||
                    this.StringHostUrlList != null &&
                    input.StringHostUrlList != null &&
                    this.StringHostUrlList.SequenceEqual(input.StringHostUrlList)
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                ) && 
                (
                    this.SupportFormUrl == input.SupportFormUrl ||
                    (this.SupportFormUrl != null &&
                    this.SupportFormUrl.Equals(input.SupportFormUrl))
                ) && 
                (
                    this.Timekeeping == input.Timekeeping ||
                    this.Timekeeping.Equals(input.Timekeeping)
                ) && 
                (
                    this.TimeOutWorldId == input.TimeOutWorldId ||
                    (this.TimeOutWorldId != null &&
                    this.TimeOutWorldId.Equals(input.TimeOutWorldId))
                ) && 
                (
                    this.TutorialWorldId == input.TutorialWorldId ||
                    (this.TutorialWorldId != null &&
                    this.TutorialWorldId.Equals(input.TutorialWorldId))
                ) && 
                (
                    this.UpdateRateMsMaximum == input.UpdateRateMsMaximum ||
                    this.UpdateRateMsMaximum.Equals(input.UpdateRateMsMaximum)
                ) && 
                (
                    this.UpdateRateMsMinimum == input.UpdateRateMsMinimum ||
                    this.UpdateRateMsMinimum.Equals(input.UpdateRateMsMinimum)
                ) && 
                (
                    this.UpdateRateMsNormal == input.UpdateRateMsNormal ||
                    this.UpdateRateMsNormal.Equals(input.UpdateRateMsNormal)
                ) && 
                (
                    this.UpdateRateMsUdonManual == input.UpdateRateMsUdonManual ||
                    this.UpdateRateMsUdonManual.Equals(input.UpdateRateMsUdonManual)
                ) && 
                (
                    this.UploadAnalysisPercent == input.UploadAnalysisPercent ||
                    this.UploadAnalysisPercent.Equals(input.UploadAnalysisPercent)
                ) && 
                (
                    this.UrlList == input.UrlList ||
                    this.UrlList != null &&
                    input.UrlList != null &&
                    this.UrlList.SequenceEqual(input.UrlList)
                ) && 
                (
                    this.UseReliableUdpForVoice == input.UseReliableUdpForVoice ||
                    this.UseReliableUdpForVoice.Equals(input.UseReliableUdpForVoice)
                ) && 
                (
                    this.ViveWindowsUrl == input.ViveWindowsUrl ||
                    (this.ViveWindowsUrl != null &&
                    this.ViveWindowsUrl.Equals(input.ViveWindowsUrl))
                ) && 
                (
                    this.WhiteListedAssetUrls == input.WhiteListedAssetUrls ||
                    this.WhiteListedAssetUrls != null &&
                    input.WhiteListedAssetUrls != null &&
                    this.WhiteListedAssetUrls.SequenceEqual(input.WhiteListedAssetUrls)
                ) && 
                (
                    this.PlayerUrlResolverVersion == input.PlayerUrlResolverVersion ||
                    (this.PlayerUrlResolverVersion != null &&
                    this.PlayerUrlResolverVersion.Equals(input.PlayerUrlResolverVersion))
                ) && 
                (
                    this.PlayerUrlResolverSha1 == input.PlayerUrlResolverSha1 ||
                    (this.PlayerUrlResolverSha1 != null &&
                    this.PlayerUrlResolverSha1.Equals(input.PlayerUrlResolverSha1))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.WebsocketMaxFriendsRefreshDelay == input.WebsocketMaxFriendsRefreshDelay ||
                    this.WebsocketMaxFriendsRefreshDelay.Equals(input.WebsocketMaxFriendsRefreshDelay)
                ) && 
                (
                    this.WebsocketQuickReconnectTime == input.WebsocketQuickReconnectTime ||
                    this.WebsocketQuickReconnectTime.Equals(input.WebsocketQuickReconnectTime)
                ) && 
                (
                    this.WebsocketReconnectMaxDelay == input.WebsocketReconnectMaxDelay ||
                    this.WebsocketReconnectMaxDelay.Equals(input.WebsocketReconnectMaxDelay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VoiceEnableDegradation.GetHashCode();
                hashCode = (hashCode * 59) + this.VoiceEnableReceiverLimiting.GetHashCode();
                if (this.AccessLogsUrls != null)
                {
                    hashCode = (hashCode * 59) + this.AccessLogsUrls.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AgeVerificationInviteVisible.GetHashCode();
                hashCode = (hashCode * 59) + this.AgeVerificationP.GetHashCode();
                hashCode = (hashCode * 59) + this.AgeVerificationStatusVisible.GetHashCode();
                hashCode = (hashCode * 59) + this.AnalysisMaxRetries.GetHashCode();
                hashCode = (hashCode * 59) + this.AnalysisRetryInterval.GetHashCode();
                if (this.Announcements != null)
                {
                    hashCode = (hashCode * 59) + this.Announcements.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnalyticsSegmentNewUIPctOfUsers.GetHashCode();
                if (this.AnalyticsSegmentNewUISalt != null)
                {
                    hashCode = (hashCode * 59) + this.AnalyticsSegmentNewUISalt.GetHashCode();
                }
                if (this.AvailableLanguageCodes != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableLanguageCodes.GetHashCode();
                }
                if (this.AvailableLanguages != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableLanguages.GetHashCode();
                }
                if (this.AvatarPerfLimiter != null)
                {
                    hashCode = (hashCode * 59) + this.AvatarPerfLimiter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChatboxLogBufferSeconds.GetHashCode();
                if (this.ClientApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ClientApiKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientBPSCeiling.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientDisconnectTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetDispatchThread.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetDispatchThreadMobile.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetInThread.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetInThread2.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetInThreadMobile.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetInThreadMobile2.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetOutThread.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetOutThread2.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetOutThreadMobile.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientNetOutThreadMobile2.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientQR.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientReservedPlayerBPS.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientSentCountAllowance.GetHashCode();
                if (this.Constants != null)
                {
                    hashCode = (hashCode * 59) + this.Constants.GetHashCode();
                }
                if (this.ContactEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmail.GetHashCode();
                }
                if (this.CopyrightEmail != null)
                {
                    hashCode = (hashCode * 59) + this.CopyrightEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentPrivacyVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentTOSVersion.GetHashCode();
                if (this.DefaultAvatar != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultAvatar.GetHashCode();
                }
                if (this.DefaultStickerSet != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultStickerSet.GetHashCode();
                }
                if (this.DevLanguageCodes != null)
                {
                    hashCode = (hashCode * 59) + this.DevLanguageCodes.GetHashCode();
                }
                if (this.DevSdkUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DevSdkUrl.GetHashCode();
                }
                if (this.DevSdkVersion != null)
                {
                    hashCode = (hashCode * 59) + this.DevSdkVersion.GetHashCode();
                }
                if (this.DisCountdown != null)
                {
                    hashCode = (hashCode * 59) + this.DisCountdown.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisableAVProInProton.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableAvatarCopying.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableAvatarGating.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableCommunityLabs.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableCommunityLabsPromotion.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableCaptcha.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableEventStream.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableFeedbackGating.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableFrontendBuilds.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableGiftDrops.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableHello.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableOculusSubs.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableRegistration.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableSteamNetworking.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableTwoFactorAuth.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableUdon.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableUpgradeAccount.GetHashCode();
                if (this.DownloadLinkWindows != null)
                {
                    hashCode = (hashCode * 59) + this.DownloadLinkWindows.GetHashCode();
                }
                if (this.DownloadUrls != null)
                {
                    hashCode = (hashCode * 59) + this.DownloadUrls.GetHashCode();
                }
                if (this.DynamicWorldRows != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicWorldRows.GetHashCode();
                }
                if (this.EconomyPauseEnd != null)
                {
                    hashCode = (hashCode * 59) + this.EconomyPauseEnd.GetHashCode();
                }
                if (this.EconomyPauseStart != null)
                {
                    hashCode = (hashCode * 59) + this.EconomyPauseStart.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EconomyState.GetHashCode();
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForceUseLatestWorld.GetHashCode();
                if (this.GiftDisplayType != null)
                {
                    hashCode = (hashCode * 59) + this.GiftDisplayType.GetHashCode();
                }
                if (this.GoogleApiClientId != null)
                {
                    hashCode = (hashCode * 59) + this.GoogleApiClientId.GetHashCode();
                }
                if (this.HomeWorldId != null)
                {
                    hashCode = (hashCode * 59) + this.HomeWorldId.GetHashCode();
                }
                if (this.HomepageRedirectTarget != null)
                {
                    hashCode = (hashCode * 59) + this.HomepageRedirectTarget.GetHashCode();
                }
                if (this.HubWorldId != null)
                {
                    hashCode = (hashCode * 59) + this.HubWorldId.GetHashCode();
                }
                if (this.ImageHostUrlList != null)
                {
                    hashCode = (hashCode * 59) + this.ImageHostUrlList.GetHashCode();
                }
                if (this.JobsEmail != null)
                {
                    hashCode = (hashCode * 59) + this.JobsEmail.GetHashCode();
                }
                if (this.MinSupportedClientBuildNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MinSupportedClientBuildNumber.GetHashCode();
                }
                if (this.MinimumUnityVersionForUploads != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumUnityVersionForUploads.GetHashCode();
                }
                if (this.ModerationEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ModerationEmail.GetHashCode();
                }
                if (this.NotAllowedToSelectAvatarInPrivateWorldMessage != null)
                {
                    hashCode = (hashCode * 59) + this.NotAllowedToSelectAvatarInPrivateWorldMessage.GetHashCode();
                }
                if (this.OfflineAnalysis != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineAnalysis.GetHashCode();
                }
                if (this.PhotonNameserverOverrides != null)
                {
                    hashCode = (hashCode * 59) + this.PhotonNameserverOverrides.GetHashCode();
                }
                if (this.PhotonPublicKeys != null)
                {
                    hashCode = (hashCode * 59) + this.PhotonPublicKeys.GetHashCode();
                }
                if (this.ReportCategories != null)
                {
                    hashCode = (hashCode * 59) + this.ReportCategories.GetHashCode();
                }
                if (this.ReportFormUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReportFormUrl.GetHashCode();
                }
                if (this.ReportOptions != null)
                {
                    hashCode = (hashCode * 59) + this.ReportOptions.GetHashCode();
                }
                if (this.ReportReasons != null)
                {
                    hashCode = (hashCode * 59) + this.ReportReasons.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequireAgeVerificationBetaTag.GetHashCode();
                if (this.SdkDeveloperFaqUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SdkDeveloperFaqUrl.GetHashCode();
                }
                if (this.SdkDiscordUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SdkDiscordUrl.GetHashCode();
                }
                if (this.SdkNotAllowedToPublishMessage != null)
                {
                    hashCode = (hashCode * 59) + this.SdkNotAllowedToPublishMessage.GetHashCode();
                }
                if (this.SdkUnityVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SdkUnityVersion.GetHashCode();
                }
                if (this.StringHostUrlList != null)
                {
                    hashCode = (hashCode * 59) + this.StringHostUrlList.GetHashCode();
                }
                if (this.SupportEmail != null)
                {
                    hashCode = (hashCode * 59) + this.SupportEmail.GetHashCode();
                }
                if (this.SupportFormUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SupportFormUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timekeeping.GetHashCode();
                if (this.TimeOutWorldId != null)
                {
                    hashCode = (hashCode * 59) + this.TimeOutWorldId.GetHashCode();
                }
                if (this.TutorialWorldId != null)
                {
                    hashCode = (hashCode * 59) + this.TutorialWorldId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdateRateMsMaximum.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateRateMsMinimum.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateRateMsNormal.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateRateMsUdonManual.GetHashCode();
                hashCode = (hashCode * 59) + this.UploadAnalysisPercent.GetHashCode();
                if (this.UrlList != null)
                {
                    hashCode = (hashCode * 59) + this.UrlList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseReliableUdpForVoice.GetHashCode();
                if (this.ViveWindowsUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ViveWindowsUrl.GetHashCode();
                }
                if (this.WhiteListedAssetUrls != null)
                {
                    hashCode = (hashCode * 59) + this.WhiteListedAssetUrls.GetHashCode();
                }
                if (this.PlayerUrlResolverVersion != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerUrlResolverVersion.GetHashCode();
                }
                if (this.PlayerUrlResolverSha1 != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerUrlResolverSha1.GetHashCode();
                }
                if (this.PublicKey != null)
                {
                    hashCode = (hashCode * 59) + this.PublicKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WebsocketMaxFriendsRefreshDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.WebsocketQuickReconnectTime.GetHashCode();
                hashCode = (hashCode * 59) + this.WebsocketReconnectMaxDelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Address (string) minLength
            if (this.Address != null && this.Address.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be greater than 1.", new [] { "Address" });
            }

            // ClientApiKey (string) minLength
            if (this.ClientApiKey != null && this.ClientApiKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientApiKey, length must be greater than 1.", new [] { "ClientApiKey" });
            }

            // ContactEmail (string) minLength
            if (this.ContactEmail != null && this.ContactEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactEmail, length must be greater than 1.", new [] { "ContactEmail" });
            }

            // CopyrightEmail (string) minLength
            if (this.CopyrightEmail != null && this.CopyrightEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CopyrightEmail, length must be greater than 1.", new [] { "CopyrightEmail" });
            }

            // CurrentTOSVersion (int) minimum
            if (this.CurrentTOSVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentTOSVersion, must be a value greater than or equal to 0.", new [] { "CurrentTOSVersion" });
            }

            // DevSdkUrl (string) minLength
            if (this.DevSdkUrl != null && this.DevSdkUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DevSdkUrl, length must be greater than 1.", new [] { "DevSdkUrl" });
            }

            // DevSdkVersion (string) minLength
            if (this.DevSdkVersion != null && this.DevSdkVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DevSdkVersion, length must be greater than 1.", new [] { "DevSdkVersion" });
            }

            // DownloadLinkWindows (string) minLength
            if (this.DownloadLinkWindows != null && this.DownloadLinkWindows.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DownloadLinkWindows, length must be greater than 1.", new [] { "DownloadLinkWindows" });
            }

            // HomepageRedirectTarget (string) minLength
            if (this.HomepageRedirectTarget != null && this.HomepageRedirectTarget.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomepageRedirectTarget, length must be greater than 1.", new [] { "HomepageRedirectTarget" });
            }

            // JobsEmail (string) minLength
            if (this.JobsEmail != null && this.JobsEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobsEmail, length must be greater than 1.", new [] { "JobsEmail" });
            }

            // ModerationEmail (string) minLength
            if (this.ModerationEmail != null && this.ModerationEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModerationEmail, length must be greater than 1.", new [] { "ModerationEmail" });
            }

            // NotAllowedToSelectAvatarInPrivateWorldMessage (string) minLength
            if (this.NotAllowedToSelectAvatarInPrivateWorldMessage != null && this.NotAllowedToSelectAvatarInPrivateWorldMessage.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotAllowedToSelectAvatarInPrivateWorldMessage, length must be greater than 1.", new [] { "NotAllowedToSelectAvatarInPrivateWorldMessage" });
            }

            // SdkDeveloperFaqUrl (string) minLength
            if (this.SdkDeveloperFaqUrl != null && this.SdkDeveloperFaqUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkDeveloperFaqUrl, length must be greater than 1.", new [] { "SdkDeveloperFaqUrl" });
            }

            // SdkDiscordUrl (string) minLength
            if (this.SdkDiscordUrl != null && this.SdkDiscordUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkDiscordUrl, length must be greater than 1.", new [] { "SdkDiscordUrl" });
            }

            // SdkNotAllowedToPublishMessage (string) minLength
            if (this.SdkNotAllowedToPublishMessage != null && this.SdkNotAllowedToPublishMessage.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkNotAllowedToPublishMessage, length must be greater than 1.", new [] { "SdkNotAllowedToPublishMessage" });
            }

            // SdkUnityVersion (string) minLength
            if (this.SdkUnityVersion != null && this.SdkUnityVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkUnityVersion, length must be greater than 1.", new [] { "SdkUnityVersion" });
            }

            // SupportEmail (string) minLength
            if (this.SupportEmail != null && this.SupportEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupportEmail, length must be greater than 1.", new [] { "SupportEmail" });
            }

            // ViveWindowsUrl (string) minLength
            if (this.ViveWindowsUrl != null && this.ViveWindowsUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ViveWindowsUrl, length must be greater than 1.", new [] { "ViveWindowsUrl" });
            }

            // PlayerUrlResolverVersion (string) minLength
            if (this.PlayerUrlResolverVersion != null && this.PlayerUrlResolverVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlayerUrlResolverVersion, length must be greater than 1.", new [] { "PlayerUrlResolverVersion" });
            }

            // PlayerUrlResolverSha1 (string) minLength
            if (this.PlayerUrlResolverSha1 != null && this.PlayerUrlResolverSha1.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlayerUrlResolverSha1, length must be greater than 1.", new [] { "PlayerUrlResolverSha1" });
            }

            yield break;
        }
    }

}
