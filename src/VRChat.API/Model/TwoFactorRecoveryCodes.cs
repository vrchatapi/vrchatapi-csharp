/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// TwoFactorRecoveryCodes
    /// </summary>
    [DataContract(Name = "TwoFactorRecoveryCodes")]
    public partial class TwoFactorRecoveryCodes : IEquatable<TwoFactorRecoveryCodes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoFactorRecoveryCodes" /> class.
        /// </summary>
        /// <param name="requiresTwoFactorAuth">requiresTwoFactorAuth.</param>
        /// <param name="otp">otp.</param>
        public TwoFactorRecoveryCodes(List<string> requiresTwoFactorAuth = default(List<string>), List<TwoFactorRecoveryCodesOtpInner> otp = default(List<TwoFactorRecoveryCodesOtpInner>))
        {
            this.RequiresTwoFactorAuth = requiresTwoFactorAuth;
            this.Otp = otp;
        }

        /// <summary>
        /// Gets or Sets RequiresTwoFactorAuth
        /// </summary>
        [DataMember(Name = "requiresTwoFactorAuth", EmitDefaultValue = false)]
        public List<string> RequiresTwoFactorAuth { get; set; }

        /// <summary>
        /// Gets or Sets Otp
        /// </summary>
        [DataMember(Name = "otp", EmitDefaultValue = false)]
        public List<TwoFactorRecoveryCodesOtpInner> Otp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TwoFactorRecoveryCodes {\n");
            sb.Append("  RequiresTwoFactorAuth: ").Append(RequiresTwoFactorAuth).Append("\n");
            sb.Append("  Otp: ").Append(Otp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TwoFactorRecoveryCodes);
        }

        /// <summary>
        /// Returns true if TwoFactorRecoveryCodes instances are equal
        /// </summary>
        /// <param name="input">Instance of TwoFactorRecoveryCodes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TwoFactorRecoveryCodes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequiresTwoFactorAuth == input.RequiresTwoFactorAuth ||
                    this.RequiresTwoFactorAuth != null &&
                    input.RequiresTwoFactorAuth != null &&
                    this.RequiresTwoFactorAuth.SequenceEqual(input.RequiresTwoFactorAuth)
                ) && 
                (
                    this.Otp == input.Otp ||
                    this.Otp != null &&
                    input.Otp != null &&
                    this.Otp.SequenceEqual(input.Otp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequiresTwoFactorAuth != null)
                {
                    hashCode = (hashCode * 59) + this.RequiresTwoFactorAuth.GetHashCode();
                }
                if (this.Otp != null)
                {
                    hashCode = (hashCode * 59) + this.Otp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
