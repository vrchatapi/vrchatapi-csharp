/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// APIConfigAvatarPerfLimiter
    /// </summary>
    [DataContract(Name = "APIConfig_avatarPerfLimiter")]
    public partial class APIConfigAvatarPerfLimiter : IEquatable<APIConfigAvatarPerfLimiter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfigAvatarPerfLimiter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected APIConfigAvatarPerfLimiter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfigAvatarPerfLimiter" /> class.
        /// </summary>
        /// <param name="androidMobile">androidMobile (required).</param>
        /// <param name="pC">pC (required).</param>
        /// <param name="pico">pico (required).</param>
        /// <param name="quest">quest (required).</param>
        /// <param name="xRElite">xRElite (required).</param>
        /// <param name="iOSMobile">iOSMobile (required).</param>
        public APIConfigAvatarPerfLimiter(PerformanceLimiterInfo androidMobile = default(PerformanceLimiterInfo), PerformanceLimiterInfo pC = default(PerformanceLimiterInfo), PerformanceLimiterInfo pico = default(PerformanceLimiterInfo), PerformanceLimiterInfo quest = default(PerformanceLimiterInfo), PerformanceLimiterInfo xRElite = default(PerformanceLimiterInfo), PerformanceLimiterInfo iOSMobile = default(PerformanceLimiterInfo))
        {
            // to ensure "androidMobile" is required (not null)
            if (androidMobile == null)
            {
                throw new ArgumentNullException("androidMobile is a required property for APIConfigAvatarPerfLimiter and cannot be null");
            }
            this.AndroidMobile = androidMobile;
            // to ensure "pC" is required (not null)
            if (pC == null)
            {
                throw new ArgumentNullException("pC is a required property for APIConfigAvatarPerfLimiter and cannot be null");
            }
            this.PC = pC;
            // to ensure "pico" is required (not null)
            if (pico == null)
            {
                throw new ArgumentNullException("pico is a required property for APIConfigAvatarPerfLimiter and cannot be null");
            }
            this.Pico = pico;
            // to ensure "quest" is required (not null)
            if (quest == null)
            {
                throw new ArgumentNullException("quest is a required property for APIConfigAvatarPerfLimiter and cannot be null");
            }
            this.Quest = quest;
            // to ensure "xRElite" is required (not null)
            if (xRElite == null)
            {
                throw new ArgumentNullException("xRElite is a required property for APIConfigAvatarPerfLimiter and cannot be null");
            }
            this.XRElite = xRElite;
            // to ensure "iOSMobile" is required (not null)
            if (iOSMobile == null)
            {
                throw new ArgumentNullException("iOSMobile is a required property for APIConfigAvatarPerfLimiter and cannot be null");
            }
            this.IOSMobile = iOSMobile;
        }

        /// <summary>
        /// Gets or Sets AndroidMobile
        /// </summary>
        [DataMember(Name = "AndroidMobile", IsRequired = true, EmitDefaultValue = true)]
        public PerformanceLimiterInfo AndroidMobile { get; set; }

        /// <summary>
        /// Gets or Sets PC
        /// </summary>
        [DataMember(Name = "PC", IsRequired = true, EmitDefaultValue = true)]
        public PerformanceLimiterInfo PC { get; set; }

        /// <summary>
        /// Gets or Sets Pico
        /// </summary>
        [DataMember(Name = "Pico", IsRequired = true, EmitDefaultValue = true)]
        public PerformanceLimiterInfo Pico { get; set; }

        /// <summary>
        /// Gets or Sets Quest
        /// </summary>
        [DataMember(Name = "Quest", IsRequired = true, EmitDefaultValue = true)]
        public PerformanceLimiterInfo Quest { get; set; }

        /// <summary>
        /// Gets or Sets XRElite
        /// </summary>
        [DataMember(Name = "XRElite", IsRequired = true, EmitDefaultValue = true)]
        public PerformanceLimiterInfo XRElite { get; set; }

        /// <summary>
        /// Gets or Sets IOSMobile
        /// </summary>
        [DataMember(Name = "iOSMobile", IsRequired = true, EmitDefaultValue = true)]
        public PerformanceLimiterInfo IOSMobile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIConfigAvatarPerfLimiter {\n");
            sb.Append("  AndroidMobile: ").Append(AndroidMobile).Append("\n");
            sb.Append("  PC: ").Append(PC).Append("\n");
            sb.Append("  Pico: ").Append(Pico).Append("\n");
            sb.Append("  Quest: ").Append(Quest).Append("\n");
            sb.Append("  XRElite: ").Append(XRElite).Append("\n");
            sb.Append("  IOSMobile: ").Append(IOSMobile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APIConfigAvatarPerfLimiter);
        }

        /// <summary>
        /// Returns true if APIConfigAvatarPerfLimiter instances are equal
        /// </summary>
        /// <param name="input">Instance of APIConfigAvatarPerfLimiter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APIConfigAvatarPerfLimiter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AndroidMobile == input.AndroidMobile ||
                    (this.AndroidMobile != null &&
                    this.AndroidMobile.Equals(input.AndroidMobile))
                ) && 
                (
                    this.PC == input.PC ||
                    (this.PC != null &&
                    this.PC.Equals(input.PC))
                ) && 
                (
                    this.Pico == input.Pico ||
                    (this.Pico != null &&
                    this.Pico.Equals(input.Pico))
                ) && 
                (
                    this.Quest == input.Quest ||
                    (this.Quest != null &&
                    this.Quest.Equals(input.Quest))
                ) && 
                (
                    this.XRElite == input.XRElite ||
                    (this.XRElite != null &&
                    this.XRElite.Equals(input.XRElite))
                ) && 
                (
                    this.IOSMobile == input.IOSMobile ||
                    (this.IOSMobile != null &&
                    this.IOSMobile.Equals(input.IOSMobile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AndroidMobile != null)
                {
                    hashCode = (hashCode * 59) + this.AndroidMobile.GetHashCode();
                }
                if (this.PC != null)
                {
                    hashCode = (hashCode * 59) + this.PC.GetHashCode();
                }
                if (this.Pico != null)
                {
                    hashCode = (hashCode * 59) + this.Pico.GetHashCode();
                }
                if (this.Quest != null)
                {
                    hashCode = (hashCode * 59) + this.Quest.GetHashCode();
                }
                if (this.XRElite != null)
                {
                    hashCode = (hashCode * 59) + this.XRElite.GetHashCode();
                }
                if (this.IOSMobile != null)
                {
                    hashCode = (hashCode * 59) + this.IOSMobile.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
