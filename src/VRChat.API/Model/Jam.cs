/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// Jam
    /// </summary>
    [DataContract(Name = "Jam")]
    public partial class Jam : IEquatable<Jam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Jam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Jam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Jam" /> class.
        /// </summary>
        /// <param name="description">description (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="isVisible">isVisible (required).</param>
        /// <param name="moreInfo">moreInfo (required).</param>
        /// <param name="state">One of: - submissions_open - closed (required).</param>
        /// <param name="stateChangeDates">stateChangeDates (required).</param>
        /// <param name="submissionContentGateDate">submissionContentGateDate (required).</param>
        /// <param name="submissionContentGated">submissionContentGated (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public Jam(string description = default(string), string id = default(string), bool isVisible = default(bool), string moreInfo = default(string), string state = default(string), JamStateChangeDates stateChangeDates = default(JamStateChangeDates), DateTime? submissionContentGateDate = default(DateTime?), bool submissionContentGated = default(bool), string title = default(string), DateTime updatedAt = default(DateTime))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Jam and cannot be null");
            }
            this.Description = description;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Jam and cannot be null");
            }
            this.Id = id;
            this.IsVisible = isVisible;
            // to ensure "moreInfo" is required (not null)
            if (moreInfo == null)
            {
                throw new ArgumentNullException("moreInfo is a required property for Jam and cannot be null");
            }
            this.MoreInfo = moreInfo;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for Jam and cannot be null");
            }
            this.State = state;
            // to ensure "stateChangeDates" is required (not null)
            if (stateChangeDates == null)
            {
                throw new ArgumentNullException("stateChangeDates is a required property for Jam and cannot be null");
            }
            this.StateChangeDates = stateChangeDates;
            // to ensure "submissionContentGateDate" is required (not null)
            if (submissionContentGateDate == null)
            {
                throw new ArgumentNullException("submissionContentGateDate is a required property for Jam and cannot be null");
            }
            this.SubmissionContentGateDate = submissionContentGateDate;
            this.SubmissionContentGated = submissionContentGated;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for Jam and cannot be null");
            }
            this.Title = title;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [DataMember(Name = "isVisible", IsRequired = true, EmitDefaultValue = true)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// Gets or Sets MoreInfo
        /// </summary>
        [DataMember(Name = "moreInfo", IsRequired = true, EmitDefaultValue = true)]
        public string MoreInfo { get; set; }

        /// <summary>
        /// One of: - submissions_open - closed
        /// </summary>
        /// <value>One of: - submissions_open - closed</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets StateChangeDates
        /// </summary>
        [DataMember(Name = "stateChangeDates", IsRequired = true, EmitDefaultValue = true)]
        public JamStateChangeDates StateChangeDates { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionContentGateDate
        /// </summary>
        [DataMember(Name = "submissionContentGateDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? SubmissionContentGateDate { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionContentGated
        /// </summary>
        [DataMember(Name = "submissionContentGated", IsRequired = true, EmitDefaultValue = true)]
        public bool SubmissionContentGated { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Jam {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  MoreInfo: ").Append(MoreInfo).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateChangeDates: ").Append(StateChangeDates).Append("\n");
            sb.Append("  SubmissionContentGateDate: ").Append(SubmissionContentGateDate).Append("\n");
            sb.Append("  SubmissionContentGated: ").Append(SubmissionContentGated).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Jam);
        }

        /// <summary>
        /// Returns true if Jam instances are equal
        /// </summary>
        /// <param name="input">Instance of Jam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Jam input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsVisible == input.IsVisible ||
                    this.IsVisible.Equals(input.IsVisible)
                ) && 
                (
                    this.MoreInfo == input.MoreInfo ||
                    (this.MoreInfo != null &&
                    this.MoreInfo.Equals(input.MoreInfo))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateChangeDates == input.StateChangeDates ||
                    (this.StateChangeDates != null &&
                    this.StateChangeDates.Equals(input.StateChangeDates))
                ) && 
                (
                    this.SubmissionContentGateDate == input.SubmissionContentGateDate ||
                    (this.SubmissionContentGateDate != null &&
                    this.SubmissionContentGateDate.Equals(input.SubmissionContentGateDate))
                ) && 
                (
                    this.SubmissionContentGated == input.SubmissionContentGated ||
                    this.SubmissionContentGated.Equals(input.SubmissionContentGated)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsVisible.GetHashCode();
                if (this.MoreInfo != null)
                {
                    hashCode = (hashCode * 59) + this.MoreInfo.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.StateChangeDates != null)
                {
                    hashCode = (hashCode * 59) + this.StateChangeDates.GetHashCode();
                }
                if (this.SubmissionContentGateDate != null)
                {
                    hashCode = (hashCode * 59) + this.SubmissionContentGateDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubmissionContentGated.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // MoreInfo (string) minLength
            if (this.MoreInfo != null && this.MoreInfo.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MoreInfo, length must be greater than 1.", new [] { "MoreInfo" });
            }

            // State (string) minLength
            if (this.State != null && this.State.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be greater than 1.", new [] { "State" });
            }

            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            yield break;
        }
    }

}
