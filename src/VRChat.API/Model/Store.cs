/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// Store
    /// </summary>
    [DataContract(Name = "Store")]
    public partial class Store : IEquatable<Store>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StoreType
        /// </summary>
        [DataMember(Name = "storeType", IsRequired = true, EmitDefaultValue = true)]
        public StoreType StoreType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Store" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Store() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Store" /> class.
        /// </summary>
        /// <param name="description">description (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="sellerDisplayName">sellerDisplayName (required).</param>
        /// <param name="sellerId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
        /// <param name="storeId">storeId (required).</param>
        /// <param name="storeType">storeType (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="listingIds">Only for store type world and group.</param>
        /// <param name="listings">Only for store type world and group.</param>
        /// <param name="worldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user..</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="shelfIds">Only for store type house.</param>
        /// <param name="shelves">Only for store type house.</param>
        public Store(string description = default(string), string displayName = default(string), string id = default(string), string sellerDisplayName = default(string), string sellerId = default(string), string storeId = default(string), StoreType storeType = default(StoreType), List<string> tags = default(List<string>), List<string> listingIds = default(List<string>), List<ProductListing> listings = default(List<ProductListing>), string worldId = default(string), string groupId = default(string), List<string> shelfIds = default(List<string>), List<StoreShelf> shelves = default(List<StoreShelf>))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Store and cannot be null");
            }
            this.Description = description;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for Store and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Store and cannot be null");
            }
            this.Id = id;
            // to ensure "sellerDisplayName" is required (not null)
            if (sellerDisplayName == null)
            {
                throw new ArgumentNullException("sellerDisplayName is a required property for Store and cannot be null");
            }
            this.SellerDisplayName = sellerDisplayName;
            // to ensure "sellerId" is required (not null)
            if (sellerId == null)
            {
                throw new ArgumentNullException("sellerId is a required property for Store and cannot be null");
            }
            this.SellerId = sellerId;
            // to ensure "storeId" is required (not null)
            if (storeId == null)
            {
                throw new ArgumentNullException("storeId is a required property for Store and cannot be null");
            }
            this.StoreId = storeId;
            this.StoreType = storeType;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for Store and cannot be null");
            }
            this.Tags = tags;
            this.ListingIds = listingIds;
            this.Listings = listings;
            this.WorldId = worldId;
            this.GroupId = groupId;
            this.ShelfIds = shelfIds;
            this.Shelves = shelves;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SellerDisplayName
        /// </summary>
        [DataMember(Name = "sellerDisplayName", IsRequired = true, EmitDefaultValue = true)]
        public string SellerDisplayName { get; set; }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "sellerId", IsRequired = true, EmitDefaultValue = true)]
        public string SellerId { get; set; }

        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name = "storeId", IsRequired = true, EmitDefaultValue = true)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Only for store type world and group
        /// </summary>
        /// <value>Only for store type world and group</value>
        [DataMember(Name = "listingIds", EmitDefaultValue = false)]
        public List<string> ListingIds { get; set; }

        /// <summary>
        /// Only for store type world and group
        /// </summary>
        /// <value>Only for store type world and group</value>
        [DataMember(Name = "listings", EmitDefaultValue = false)]
        public List<ProductListing> Listings { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "worldId", EmitDefaultValue = false)]
        public string WorldId { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "groupId", EmitDefaultValue = false)]
        public string GroupId { get; set; }

        /// <summary>
        /// Only for store type house
        /// </summary>
        /// <value>Only for store type house</value>
        [DataMember(Name = "shelfIds", EmitDefaultValue = false)]
        public List<string> ShelfIds { get; set; }

        /// <summary>
        /// Only for store type house
        /// </summary>
        /// <value>Only for store type house</value>
        [DataMember(Name = "shelves", EmitDefaultValue = false)]
        public List<StoreShelf> Shelves { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Store {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SellerDisplayName: ").Append(SellerDisplayName).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  StoreType: ").Append(StoreType).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ListingIds: ").Append(ListingIds).Append("\n");
            sb.Append("  Listings: ").Append(Listings).Append("\n");
            sb.Append("  WorldId: ").Append(WorldId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  ShelfIds: ").Append(ShelfIds).Append("\n");
            sb.Append("  Shelves: ").Append(Shelves).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Store);
        }

        /// <summary>
        /// Returns true if Store instances are equal
        /// </summary>
        /// <param name="input">Instance of Store to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Store input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SellerDisplayName == input.SellerDisplayName ||
                    (this.SellerDisplayName != null &&
                    this.SellerDisplayName.Equals(input.SellerDisplayName))
                ) && 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.StoreType == input.StoreType ||
                    this.StoreType.Equals(input.StoreType)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.ListingIds == input.ListingIds ||
                    this.ListingIds != null &&
                    input.ListingIds != null &&
                    this.ListingIds.SequenceEqual(input.ListingIds)
                ) && 
                (
                    this.Listings == input.Listings ||
                    this.Listings != null &&
                    input.Listings != null &&
                    this.Listings.SequenceEqual(input.Listings)
                ) && 
                (
                    this.WorldId == input.WorldId ||
                    (this.WorldId != null &&
                    this.WorldId.Equals(input.WorldId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.ShelfIds == input.ShelfIds ||
                    this.ShelfIds != null &&
                    input.ShelfIds != null &&
                    this.ShelfIds.SequenceEqual(input.ShelfIds)
                ) && 
                (
                    this.Shelves == input.Shelves ||
                    this.Shelves != null &&
                    input.Shelves != null &&
                    this.Shelves.SequenceEqual(input.Shelves)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.SellerDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.SellerDisplayName.GetHashCode();
                }
                if (this.SellerId != null)
                {
                    hashCode = (hashCode * 59) + this.SellerId.GetHashCode();
                }
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StoreType.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.ListingIds != null)
                {
                    hashCode = (hashCode * 59) + this.ListingIds.GetHashCode();
                }
                if (this.Listings != null)
                {
                    hashCode = (hashCode * 59) + this.Listings.GetHashCode();
                }
                if (this.WorldId != null)
                {
                    hashCode = (hashCode * 59) + this.WorldId.GetHashCode();
                }
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                if (this.ShelfIds != null)
                {
                    hashCode = (hashCode * 59) + this.ShelfIds.GetHashCode();
                }
                if (this.Shelves != null)
                {
                    hashCode = (hashCode * 59) + this.Shelves.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
