/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// InventoryMetadata
    /// </summary>
    [DataContract(Name = "InventoryMetadata")]
    public partial class InventoryMetadata : IEquatable<InventoryMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryMetadata" /> class.
        /// </summary>
        /// <param name="inventoryItemsToInstantiate">Only in bundles.</param>
        /// <param name="animated">animated.</param>
        /// <param name="animationStyle">animationStyle.</param>
        /// <param name="assetBundleId">assetBundleId.</param>
        /// <param name="fileId">fileId.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="maskTag">maskTag.</param>
        /// <param name="propId">propId.</param>
        public InventoryMetadata(List<string> inventoryItemsToInstantiate = default(List<string>), bool animated = default(bool), string animationStyle = default(string), string assetBundleId = default(string), string fileId = default(string), string imageUrl = default(string), string maskTag = default(string), string propId = default(string))
        {
            this.InventoryItemsToInstantiate = inventoryItemsToInstantiate;
            this.Animated = animated;
            this.AnimationStyle = animationStyle;
            this.AssetBundleId = assetBundleId;
            this.FileId = fileId;
            this.ImageUrl = imageUrl;
            this.MaskTag = maskTag;
            this.PropId = propId;
        }

        /// <summary>
        /// Only in bundles
        /// </summary>
        /// <value>Only in bundles</value>
        [DataMember(Name = "inventoryItemsToInstantiate", EmitDefaultValue = false)]
        public List<string> InventoryItemsToInstantiate { get; set; }

        /// <summary>
        /// Gets or Sets Animated
        /// </summary>
        [DataMember(Name = "animated", EmitDefaultValue = true)]
        public bool Animated { get; set; }

        /// <summary>
        /// Gets or Sets AnimationStyle
        /// </summary>
        [DataMember(Name = "animationStyle", EmitDefaultValue = false)]
        public string AnimationStyle { get; set; }

        /// <summary>
        /// Gets or Sets AssetBundleId
        /// </summary>
        [DataMember(Name = "assetBundleId", EmitDefaultValue = false)]
        public string AssetBundleId { get; set; }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name = "fileId", EmitDefaultValue = false)]
        public string FileId { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets MaskTag
        /// </summary>
        [DataMember(Name = "maskTag", EmitDefaultValue = false)]
        public string MaskTag { get; set; }

        /// <summary>
        /// Gets or Sets PropId
        /// </summary>
        [DataMember(Name = "propId", EmitDefaultValue = false)]
        public string PropId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryMetadata {\n");
            sb.Append("  InventoryItemsToInstantiate: ").Append(InventoryItemsToInstantiate).Append("\n");
            sb.Append("  Animated: ").Append(Animated).Append("\n");
            sb.Append("  AnimationStyle: ").Append(AnimationStyle).Append("\n");
            sb.Append("  AssetBundleId: ").Append(AssetBundleId).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  MaskTag: ").Append(MaskTag).Append("\n");
            sb.Append("  PropId: ").Append(PropId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryMetadata);
        }

        /// <summary>
        /// Returns true if InventoryMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InventoryItemsToInstantiate == input.InventoryItemsToInstantiate ||
                    this.InventoryItemsToInstantiate != null &&
                    input.InventoryItemsToInstantiate != null &&
                    this.InventoryItemsToInstantiate.SequenceEqual(input.InventoryItemsToInstantiate)
                ) && 
                (
                    this.Animated == input.Animated ||
                    this.Animated.Equals(input.Animated)
                ) && 
                (
                    this.AnimationStyle == input.AnimationStyle ||
                    (this.AnimationStyle != null &&
                    this.AnimationStyle.Equals(input.AnimationStyle))
                ) && 
                (
                    this.AssetBundleId == input.AssetBundleId ||
                    (this.AssetBundleId != null &&
                    this.AssetBundleId.Equals(input.AssetBundleId))
                ) && 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.MaskTag == input.MaskTag ||
                    (this.MaskTag != null &&
                    this.MaskTag.Equals(input.MaskTag))
                ) && 
                (
                    this.PropId == input.PropId ||
                    (this.PropId != null &&
                    this.PropId.Equals(input.PropId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InventoryItemsToInstantiate != null)
                {
                    hashCode = (hashCode * 59) + this.InventoryItemsToInstantiate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Animated.GetHashCode();
                if (this.AnimationStyle != null)
                {
                    hashCode = (hashCode * 59) + this.AnimationStyle.GetHashCode();
                }
                if (this.AssetBundleId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetBundleId.GetHashCode();
                }
                if (this.FileId != null)
                {
                    hashCode = (hashCode * 59) + this.FileId.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.MaskTag != null)
                {
                    hashCode = (hashCode * 59) + this.MaskTag.GetHashCode();
                }
                if (this.PropId != null)
                {
                    hashCode = (hashCode * 59) + this.PropId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
