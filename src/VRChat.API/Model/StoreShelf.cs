/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// StoreShelf
    /// </summary>
    [DataContract(Name = "StoreShelf")]
    public partial class StoreShelf : IEquatable<StoreShelf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreShelf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreShelf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreShelf" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="listingIds">listingIds (required).</param>
        /// <param name="listings">listings.</param>
        /// <param name="shelfDescription">shelfDescription (required).</param>
        /// <param name="shelfLayout">shelfLayout (required).</param>
        /// <param name="shelfTitle">shelfTitle (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public StoreShelf(string id = default(string), List<string> listingIds = default(List<string>), List<ProductListing> listings = default(List<ProductListing>), string shelfDescription = default(string), string shelfLayout = default(string), string shelfTitle = default(string), string updatedAt = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for StoreShelf and cannot be null");
            }
            this.Id = id;
            // to ensure "listingIds" is required (not null)
            if (listingIds == null)
            {
                throw new ArgumentNullException("listingIds is a required property for StoreShelf and cannot be null");
            }
            this.ListingIds = listingIds;
            // to ensure "shelfDescription" is required (not null)
            if (shelfDescription == null)
            {
                throw new ArgumentNullException("shelfDescription is a required property for StoreShelf and cannot be null");
            }
            this.ShelfDescription = shelfDescription;
            // to ensure "shelfLayout" is required (not null)
            if (shelfLayout == null)
            {
                throw new ArgumentNullException("shelfLayout is a required property for StoreShelf and cannot be null");
            }
            this.ShelfLayout = shelfLayout;
            // to ensure "shelfTitle" is required (not null)
            if (shelfTitle == null)
            {
                throw new ArgumentNullException("shelfTitle is a required property for StoreShelf and cannot be null");
            }
            this.ShelfTitle = shelfTitle;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for StoreShelf and cannot be null");
            }
            this.UpdatedAt = updatedAt;
            this.Listings = listings;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ListingIds
        /// </summary>
        [DataMember(Name = "listingIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ListingIds { get; set; }

        /// <summary>
        /// Gets or Sets Listings
        /// </summary>
        [DataMember(Name = "listings", EmitDefaultValue = false)]
        public List<ProductListing> Listings { get; set; }

        /// <summary>
        /// Gets or Sets ShelfDescription
        /// </summary>
        [DataMember(Name = "shelfDescription", IsRequired = true, EmitDefaultValue = true)]
        public string ShelfDescription { get; set; }

        /// <summary>
        /// Gets or Sets ShelfLayout
        /// </summary>
        [DataMember(Name = "shelfLayout", IsRequired = true, EmitDefaultValue = true)]
        public string ShelfLayout { get; set; }

        /// <summary>
        /// Gets or Sets ShelfTitle
        /// </summary>
        [DataMember(Name = "shelfTitle", IsRequired = true, EmitDefaultValue = true)]
        public string ShelfTitle { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoreShelf {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ListingIds: ").Append(ListingIds).Append("\n");
            sb.Append("  Listings: ").Append(Listings).Append("\n");
            sb.Append("  ShelfDescription: ").Append(ShelfDescription).Append("\n");
            sb.Append("  ShelfLayout: ").Append(ShelfLayout).Append("\n");
            sb.Append("  ShelfTitle: ").Append(ShelfTitle).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreShelf);
        }

        /// <summary>
        /// Returns true if StoreShelf instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreShelf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreShelf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ListingIds == input.ListingIds ||
                    this.ListingIds != null &&
                    input.ListingIds != null &&
                    this.ListingIds.SequenceEqual(input.ListingIds)
                ) && 
                (
                    this.Listings == input.Listings ||
                    this.Listings != null &&
                    input.Listings != null &&
                    this.Listings.SequenceEqual(input.Listings)
                ) && 
                (
                    this.ShelfDescription == input.ShelfDescription ||
                    (this.ShelfDescription != null &&
                    this.ShelfDescription.Equals(input.ShelfDescription))
                ) && 
                (
                    this.ShelfLayout == input.ShelfLayout ||
                    (this.ShelfLayout != null &&
                    this.ShelfLayout.Equals(input.ShelfLayout))
                ) && 
                (
                    this.ShelfTitle == input.ShelfTitle ||
                    (this.ShelfTitle != null &&
                    this.ShelfTitle.Equals(input.ShelfTitle))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ListingIds != null)
                {
                    hashCode = (hashCode * 59) + this.ListingIds.GetHashCode();
                }
                if (this.Listings != null)
                {
                    hashCode = (hashCode * 59) + this.Listings.GetHashCode();
                }
                if (this.ShelfDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ShelfDescription.GetHashCode();
                }
                if (this.ShelfLayout != null)
                {
                    hashCode = (hashCode * 59) + this.ShelfLayout.GetHashCode();
                }
                if (this.ShelfTitle != null)
                {
                    hashCode = (hashCode * 59) + this.ShelfTitle.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
