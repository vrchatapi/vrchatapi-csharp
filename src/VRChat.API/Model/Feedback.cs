/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// Feedback
    /// </summary>
    [DataContract(Name = "Feedback")]
    public partial class Feedback : IEquatable<Feedback>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedback" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Feedback() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedback" /> class.
        /// </summary>
        /// <param name="commenterId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
        /// <param name="commenterName">commenterName (required).</param>
        /// <param name="contentAuthorId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
        /// <param name="contentAuthorName">contentAuthorName (required).</param>
        /// <param name="contentId">contentId (required).</param>
        /// <param name="contentName">contentName.</param>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="contentVersion">contentVersion (required).</param>
        /// <param name="description">description.</param>
        /// <param name="id">id (required).</param>
        /// <param name="reason">reason (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="type">type (required).</param>
        public Feedback(string commenterId = default(string), string commenterName = default(string), string contentAuthorId = default(string), string contentAuthorName = default(string), string contentId = default(string), string contentName = default(string), string contentType = default(string), int? contentVersion = default(int?), string description = default(string), string id = default(string), string reason = default(string), List<string> tags = default(List<string>), string type = default(string))
        {
            // to ensure "commenterId" is required (not null)
            if (commenterId == null)
            {
                throw new ArgumentNullException("commenterId is a required property for Feedback and cannot be null");
            }
            this.CommenterId = commenterId;
            // to ensure "commenterName" is required (not null)
            if (commenterName == null)
            {
                throw new ArgumentNullException("commenterName is a required property for Feedback and cannot be null");
            }
            this.CommenterName = commenterName;
            // to ensure "contentAuthorId" is required (not null)
            if (contentAuthorId == null)
            {
                throw new ArgumentNullException("contentAuthorId is a required property for Feedback and cannot be null");
            }
            this.ContentAuthorId = contentAuthorId;
            // to ensure "contentAuthorName" is required (not null)
            if (contentAuthorName == null)
            {
                throw new ArgumentNullException("contentAuthorName is a required property for Feedback and cannot be null");
            }
            this.ContentAuthorName = contentAuthorName;
            // to ensure "contentId" is required (not null)
            if (contentId == null)
            {
                throw new ArgumentNullException("contentId is a required property for Feedback and cannot be null");
            }
            this.ContentId = contentId;
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for Feedback and cannot be null");
            }
            this.ContentType = contentType;
            // to ensure "contentVersion" is required (not null)
            if (contentVersion == null)
            {
                throw new ArgumentNullException("contentVersion is a required property for Feedback and cannot be null");
            }
            this.ContentVersion = contentVersion;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Feedback and cannot be null");
            }
            this.Id = id;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for Feedback and cannot be null");
            }
            this.Reason = reason;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for Feedback and cannot be null");
            }
            this.Tags = tags;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Feedback and cannot be null");
            }
            this.Type = type;
            this.ContentName = contentName;
            this.Description = description;
        }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "commenterId", IsRequired = true, EmitDefaultValue = true)]
        public string CommenterId { get; set; }

        /// <summary>
        /// Gets or Sets CommenterName
        /// </summary>
        [DataMember(Name = "commenterName", IsRequired = true, EmitDefaultValue = true)]
        public string CommenterName { get; set; }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "contentAuthorId", IsRequired = true, EmitDefaultValue = true)]
        public string ContentAuthorId { get; set; }

        /// <summary>
        /// Gets or Sets ContentAuthorName
        /// </summary>
        [DataMember(Name = "contentAuthorName", IsRequired = true, EmitDefaultValue = true)]
        public string ContentAuthorName { get; set; }

        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name = "contentId", IsRequired = true, EmitDefaultValue = true)]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or Sets ContentName
        /// </summary>
        [DataMember(Name = "contentName", EmitDefaultValue = false)]
        public string ContentName { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", IsRequired = true, EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets ContentVersion
        /// </summary>
        [DataMember(Name = "contentVersion", IsRequired = true, EmitDefaultValue = true)]
        public int? ContentVersion { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Feedback {\n");
            sb.Append("  CommenterId: ").Append(CommenterId).Append("\n");
            sb.Append("  CommenterName: ").Append(CommenterName).Append("\n");
            sb.Append("  ContentAuthorId: ").Append(ContentAuthorId).Append("\n");
            sb.Append("  ContentAuthorName: ").Append(ContentAuthorName).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  ContentName: ").Append(ContentName).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentVersion: ").Append(ContentVersion).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Feedback);
        }

        /// <summary>
        /// Returns true if Feedback instances are equal
        /// </summary>
        /// <param name="input">Instance of Feedback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Feedback input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CommenterId == input.CommenterId ||
                    (this.CommenterId != null &&
                    this.CommenterId.Equals(input.CommenterId))
                ) && 
                (
                    this.CommenterName == input.CommenterName ||
                    (this.CommenterName != null &&
                    this.CommenterName.Equals(input.CommenterName))
                ) && 
                (
                    this.ContentAuthorId == input.ContentAuthorId ||
                    (this.ContentAuthorId != null &&
                    this.ContentAuthorId.Equals(input.ContentAuthorId))
                ) && 
                (
                    this.ContentAuthorName == input.ContentAuthorName ||
                    (this.ContentAuthorName != null &&
                    this.ContentAuthorName.Equals(input.ContentAuthorName))
                ) && 
                (
                    this.ContentId == input.ContentId ||
                    (this.ContentId != null &&
                    this.ContentId.Equals(input.ContentId))
                ) && 
                (
                    this.ContentName == input.ContentName ||
                    (this.ContentName != null &&
                    this.ContentName.Equals(input.ContentName))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.ContentVersion == input.ContentVersion ||
                    (this.ContentVersion != null &&
                    this.ContentVersion.Equals(input.ContentVersion))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommenterId != null)
                {
                    hashCode = (hashCode * 59) + this.CommenterId.GetHashCode();
                }
                if (this.CommenterName != null)
                {
                    hashCode = (hashCode * 59) + this.CommenterName.GetHashCode();
                }
                if (this.ContentAuthorId != null)
                {
                    hashCode = (hashCode * 59) + this.ContentAuthorId.GetHashCode();
                }
                if (this.ContentAuthorName != null)
                {
                    hashCode = (hashCode * 59) + this.ContentAuthorName.GetHashCode();
                }
                if (this.ContentId != null)
                {
                    hashCode = (hashCode * 59) + this.ContentId.GetHashCode();
                }
                if (this.ContentName != null)
                {
                    hashCode = (hashCode * 59) + this.ContentName.GetHashCode();
                }
                if (this.ContentType != null)
                {
                    hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                }
                if (this.ContentVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ContentVersion.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
