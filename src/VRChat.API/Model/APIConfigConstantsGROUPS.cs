/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// Group-related constants
    /// </summary>
    [DataContract(Name = "APIConfigConstants_GROUPS")]
    public partial class APIConfigConstantsGROUPS : IEquatable<APIConfigConstantsGROUPS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfigConstantsGROUPS" /> class.
        /// </summary>
        /// <param name="cAPACITY">Maximum group capacity (default to 100000).</param>
        /// <param name="gROUPTRANSFERREQUIREMENTS">Requirements for transferring group ownership.</param>
        /// <param name="mAXINVITESREQUESTS">Maximum number of invite requests (default to 50).</param>
        /// <param name="mAXJOINED">Maximum number of joined groups (default to 100).</param>
        /// <param name="mAXJOINEDPLUS">Maximum number of joined groups for VRChat Plus members (default to 200).</param>
        /// <param name="mAXLANGUAGES">Maximum number of supported languages (default to 10).</param>
        /// <param name="mAXLINKS">Maximum number of group links (default to 3).</param>
        /// <param name="mAXMANAGEMENTROLES">Maximum number of management roles in a group (default to 5).</param>
        /// <param name="mAXOWNED">Maximum number of groups a user can own (default to 5).</param>
        /// <param name="mAXROLES">Maximum number of roles in a group (default to 50).</param>
        public APIConfigConstantsGROUPS(int cAPACITY = 100000, List<string> gROUPTRANSFERREQUIREMENTS = default(List<string>), int mAXINVITESREQUESTS = 50, int mAXJOINED = 100, int mAXJOINEDPLUS = 200, int mAXLANGUAGES = 10, int mAXLINKS = 3, int mAXMANAGEMENTROLES = 5, int mAXOWNED = 5, int mAXROLES = 50)
        {
            this.CAPACITY = cAPACITY;
            this.GROUP_TRANSFER_REQUIREMENTS = gROUPTRANSFERREQUIREMENTS;
            this.MAX_INVITES_REQUESTS = mAXINVITESREQUESTS;
            this.MAX_JOINED = mAXJOINED;
            this.MAX_JOINED_PLUS = mAXJOINEDPLUS;
            this.MAX_LANGUAGES = mAXLANGUAGES;
            this.MAX_LINKS = mAXLINKS;
            this.MAX_MANAGEMENT_ROLES = mAXMANAGEMENTROLES;
            this.MAX_OWNED = mAXOWNED;
            this.MAX_ROLES = mAXROLES;
        }

        /// <summary>
        /// Maximum group capacity
        /// </summary>
        /// <value>Maximum group capacity</value>
        [DataMember(Name = "CAPACITY", EmitDefaultValue = false)]
        public int CAPACITY { get; set; }

        /// <summary>
        /// Requirements for transferring group ownership
        /// </summary>
        /// <value>Requirements for transferring group ownership</value>
        [DataMember(Name = "GROUP_TRANSFER_REQUIREMENTS", EmitDefaultValue = false)]
        public List<string> GROUP_TRANSFER_REQUIREMENTS { get; set; }

        /// <summary>
        /// Maximum number of invite requests
        /// </summary>
        /// <value>Maximum number of invite requests</value>
        [DataMember(Name = "MAX_INVITES_REQUESTS", EmitDefaultValue = false)]
        public int MAX_INVITES_REQUESTS { get; set; }

        /// <summary>
        /// Maximum number of joined groups
        /// </summary>
        /// <value>Maximum number of joined groups</value>
        [DataMember(Name = "MAX_JOINED", EmitDefaultValue = false)]
        public int MAX_JOINED { get; set; }

        /// <summary>
        /// Maximum number of joined groups for VRChat Plus members
        /// </summary>
        /// <value>Maximum number of joined groups for VRChat Plus members</value>
        [DataMember(Name = "MAX_JOINED_PLUS", EmitDefaultValue = false)]
        public int MAX_JOINED_PLUS { get; set; }

        /// <summary>
        /// Maximum number of supported languages
        /// </summary>
        /// <value>Maximum number of supported languages</value>
        [DataMember(Name = "MAX_LANGUAGES", EmitDefaultValue = false)]
        public int MAX_LANGUAGES { get; set; }

        /// <summary>
        /// Maximum number of group links
        /// </summary>
        /// <value>Maximum number of group links</value>
        [DataMember(Name = "MAX_LINKS", EmitDefaultValue = false)]
        public int MAX_LINKS { get; set; }

        /// <summary>
        /// Maximum number of management roles in a group
        /// </summary>
        /// <value>Maximum number of management roles in a group</value>
        [DataMember(Name = "MAX_MANAGEMENT_ROLES", EmitDefaultValue = false)]
        public int MAX_MANAGEMENT_ROLES { get; set; }

        /// <summary>
        /// Maximum number of groups a user can own
        /// </summary>
        /// <value>Maximum number of groups a user can own</value>
        [DataMember(Name = "MAX_OWNED", EmitDefaultValue = false)]
        public int MAX_OWNED { get; set; }

        /// <summary>
        /// Maximum number of roles in a group
        /// </summary>
        /// <value>Maximum number of roles in a group</value>
        [DataMember(Name = "MAX_ROLES", EmitDefaultValue = false)]
        public int MAX_ROLES { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIConfigConstantsGROUPS {\n");
            sb.Append("  CAPACITY: ").Append(CAPACITY).Append("\n");
            sb.Append("  GROUP_TRANSFER_REQUIREMENTS: ").Append(GROUP_TRANSFER_REQUIREMENTS).Append("\n");
            sb.Append("  MAX_INVITES_REQUESTS: ").Append(MAX_INVITES_REQUESTS).Append("\n");
            sb.Append("  MAX_JOINED: ").Append(MAX_JOINED).Append("\n");
            sb.Append("  MAX_JOINED_PLUS: ").Append(MAX_JOINED_PLUS).Append("\n");
            sb.Append("  MAX_LANGUAGES: ").Append(MAX_LANGUAGES).Append("\n");
            sb.Append("  MAX_LINKS: ").Append(MAX_LINKS).Append("\n");
            sb.Append("  MAX_MANAGEMENT_ROLES: ").Append(MAX_MANAGEMENT_ROLES).Append("\n");
            sb.Append("  MAX_OWNED: ").Append(MAX_OWNED).Append("\n");
            sb.Append("  MAX_ROLES: ").Append(MAX_ROLES).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APIConfigConstantsGROUPS);
        }

        /// <summary>
        /// Returns true if APIConfigConstantsGROUPS instances are equal
        /// </summary>
        /// <param name="input">Instance of APIConfigConstantsGROUPS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APIConfigConstantsGROUPS input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CAPACITY == input.CAPACITY ||
                    this.CAPACITY.Equals(input.CAPACITY)
                ) && 
                (
                    this.GROUP_TRANSFER_REQUIREMENTS == input.GROUP_TRANSFER_REQUIREMENTS ||
                    this.GROUP_TRANSFER_REQUIREMENTS != null &&
                    input.GROUP_TRANSFER_REQUIREMENTS != null &&
                    this.GROUP_TRANSFER_REQUIREMENTS.SequenceEqual(input.GROUP_TRANSFER_REQUIREMENTS)
                ) && 
                (
                    this.MAX_INVITES_REQUESTS == input.MAX_INVITES_REQUESTS ||
                    this.MAX_INVITES_REQUESTS.Equals(input.MAX_INVITES_REQUESTS)
                ) && 
                (
                    this.MAX_JOINED == input.MAX_JOINED ||
                    this.MAX_JOINED.Equals(input.MAX_JOINED)
                ) && 
                (
                    this.MAX_JOINED_PLUS == input.MAX_JOINED_PLUS ||
                    this.MAX_JOINED_PLUS.Equals(input.MAX_JOINED_PLUS)
                ) && 
                (
                    this.MAX_LANGUAGES == input.MAX_LANGUAGES ||
                    this.MAX_LANGUAGES.Equals(input.MAX_LANGUAGES)
                ) && 
                (
                    this.MAX_LINKS == input.MAX_LINKS ||
                    this.MAX_LINKS.Equals(input.MAX_LINKS)
                ) && 
                (
                    this.MAX_MANAGEMENT_ROLES == input.MAX_MANAGEMENT_ROLES ||
                    this.MAX_MANAGEMENT_ROLES.Equals(input.MAX_MANAGEMENT_ROLES)
                ) && 
                (
                    this.MAX_OWNED == input.MAX_OWNED ||
                    this.MAX_OWNED.Equals(input.MAX_OWNED)
                ) && 
                (
                    this.MAX_ROLES == input.MAX_ROLES ||
                    this.MAX_ROLES.Equals(input.MAX_ROLES)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CAPACITY.GetHashCode();
                if (this.GROUP_TRANSFER_REQUIREMENTS != null)
                {
                    hashCode = (hashCode * 59) + this.GROUP_TRANSFER_REQUIREMENTS.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MAX_INVITES_REQUESTS.GetHashCode();
                hashCode = (hashCode * 59) + this.MAX_JOINED.GetHashCode();
                hashCode = (hashCode * 59) + this.MAX_JOINED_PLUS.GetHashCode();
                hashCode = (hashCode * 59) + this.MAX_LANGUAGES.GetHashCode();
                hashCode = (hashCode * 59) + this.MAX_LINKS.GetHashCode();
                hashCode = (hashCode * 59) + this.MAX_MANAGEMENT_ROLES.GetHashCode();
                hashCode = (hashCode * 59) + this.MAX_OWNED.GetHashCode();
                hashCode = (hashCode * 59) + this.MAX_ROLES.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
