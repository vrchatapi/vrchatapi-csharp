/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// ProductListingVariant
    /// </summary>
    [DataContract(Name = "ProductListingVariant")]
    public partial class ProductListingVariant : IEquatable<ProductListingVariant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListingVariant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductListingVariant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListingVariant" /> class.
        /// </summary>
        /// <param name="effectiveFrom">effectiveFrom.</param>
        /// <param name="listingVariantId">listingVariantId (required).</param>
        /// <param name="nonRefundable">nonRefundable (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="sellerVariant">sellerVariant (required).</param>
        /// <param name="unitPriceTokens">unitPriceTokens (required).</param>
        public ProductListingVariant(DateTime effectiveFrom = default(DateTime), string listingVariantId = default(string), bool nonRefundable = default(bool), int quantity = default(int), bool sellerVariant = default(bool), int unitPriceTokens = default(int))
        {
            // to ensure "listingVariantId" is required (not null)
            if (listingVariantId == null)
            {
                throw new ArgumentNullException("listingVariantId is a required property for ProductListingVariant and cannot be null");
            }
            this.ListingVariantId = listingVariantId;
            this.NonRefundable = nonRefundable;
            this.Quantity = quantity;
            this.SellerVariant = sellerVariant;
            this.UnitPriceTokens = unitPriceTokens;
            this.EffectiveFrom = effectiveFrom;
        }

        /// <summary>
        /// Gets or Sets EffectiveFrom
        /// </summary>
        [DataMember(Name = "effectiveFrom", EmitDefaultValue = false)]
        public DateTime EffectiveFrom { get; set; }

        /// <summary>
        /// Gets or Sets ListingVariantId
        /// </summary>
        [DataMember(Name = "listingVariantId", IsRequired = true, EmitDefaultValue = true)]
        public string ListingVariantId { get; set; }

        /// <summary>
        /// Gets or Sets NonRefundable
        /// </summary>
        [DataMember(Name = "nonRefundable", IsRequired = true, EmitDefaultValue = true)]
        public bool NonRefundable { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets SellerVariant
        /// </summary>
        [DataMember(Name = "sellerVariant", IsRequired = true, EmitDefaultValue = true)]
        public bool SellerVariant { get; set; }

        /// <summary>
        /// Gets or Sets UnitPriceTokens
        /// </summary>
        [DataMember(Name = "unitPriceTokens", IsRequired = true, EmitDefaultValue = true)]
        public int UnitPriceTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductListingVariant {\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  ListingVariantId: ").Append(ListingVariantId).Append("\n");
            sb.Append("  NonRefundable: ").Append(NonRefundable).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SellerVariant: ").Append(SellerVariant).Append("\n");
            sb.Append("  UnitPriceTokens: ").Append(UnitPriceTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductListingVariant);
        }

        /// <summary>
        /// Returns true if ProductListingVariant instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductListingVariant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductListingVariant input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.ListingVariantId == input.ListingVariantId ||
                    (this.ListingVariantId != null &&
                    this.ListingVariantId.Equals(input.ListingVariantId))
                ) && 
                (
                    this.NonRefundable == input.NonRefundable ||
                    this.NonRefundable.Equals(input.NonRefundable)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.SellerVariant == input.SellerVariant ||
                    this.SellerVariant.Equals(input.SellerVariant)
                ) && 
                (
                    this.UnitPriceTokens == input.UnitPriceTokens ||
                    this.UnitPriceTokens.Equals(input.UnitPriceTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveFrom != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveFrom.GetHashCode();
                }
                if (this.ListingVariantId != null)
                {
                    hashCode = (hashCode * 59) + this.ListingVariantId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NonRefundable.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.SellerVariant.GetHashCode();
                hashCode = (hashCode * 59) + this.UnitPriceTokens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
