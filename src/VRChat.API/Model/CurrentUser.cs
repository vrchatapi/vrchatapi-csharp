/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// CurrentUser
    /// </summary>
    [DataContract(Name = "CurrentUser")]
    public partial class CurrentUser : IEquatable<CurrentUser>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AgeVerificationStatus
        /// </summary>
        [DataMember(Name = "ageVerificationStatus", IsRequired = true, EmitDefaultValue = true)]
        public AgeVerificationStatus AgeVerificationStatus { get; set; }

        /// <summary>
        /// Gets or Sets DeveloperType
        /// </summary>
        [DataMember(Name = "developerType", IsRequired = true, EmitDefaultValue = true)]
        public DeveloperType DeveloperType { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public UserState State { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public UserStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrentUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentUser" /> class.
        /// </summary>
        /// <param name="acceptedTOSVersion">acceptedTOSVersion (required).</param>
        /// <param name="acceptedPrivacyVersion">acceptedPrivacyVersion.</param>
        /// <param name="accountDeletionDate">accountDeletionDate.</param>
        /// <param name="accountDeletionLog"> .</param>
        /// <param name="activeFriends"> .</param>
        /// <param name="ageVerificationStatus">ageVerificationStatus (required).</param>
        /// <param name="ageVerified">&#x60;true&#x60; if, user is age verified (not 18+). (required).</param>
        /// <param name="allowAvatarCopying">allowAvatarCopying (required).</param>
        /// <param name="authToken">The auth token for NEWLY REGISTERED ACCOUNTS ONLY (/auth/register).</param>
        /// <param name="badges"> .</param>
        /// <param name="bio">bio (required).</param>
        /// <param name="bioLinks">  (required).</param>
        /// <param name="contentFilters">These tags begin with &#x60;content_&#x60; and control content gating.</param>
        /// <param name="currentAvatar">currentAvatar (required).</param>
        /// <param name="currentAvatarImageUrl">When profilePicOverride is not empty, use it instead. (required).</param>
        /// <param name="currentAvatarThumbnailImageUrl">When profilePicOverride is not empty, use it instead. (required).</param>
        /// <param name="currentAvatarTags">currentAvatarTags (required).</param>
        /// <param name="dateJoined">dateJoined (required).</param>
        /// <param name="developerType">developerType (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="emailVerified">emailVerified (required).</param>
        /// <param name="fallbackAvatar">fallbackAvatar.</param>
        /// <param name="friendGroupNames">Always empty array. (required).</param>
        /// <param name="friendKey">friendKey (required).</param>
        /// <param name="friends">friends (required).</param>
        /// <param name="hasBirthday">hasBirthday (required).</param>
        /// <param name="hideContentFilterSettings">hideContentFilterSettings.</param>
        /// <param name="userLanguage">userLanguage.</param>
        /// <param name="userLanguageCode">userLanguageCode.</param>
        /// <param name="hasEmail">hasEmail (required).</param>
        /// <param name="hasLoggedInFromClient">hasLoggedInFromClient (required).</param>
        /// <param name="hasPendingEmail">hasPendingEmail (required).</param>
        /// <param name="homeLocation">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="id">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
        /// <param name="isAdult">isAdult (required).</param>
        /// <param name="isBoopingEnabled">isBoopingEnabled (default to true).</param>
        /// <param name="isFriend">isFriend (required) (default to false).</param>
        /// <param name="lastActivity">lastActivity.</param>
        /// <param name="lastLogin">lastLogin (required).</param>
        /// <param name="lastMobile">lastMobile (required).</param>
        /// <param name="lastPlatform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;. (required).</param>
        /// <param name="obfuscatedEmail">obfuscatedEmail (required).</param>
        /// <param name="obfuscatedPendingEmail">obfuscatedPendingEmail (required).</param>
        /// <param name="oculusId">oculusId (required).</param>
        /// <param name="googleId">googleId.</param>
        /// <param name="googleDetails">googleDetails.</param>
        /// <param name="picoId">picoId.</param>
        /// <param name="viveId">viveId.</param>
        /// <param name="offlineFriends">offlineFriends.</param>
        /// <param name="onlineFriends">onlineFriends.</param>
        /// <param name="pastDisplayNames">  (required).</param>
        /// <param name="presence">presence.</param>
        /// <param name="platformHistory">platformHistory.</param>
        /// <param name="profilePicOverride">profilePicOverride (required).</param>
        /// <param name="profilePicOverrideThumbnail">profilePicOverrideThumbnail (required).</param>
        /// <param name="pronouns">pronouns (required).</param>
        /// <param name="pronounsHistory">pronounsHistory (required).</param>
        /// <param name="queuedInstance">queuedInstance.</param>
        /// <param name="receiveMobileInvitations">receiveMobileInvitations.</param>
        /// <param name="state">state (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="statusDescription">statusDescription (required).</param>
        /// <param name="statusFirstTime">statusFirstTime (required).</param>
        /// <param name="statusHistory">statusHistory (required).</param>
        /// <param name="steamDetails">steamDetails (required).</param>
        /// <param name="steamId">steamId (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="twoFactorAuthEnabled">twoFactorAuthEnabled (required).</param>
        /// <param name="twoFactorAuthEnabledDate">twoFactorAuthEnabledDate.</param>
        /// <param name="unsubscribe">unsubscribe (required).</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="userIcon">userIcon (required).</param>
        /// <param name="username">-| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429)..</param>
        public CurrentUser(int acceptedTOSVersion = default(int), int acceptedPrivacyVersion = default(int), DateTime? accountDeletionDate = default(DateTime?), List<AccountDeletionLog> accountDeletionLog = default(List<AccountDeletionLog>), List<string> activeFriends = default(List<string>), AgeVerificationStatus ageVerificationStatus = default(AgeVerificationStatus), bool ageVerified = default(bool), bool allowAvatarCopying = default(bool), string authToken = default(string), List<Badge> badges = default(List<Badge>), string bio = default(string), List<string> bioLinks = default(List<string>), List<string> contentFilters = default(List<string>), string currentAvatar = default(string), string currentAvatarImageUrl = default(string), string currentAvatarThumbnailImageUrl = default(string), List<string> currentAvatarTags = default(List<string>), DateTime dateJoined = default(DateTime), DeveloperType developerType = default(DeveloperType), string displayName = default(string), bool emailVerified = default(bool), string fallbackAvatar = default(string), List<string> friendGroupNames = default(List<string>), string friendKey = default(string), List<string> friends = default(List<string>), bool hasBirthday = default(bool), bool hideContentFilterSettings = default(bool), string userLanguage = default(string), string userLanguageCode = default(string), bool hasEmail = default(bool), bool hasLoggedInFromClient = default(bool), bool hasPendingEmail = default(bool), string homeLocation = default(string), string id = default(string), bool isAdult = default(bool), bool isBoopingEnabled = true, bool isFriend = false, DateTime lastActivity = default(DateTime), DateTime lastLogin = default(DateTime), DateTime? lastMobile = default(DateTime?), string lastPlatform = default(string), string obfuscatedEmail = default(string), string obfuscatedPendingEmail = default(string), string oculusId = default(string), string googleId = default(string), Object googleDetails = default(Object), string picoId = default(string), string viveId = default(string), List<string> offlineFriends = default(List<string>), List<string> onlineFriends = default(List<string>), List<PastDisplayName> pastDisplayNames = default(List<PastDisplayName>), CurrentUserPresence presence = default(CurrentUserPresence), List<CurrentUserPlatformHistoryInner> platformHistory = default(List<CurrentUserPlatformHistoryInner>), string profilePicOverride = default(string), string profilePicOverrideThumbnail = default(string), string pronouns = default(string), List<string> pronounsHistory = default(List<string>), string queuedInstance = default(string), bool receiveMobileInvitations = default(bool), UserState state = default(UserState), UserStatus status = default(UserStatus), string statusDescription = default(string), bool statusFirstTime = default(bool), List<string> statusHistory = default(List<string>), Object steamDetails = default(Object), string steamId = default(string), List<string> tags = default(List<string>), bool twoFactorAuthEnabled = default(bool), DateTime? twoFactorAuthEnabledDate = default(DateTime?), bool unsubscribe = default(bool), DateTime updatedAt = default(DateTime), string userIcon = default(string), string username = default(string))
        {
            this.AcceptedTOSVersion = acceptedTOSVersion;
            this.AgeVerificationStatus = ageVerificationStatus;
            this.AgeVerified = ageVerified;
            this.AllowAvatarCopying = allowAvatarCopying;
            // to ensure "bio" is required (not null)
            if (bio == null)
            {
                throw new ArgumentNullException("bio is a required property for CurrentUser and cannot be null");
            }
            this.Bio = bio;
            // to ensure "bioLinks" is required (not null)
            if (bioLinks == null)
            {
                throw new ArgumentNullException("bioLinks is a required property for CurrentUser and cannot be null");
            }
            this.BioLinks = bioLinks;
            // to ensure "currentAvatar" is required (not null)
            if (currentAvatar == null)
            {
                throw new ArgumentNullException("currentAvatar is a required property for CurrentUser and cannot be null");
            }
            this.CurrentAvatar = currentAvatar;
            // to ensure "currentAvatarImageUrl" is required (not null)
            if (currentAvatarImageUrl == null)
            {
                throw new ArgumentNullException("currentAvatarImageUrl is a required property for CurrentUser and cannot be null");
            }
            this.CurrentAvatarImageUrl = currentAvatarImageUrl;
            // to ensure "currentAvatarThumbnailImageUrl" is required (not null)
            if (currentAvatarThumbnailImageUrl == null)
            {
                throw new ArgumentNullException("currentAvatarThumbnailImageUrl is a required property for CurrentUser and cannot be null");
            }
            this.CurrentAvatarThumbnailImageUrl = currentAvatarThumbnailImageUrl;
            // to ensure "currentAvatarTags" is required (not null)
            if (currentAvatarTags == null)
            {
                throw new ArgumentNullException("currentAvatarTags is a required property for CurrentUser and cannot be null");
            }
            this.CurrentAvatarTags = currentAvatarTags;
            this.DateJoined = dateJoined;
            this.DeveloperType = developerType;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for CurrentUser and cannot be null");
            }
            this.DisplayName = displayName;
            this.EmailVerified = emailVerified;
            // to ensure "friendGroupNames" is required (not null)
            if (friendGroupNames == null)
            {
                throw new ArgumentNullException("friendGroupNames is a required property for CurrentUser and cannot be null");
            }
            this.FriendGroupNames = friendGroupNames;
            // to ensure "friendKey" is required (not null)
            if (friendKey == null)
            {
                throw new ArgumentNullException("friendKey is a required property for CurrentUser and cannot be null");
            }
            this.FriendKey = friendKey;
            // to ensure "friends" is required (not null)
            if (friends == null)
            {
                throw new ArgumentNullException("friends is a required property for CurrentUser and cannot be null");
            }
            this.Friends = friends;
            this.HasBirthday = hasBirthday;
            this.HasEmail = hasEmail;
            this.HasLoggedInFromClient = hasLoggedInFromClient;
            this.HasPendingEmail = hasPendingEmail;
            // to ensure "homeLocation" is required (not null)
            if (homeLocation == null)
            {
                throw new ArgumentNullException("homeLocation is a required property for CurrentUser and cannot be null");
            }
            this.HomeLocation = homeLocation;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CurrentUser and cannot be null");
            }
            this.Id = id;
            this.IsAdult = isAdult;
            this.IsFriend = isFriend;
            this.LastLogin = lastLogin;
            // to ensure "lastMobile" is required (not null)
            if (lastMobile == null)
            {
                throw new ArgumentNullException("lastMobile is a required property for CurrentUser and cannot be null");
            }
            this.LastMobile = lastMobile;
            // to ensure "lastPlatform" is required (not null)
            if (lastPlatform == null)
            {
                throw new ArgumentNullException("lastPlatform is a required property for CurrentUser and cannot be null");
            }
            this.LastPlatform = lastPlatform;
            // to ensure "obfuscatedEmail" is required (not null)
            if (obfuscatedEmail == null)
            {
                throw new ArgumentNullException("obfuscatedEmail is a required property for CurrentUser and cannot be null");
            }
            this.ObfuscatedEmail = obfuscatedEmail;
            // to ensure "obfuscatedPendingEmail" is required (not null)
            if (obfuscatedPendingEmail == null)
            {
                throw new ArgumentNullException("obfuscatedPendingEmail is a required property for CurrentUser and cannot be null");
            }
            this.ObfuscatedPendingEmail = obfuscatedPendingEmail;
            // to ensure "oculusId" is required (not null)
            if (oculusId == null)
            {
                throw new ArgumentNullException("oculusId is a required property for CurrentUser and cannot be null");
            }
            this.OculusId = oculusId;
            // to ensure "pastDisplayNames" is required (not null)
            if (pastDisplayNames == null)
            {
                throw new ArgumentNullException("pastDisplayNames is a required property for CurrentUser and cannot be null");
            }
            this.PastDisplayNames = pastDisplayNames;
            // to ensure "profilePicOverride" is required (not null)
            if (profilePicOverride == null)
            {
                throw new ArgumentNullException("profilePicOverride is a required property for CurrentUser and cannot be null");
            }
            this.ProfilePicOverride = profilePicOverride;
            // to ensure "profilePicOverrideThumbnail" is required (not null)
            if (profilePicOverrideThumbnail == null)
            {
                throw new ArgumentNullException("profilePicOverrideThumbnail is a required property for CurrentUser and cannot be null");
            }
            this.ProfilePicOverrideThumbnail = profilePicOverrideThumbnail;
            // to ensure "pronouns" is required (not null)
            if (pronouns == null)
            {
                throw new ArgumentNullException("pronouns is a required property for CurrentUser and cannot be null");
            }
            this.Pronouns = pronouns;
            // to ensure "pronounsHistory" is required (not null)
            if (pronounsHistory == null)
            {
                throw new ArgumentNullException("pronounsHistory is a required property for CurrentUser and cannot be null");
            }
            this.PronounsHistory = pronounsHistory;
            this.State = state;
            this.Status = status;
            // to ensure "statusDescription" is required (not null)
            if (statusDescription == null)
            {
                throw new ArgumentNullException("statusDescription is a required property for CurrentUser and cannot be null");
            }
            this.StatusDescription = statusDescription;
            this.StatusFirstTime = statusFirstTime;
            // to ensure "statusHistory" is required (not null)
            if (statusHistory == null)
            {
                throw new ArgumentNullException("statusHistory is a required property for CurrentUser and cannot be null");
            }
            this.StatusHistory = statusHistory;
            // to ensure "steamDetails" is required (not null)
            if (steamDetails == null)
            {
                throw new ArgumentNullException("steamDetails is a required property for CurrentUser and cannot be null");
            }
            this.SteamDetails = steamDetails;
            // to ensure "steamId" is required (not null)
            if (steamId == null)
            {
                throw new ArgumentNullException("steamId is a required property for CurrentUser and cannot be null");
            }
            this.SteamId = steamId;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for CurrentUser and cannot be null");
            }
            this.Tags = tags;
            this.TwoFactorAuthEnabled = twoFactorAuthEnabled;
            this.Unsubscribe = unsubscribe;
            // to ensure "userIcon" is required (not null)
            if (userIcon == null)
            {
                throw new ArgumentNullException("userIcon is a required property for CurrentUser and cannot be null");
            }
            this.UserIcon = userIcon;
            this.AcceptedPrivacyVersion = acceptedPrivacyVersion;
            this.AccountDeletionDate = accountDeletionDate;
            this.AccountDeletionLog = accountDeletionLog;
            this.ActiveFriends = activeFriends;
            this.AuthToken = authToken;
            this.Badges = badges;
            this.ContentFilters = contentFilters;
            this.FallbackAvatar = fallbackAvatar;
            this.HideContentFilterSettings = hideContentFilterSettings;
            this.UserLanguage = userLanguage;
            this.UserLanguageCode = userLanguageCode;
            this.IsBoopingEnabled = isBoopingEnabled;
            this.LastActivity = lastActivity;
            this.GoogleId = googleId;
            this.GoogleDetails = googleDetails;
            this.PicoId = picoId;
            this.ViveId = viveId;
            this.OfflineFriends = offlineFriends;
            this.OnlineFriends = onlineFriends;
            this.Presence = presence;
            this.PlatformHistory = platformHistory;
            this.QueuedInstance = queuedInstance;
            this.ReceiveMobileInvitations = receiveMobileInvitations;
            this.TwoFactorAuthEnabledDate = twoFactorAuthEnabledDate;
            this.UpdatedAt = updatedAt;
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets AcceptedTOSVersion
        /// </summary>
        [DataMember(Name = "acceptedTOSVersion", IsRequired = true, EmitDefaultValue = true)]
        public int AcceptedTOSVersion { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedPrivacyVersion
        /// </summary>
        [DataMember(Name = "acceptedPrivacyVersion", EmitDefaultValue = false)]
        public int AcceptedPrivacyVersion { get; set; }

        /// <summary>
        /// Gets or Sets AccountDeletionDate
        /// </summary>
        [DataMember(Name = "accountDeletionDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? AccountDeletionDate { get; set; }

        /// <summary>
        ///  
        /// </summary>
        /// <value> </value>
        [DataMember(Name = "accountDeletionLog", EmitDefaultValue = true)]
        public List<AccountDeletionLog> AccountDeletionLog { get; set; }

        /// <summary>
        ///  
        /// </summary>
        /// <value> </value>
        [DataMember(Name = "activeFriends", EmitDefaultValue = false)]
        public List<string> ActiveFriends { get; set; }

        /// <summary>
        /// &#x60;true&#x60; if, user is age verified (not 18+).
        /// </summary>
        /// <value>&#x60;true&#x60; if, user is age verified (not 18+).</value>
        [DataMember(Name = "ageVerified", IsRequired = true, EmitDefaultValue = true)]
        public bool AgeVerified { get; set; }

        /// <summary>
        /// Gets or Sets AllowAvatarCopying
        /// </summary>
        [DataMember(Name = "allowAvatarCopying", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAvatarCopying { get; set; }

        /// <summary>
        /// The auth token for NEWLY REGISTERED ACCOUNTS ONLY (/auth/register)
        /// </summary>
        /// <value>The auth token for NEWLY REGISTERED ACCOUNTS ONLY (/auth/register)</value>
        [DataMember(Name = "authToken", EmitDefaultValue = false)]
        public string AuthToken { get; set; }

        /// <summary>
        ///  
        /// </summary>
        /// <value> </value>
        [DataMember(Name = "badges", EmitDefaultValue = false)]
        public List<Badge> Badges { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [DataMember(Name = "bio", IsRequired = true, EmitDefaultValue = true)]
        public string Bio { get; set; }

        /// <summary>
        ///  
        /// </summary>
        /// <value> </value>
        [DataMember(Name = "bioLinks", IsRequired = true, EmitDefaultValue = true)]
        public List<string> BioLinks { get; set; }

        /// <summary>
        /// These tags begin with &#x60;content_&#x60; and control content gating
        /// </summary>
        /// <value>These tags begin with &#x60;content_&#x60; and control content gating</value>
        [DataMember(Name = "contentFilters", EmitDefaultValue = false)]
        public List<string> ContentFilters { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAvatar
        /// </summary>
        [DataMember(Name = "currentAvatar", IsRequired = true, EmitDefaultValue = true)]
        public string CurrentAvatar { get; set; }

        /// <summary>
        /// When profilePicOverride is not empty, use it instead.
        /// </summary>
        /// <value>When profilePicOverride is not empty, use it instead.</value>
        [DataMember(Name = "currentAvatarImageUrl", IsRequired = true, EmitDefaultValue = true)]
        public string CurrentAvatarImageUrl { get; set; }

        /// <summary>
        /// When profilePicOverride is not empty, use it instead.
        /// </summary>
        /// <value>When profilePicOverride is not empty, use it instead.</value>
        [DataMember(Name = "currentAvatarThumbnailImageUrl", IsRequired = true, EmitDefaultValue = true)]
        public string CurrentAvatarThumbnailImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAvatarTags
        /// </summary>
        [DataMember(Name = "currentAvatarTags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> CurrentAvatarTags { get; set; }

        /// <summary>
        /// Gets or Sets DateJoined
        /// </summary>
        [DataMember(Name = "date_joined", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateJoined { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name = "emailVerified", IsRequired = true, EmitDefaultValue = true)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets FallbackAvatar
        /// </summary>
        [DataMember(Name = "fallbackAvatar", EmitDefaultValue = false)]
        public string FallbackAvatar { get; set; }

        /// <summary>
        /// Always empty array.
        /// </summary>
        /// <value>Always empty array.</value>
        [DataMember(Name = "friendGroupNames", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public List<string> FriendGroupNames { get; set; }

        /// <summary>
        /// Gets or Sets FriendKey
        /// </summary>
        [DataMember(Name = "friendKey", IsRequired = true, EmitDefaultValue = true)]
        public string FriendKey { get; set; }

        /// <summary>
        /// Gets or Sets Friends
        /// </summary>
        [DataMember(Name = "friends", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Friends { get; set; }

        /// <summary>
        /// Gets or Sets HasBirthday
        /// </summary>
        [DataMember(Name = "hasBirthday", IsRequired = true, EmitDefaultValue = true)]
        public bool HasBirthday { get; set; }

        /// <summary>
        /// Gets or Sets HideContentFilterSettings
        /// </summary>
        [DataMember(Name = "hideContentFilterSettings", EmitDefaultValue = true)]
        public bool HideContentFilterSettings { get; set; }

        /// <summary>
        /// Gets or Sets UserLanguage
        /// </summary>
        [DataMember(Name = "userLanguage", EmitDefaultValue = true)]
        public string UserLanguage { get; set; }

        /// <summary>
        /// Gets or Sets UserLanguageCode
        /// </summary>
        [DataMember(Name = "userLanguageCode", EmitDefaultValue = true)]
        public string UserLanguageCode { get; set; }

        /// <summary>
        /// Gets or Sets HasEmail
        /// </summary>
        [DataMember(Name = "hasEmail", IsRequired = true, EmitDefaultValue = true)]
        public bool HasEmail { get; set; }

        /// <summary>
        /// Gets or Sets HasLoggedInFromClient
        /// </summary>
        [DataMember(Name = "hasLoggedInFromClient", IsRequired = true, EmitDefaultValue = true)]
        public bool HasLoggedInFromClient { get; set; }

        /// <summary>
        /// Gets or Sets HasPendingEmail
        /// </summary>
        [DataMember(Name = "hasPendingEmail", IsRequired = true, EmitDefaultValue = true)]
        public bool HasPendingEmail { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "homeLocation", IsRequired = true, EmitDefaultValue = true)]
        public string HomeLocation { get; set; }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsAdult
        /// </summary>
        [DataMember(Name = "isAdult", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAdult { get; set; }

        /// <summary>
        /// Gets or Sets IsBoopingEnabled
        /// </summary>
        [DataMember(Name = "isBoopingEnabled", EmitDefaultValue = true)]
        public bool IsBoopingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsFriend
        /// </summary>
        [DataMember(Name = "isFriend", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFriend { get; set; }

        /// <summary>
        /// Gets or Sets LastActivity
        /// </summary>
        [DataMember(Name = "last_activity", EmitDefaultValue = false)]
        public DateTime LastActivity { get; set; }

        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [DataMember(Name = "last_login", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastLogin { get; set; }

        /// <summary>
        /// Gets or Sets LastMobile
        /// </summary>
        [DataMember(Name = "last_mobile", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastMobile { get; set; }

        /// <summary>
        /// This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
        /// </summary>
        /// <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        [DataMember(Name = "last_platform", IsRequired = true, EmitDefaultValue = true)]
        public string LastPlatform { get; set; }

        /// <summary>
        /// Gets or Sets ObfuscatedEmail
        /// </summary>
        [DataMember(Name = "obfuscatedEmail", IsRequired = true, EmitDefaultValue = true)]
        public string ObfuscatedEmail { get; set; }

        /// <summary>
        /// Gets or Sets ObfuscatedPendingEmail
        /// </summary>
        [DataMember(Name = "obfuscatedPendingEmail", IsRequired = true, EmitDefaultValue = true)]
        public string ObfuscatedPendingEmail { get; set; }

        /// <summary>
        /// Gets or Sets OculusId
        /// </summary>
        [DataMember(Name = "oculusId", IsRequired = true, EmitDefaultValue = true)]
        public string OculusId { get; set; }

        /// <summary>
        /// Gets or Sets GoogleId
        /// </summary>
        [DataMember(Name = "googleId", EmitDefaultValue = false)]
        public string GoogleId { get; set; }

        /// <summary>
        /// Gets or Sets GoogleDetails
        /// </summary>
        [DataMember(Name = "googleDetails", EmitDefaultValue = false)]
        public Object GoogleDetails { get; set; }

        /// <summary>
        /// Gets or Sets PicoId
        /// </summary>
        [DataMember(Name = "picoId", EmitDefaultValue = false)]
        public string PicoId { get; set; }

        /// <summary>
        /// Gets or Sets ViveId
        /// </summary>
        [DataMember(Name = "viveId", EmitDefaultValue = false)]
        public string ViveId { get; set; }

        /// <summary>
        /// Gets or Sets OfflineFriends
        /// </summary>
        [DataMember(Name = "offlineFriends", EmitDefaultValue = false)]
        public List<string> OfflineFriends { get; set; }

        /// <summary>
        /// Gets or Sets OnlineFriends
        /// </summary>
        [DataMember(Name = "onlineFriends", EmitDefaultValue = false)]
        public List<string> OnlineFriends { get; set; }

        /// <summary>
        ///  
        /// </summary>
        /// <value> </value>
        [DataMember(Name = "pastDisplayNames", IsRequired = true, EmitDefaultValue = true)]
        public List<PastDisplayName> PastDisplayNames { get; set; }

        /// <summary>
        /// Gets or Sets Presence
        /// </summary>
        [DataMember(Name = "presence", EmitDefaultValue = false)]
        public CurrentUserPresence Presence { get; set; }

        /// <summary>
        /// Gets or Sets PlatformHistory
        /// </summary>
        [DataMember(Name = "platform_history", EmitDefaultValue = false)]
        public List<CurrentUserPlatformHistoryInner> PlatformHistory { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicOverride
        /// </summary>
        [DataMember(Name = "profilePicOverride", IsRequired = true, EmitDefaultValue = true)]
        public string ProfilePicOverride { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicOverrideThumbnail
        /// </summary>
        [DataMember(Name = "profilePicOverrideThumbnail", IsRequired = true, EmitDefaultValue = true)]
        public string ProfilePicOverrideThumbnail { get; set; }

        /// <summary>
        /// Gets or Sets Pronouns
        /// </summary>
        [DataMember(Name = "pronouns", IsRequired = true, EmitDefaultValue = true)]
        public string Pronouns { get; set; }

        /// <summary>
        /// Gets or Sets PronounsHistory
        /// </summary>
        [DataMember(Name = "pronounsHistory", IsRequired = true, EmitDefaultValue = true)]
        public List<string> PronounsHistory { get; set; }

        /// <summary>
        /// Gets or Sets QueuedInstance
        /// </summary>
        [DataMember(Name = "queuedInstance", EmitDefaultValue = true)]
        public string QueuedInstance { get; set; }

        /// <summary>
        /// Gets or Sets ReceiveMobileInvitations
        /// </summary>
        [DataMember(Name = "receiveMobileInvitations", EmitDefaultValue = true)]
        public bool ReceiveMobileInvitations { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "statusDescription", IsRequired = true, EmitDefaultValue = true)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets StatusFirstTime
        /// </summary>
        [DataMember(Name = "statusFirstTime", IsRequired = true, EmitDefaultValue = true)]
        public bool StatusFirstTime { get; set; }

        /// <summary>
        /// Gets or Sets StatusHistory
        /// </summary>
        [DataMember(Name = "statusHistory", IsRequired = true, EmitDefaultValue = true)]
        public List<string> StatusHistory { get; set; }

        /// <summary>
        /// Gets or Sets SteamDetails
        /// </summary>
        [DataMember(Name = "steamDetails", IsRequired = true, EmitDefaultValue = true)]
        public Object SteamDetails { get; set; }

        /// <summary>
        /// Gets or Sets SteamId
        /// </summary>
        [DataMember(Name = "steamId", IsRequired = true, EmitDefaultValue = true)]
        public string SteamId { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorAuthEnabled
        /// </summary>
        [DataMember(Name = "twoFactorAuthEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool TwoFactorAuthEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorAuthEnabledDate
        /// </summary>
        [DataMember(Name = "twoFactorAuthEnabledDate", EmitDefaultValue = true)]
        public DateTime? TwoFactorAuthEnabledDate { get; set; }

        /// <summary>
        /// Gets or Sets Unsubscribe
        /// </summary>
        [DataMember(Name = "unsubscribe", IsRequired = true, EmitDefaultValue = true)]
        public bool Unsubscribe { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserIcon
        /// </summary>
        [DataMember(Name = "userIcon", IsRequired = true, EmitDefaultValue = true)]
        public string UserIcon { get; set; }

        /// <summary>
        /// -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
        /// </summary>
        /// <value>-| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        [Obsolete]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrentUser {\n");
            sb.Append("  AcceptedTOSVersion: ").Append(AcceptedTOSVersion).Append("\n");
            sb.Append("  AcceptedPrivacyVersion: ").Append(AcceptedPrivacyVersion).Append("\n");
            sb.Append("  AccountDeletionDate: ").Append(AccountDeletionDate).Append("\n");
            sb.Append("  AccountDeletionLog: ").Append(AccountDeletionLog).Append("\n");
            sb.Append("  ActiveFriends: ").Append(ActiveFriends).Append("\n");
            sb.Append("  AgeVerificationStatus: ").Append(AgeVerificationStatus).Append("\n");
            sb.Append("  AgeVerified: ").Append(AgeVerified).Append("\n");
            sb.Append("  AllowAvatarCopying: ").Append(AllowAvatarCopying).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  Badges: ").Append(Badges).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  BioLinks: ").Append(BioLinks).Append("\n");
            sb.Append("  ContentFilters: ").Append(ContentFilters).Append("\n");
            sb.Append("  CurrentAvatar: ").Append(CurrentAvatar).Append("\n");
            sb.Append("  CurrentAvatarImageUrl: ").Append(CurrentAvatarImageUrl).Append("\n");
            sb.Append("  CurrentAvatarThumbnailImageUrl: ").Append(CurrentAvatarThumbnailImageUrl).Append("\n");
            sb.Append("  CurrentAvatarTags: ").Append(CurrentAvatarTags).Append("\n");
            sb.Append("  DateJoined: ").Append(DateJoined).Append("\n");
            sb.Append("  DeveloperType: ").Append(DeveloperType).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  FallbackAvatar: ").Append(FallbackAvatar).Append("\n");
            sb.Append("  FriendGroupNames: ").Append(FriendGroupNames).Append("\n");
            sb.Append("  FriendKey: ").Append(FriendKey).Append("\n");
            sb.Append("  Friends: ").Append(Friends).Append("\n");
            sb.Append("  HasBirthday: ").Append(HasBirthday).Append("\n");
            sb.Append("  HideContentFilterSettings: ").Append(HideContentFilterSettings).Append("\n");
            sb.Append("  UserLanguage: ").Append(UserLanguage).Append("\n");
            sb.Append("  UserLanguageCode: ").Append(UserLanguageCode).Append("\n");
            sb.Append("  HasEmail: ").Append(HasEmail).Append("\n");
            sb.Append("  HasLoggedInFromClient: ").Append(HasLoggedInFromClient).Append("\n");
            sb.Append("  HasPendingEmail: ").Append(HasPendingEmail).Append("\n");
            sb.Append("  HomeLocation: ").Append(HomeLocation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAdult: ").Append(IsAdult).Append("\n");
            sb.Append("  IsBoopingEnabled: ").Append(IsBoopingEnabled).Append("\n");
            sb.Append("  IsFriend: ").Append(IsFriend).Append("\n");
            sb.Append("  LastActivity: ").Append(LastActivity).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  LastMobile: ").Append(LastMobile).Append("\n");
            sb.Append("  LastPlatform: ").Append(LastPlatform).Append("\n");
            sb.Append("  ObfuscatedEmail: ").Append(ObfuscatedEmail).Append("\n");
            sb.Append("  ObfuscatedPendingEmail: ").Append(ObfuscatedPendingEmail).Append("\n");
            sb.Append("  OculusId: ").Append(OculusId).Append("\n");
            sb.Append("  GoogleId: ").Append(GoogleId).Append("\n");
            sb.Append("  GoogleDetails: ").Append(GoogleDetails).Append("\n");
            sb.Append("  PicoId: ").Append(PicoId).Append("\n");
            sb.Append("  ViveId: ").Append(ViveId).Append("\n");
            sb.Append("  OfflineFriends: ").Append(OfflineFriends).Append("\n");
            sb.Append("  OnlineFriends: ").Append(OnlineFriends).Append("\n");
            sb.Append("  PastDisplayNames: ").Append(PastDisplayNames).Append("\n");
            sb.Append("  Presence: ").Append(Presence).Append("\n");
            sb.Append("  PlatformHistory: ").Append(PlatformHistory).Append("\n");
            sb.Append("  ProfilePicOverride: ").Append(ProfilePicOverride).Append("\n");
            sb.Append("  ProfilePicOverrideThumbnail: ").Append(ProfilePicOverrideThumbnail).Append("\n");
            sb.Append("  Pronouns: ").Append(Pronouns).Append("\n");
            sb.Append("  PronounsHistory: ").Append(PronounsHistory).Append("\n");
            sb.Append("  QueuedInstance: ").Append(QueuedInstance).Append("\n");
            sb.Append("  ReceiveMobileInvitations: ").Append(ReceiveMobileInvitations).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  StatusFirstTime: ").Append(StatusFirstTime).Append("\n");
            sb.Append("  StatusHistory: ").Append(StatusHistory).Append("\n");
            sb.Append("  SteamDetails: ").Append(SteamDetails).Append("\n");
            sb.Append("  SteamId: ").Append(SteamId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TwoFactorAuthEnabled: ").Append(TwoFactorAuthEnabled).Append("\n");
            sb.Append("  TwoFactorAuthEnabledDate: ").Append(TwoFactorAuthEnabledDate).Append("\n");
            sb.Append("  Unsubscribe: ").Append(Unsubscribe).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserIcon: ").Append(UserIcon).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrentUser);
        }

        /// <summary>
        /// Returns true if CurrentUser instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrentUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrentUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AcceptedTOSVersion == input.AcceptedTOSVersion ||
                    this.AcceptedTOSVersion.Equals(input.AcceptedTOSVersion)
                ) && 
                (
                    this.AcceptedPrivacyVersion == input.AcceptedPrivacyVersion ||
                    this.AcceptedPrivacyVersion.Equals(input.AcceptedPrivacyVersion)
                ) && 
                (
                    this.AccountDeletionDate == input.AccountDeletionDate ||
                    (this.AccountDeletionDate != null &&
                    this.AccountDeletionDate.Equals(input.AccountDeletionDate))
                ) && 
                (
                    this.AccountDeletionLog == input.AccountDeletionLog ||
                    this.AccountDeletionLog != null &&
                    input.AccountDeletionLog != null &&
                    this.AccountDeletionLog.SequenceEqual(input.AccountDeletionLog)
                ) && 
                (
                    this.ActiveFriends == input.ActiveFriends ||
                    this.ActiveFriends != null &&
                    input.ActiveFriends != null &&
                    this.ActiveFriends.SequenceEqual(input.ActiveFriends)
                ) && 
                (
                    this.AgeVerificationStatus == input.AgeVerificationStatus ||
                    this.AgeVerificationStatus.Equals(input.AgeVerificationStatus)
                ) && 
                (
                    this.AgeVerified == input.AgeVerified ||
                    this.AgeVerified.Equals(input.AgeVerified)
                ) && 
                (
                    this.AllowAvatarCopying == input.AllowAvatarCopying ||
                    this.AllowAvatarCopying.Equals(input.AllowAvatarCopying)
                ) && 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                ) && 
                (
                    this.Badges == input.Badges ||
                    this.Badges != null &&
                    input.Badges != null &&
                    this.Badges.SequenceEqual(input.Badges)
                ) && 
                (
                    this.Bio == input.Bio ||
                    (this.Bio != null &&
                    this.Bio.Equals(input.Bio))
                ) && 
                (
                    this.BioLinks == input.BioLinks ||
                    this.BioLinks != null &&
                    input.BioLinks != null &&
                    this.BioLinks.SequenceEqual(input.BioLinks)
                ) && 
                (
                    this.ContentFilters == input.ContentFilters ||
                    this.ContentFilters != null &&
                    input.ContentFilters != null &&
                    this.ContentFilters.SequenceEqual(input.ContentFilters)
                ) && 
                (
                    this.CurrentAvatar == input.CurrentAvatar ||
                    (this.CurrentAvatar != null &&
                    this.CurrentAvatar.Equals(input.CurrentAvatar))
                ) && 
                (
                    this.CurrentAvatarImageUrl == input.CurrentAvatarImageUrl ||
                    (this.CurrentAvatarImageUrl != null &&
                    this.CurrentAvatarImageUrl.Equals(input.CurrentAvatarImageUrl))
                ) && 
                (
                    this.CurrentAvatarThumbnailImageUrl == input.CurrentAvatarThumbnailImageUrl ||
                    (this.CurrentAvatarThumbnailImageUrl != null &&
                    this.CurrentAvatarThumbnailImageUrl.Equals(input.CurrentAvatarThumbnailImageUrl))
                ) && 
                (
                    this.CurrentAvatarTags == input.CurrentAvatarTags ||
                    this.CurrentAvatarTags != null &&
                    input.CurrentAvatarTags != null &&
                    this.CurrentAvatarTags.SequenceEqual(input.CurrentAvatarTags)
                ) && 
                (
                    this.DateJoined == input.DateJoined ||
                    (this.DateJoined != null &&
                    this.DateJoined.Equals(input.DateJoined))
                ) && 
                (
                    this.DeveloperType == input.DeveloperType ||
                    this.DeveloperType.Equals(input.DeveloperType)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    this.EmailVerified.Equals(input.EmailVerified)
                ) && 
                (
                    this.FallbackAvatar == input.FallbackAvatar ||
                    (this.FallbackAvatar != null &&
                    this.FallbackAvatar.Equals(input.FallbackAvatar))
                ) && 
                (
                    this.FriendGroupNames == input.FriendGroupNames ||
                    this.FriendGroupNames != null &&
                    input.FriendGroupNames != null &&
                    this.FriendGroupNames.SequenceEqual(input.FriendGroupNames)
                ) && 
                (
                    this.FriendKey == input.FriendKey ||
                    (this.FriendKey != null &&
                    this.FriendKey.Equals(input.FriendKey))
                ) && 
                (
                    this.Friends == input.Friends ||
                    this.Friends != null &&
                    input.Friends != null &&
                    this.Friends.SequenceEqual(input.Friends)
                ) && 
                (
                    this.HasBirthday == input.HasBirthday ||
                    this.HasBirthday.Equals(input.HasBirthday)
                ) && 
                (
                    this.HideContentFilterSettings == input.HideContentFilterSettings ||
                    this.HideContentFilterSettings.Equals(input.HideContentFilterSettings)
                ) && 
                (
                    this.UserLanguage == input.UserLanguage ||
                    (this.UserLanguage != null &&
                    this.UserLanguage.Equals(input.UserLanguage))
                ) && 
                (
                    this.UserLanguageCode == input.UserLanguageCode ||
                    (this.UserLanguageCode != null &&
                    this.UserLanguageCode.Equals(input.UserLanguageCode))
                ) && 
                (
                    this.HasEmail == input.HasEmail ||
                    this.HasEmail.Equals(input.HasEmail)
                ) && 
                (
                    this.HasLoggedInFromClient == input.HasLoggedInFromClient ||
                    this.HasLoggedInFromClient.Equals(input.HasLoggedInFromClient)
                ) && 
                (
                    this.HasPendingEmail == input.HasPendingEmail ||
                    this.HasPendingEmail.Equals(input.HasPendingEmail)
                ) && 
                (
                    this.HomeLocation == input.HomeLocation ||
                    (this.HomeLocation != null &&
                    this.HomeLocation.Equals(input.HomeLocation))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsAdult == input.IsAdult ||
                    this.IsAdult.Equals(input.IsAdult)
                ) && 
                (
                    this.IsBoopingEnabled == input.IsBoopingEnabled ||
                    this.IsBoopingEnabled.Equals(input.IsBoopingEnabled)
                ) && 
                (
                    this.IsFriend == input.IsFriend ||
                    this.IsFriend.Equals(input.IsFriend)
                ) && 
                (
                    this.LastActivity == input.LastActivity ||
                    (this.LastActivity != null &&
                    this.LastActivity.Equals(input.LastActivity))
                ) && 
                (
                    this.LastLogin == input.LastLogin ||
                    (this.LastLogin != null &&
                    this.LastLogin.Equals(input.LastLogin))
                ) && 
                (
                    this.LastMobile == input.LastMobile ||
                    (this.LastMobile != null &&
                    this.LastMobile.Equals(input.LastMobile))
                ) && 
                (
                    this.LastPlatform == input.LastPlatform ||
                    (this.LastPlatform != null &&
                    this.LastPlatform.Equals(input.LastPlatform))
                ) && 
                (
                    this.ObfuscatedEmail == input.ObfuscatedEmail ||
                    (this.ObfuscatedEmail != null &&
                    this.ObfuscatedEmail.Equals(input.ObfuscatedEmail))
                ) && 
                (
                    this.ObfuscatedPendingEmail == input.ObfuscatedPendingEmail ||
                    (this.ObfuscatedPendingEmail != null &&
                    this.ObfuscatedPendingEmail.Equals(input.ObfuscatedPendingEmail))
                ) && 
                (
                    this.OculusId == input.OculusId ||
                    (this.OculusId != null &&
                    this.OculusId.Equals(input.OculusId))
                ) && 
                (
                    this.GoogleId == input.GoogleId ||
                    (this.GoogleId != null &&
                    this.GoogleId.Equals(input.GoogleId))
                ) && 
                (
                    this.GoogleDetails == input.GoogleDetails ||
                    (this.GoogleDetails != null &&
                    this.GoogleDetails.Equals(input.GoogleDetails))
                ) && 
                (
                    this.PicoId == input.PicoId ||
                    (this.PicoId != null &&
                    this.PicoId.Equals(input.PicoId))
                ) && 
                (
                    this.ViveId == input.ViveId ||
                    (this.ViveId != null &&
                    this.ViveId.Equals(input.ViveId))
                ) && 
                (
                    this.OfflineFriends == input.OfflineFriends ||
                    this.OfflineFriends != null &&
                    input.OfflineFriends != null &&
                    this.OfflineFriends.SequenceEqual(input.OfflineFriends)
                ) && 
                (
                    this.OnlineFriends == input.OnlineFriends ||
                    this.OnlineFriends != null &&
                    input.OnlineFriends != null &&
                    this.OnlineFriends.SequenceEqual(input.OnlineFriends)
                ) && 
                (
                    this.PastDisplayNames == input.PastDisplayNames ||
                    this.PastDisplayNames != null &&
                    input.PastDisplayNames != null &&
                    this.PastDisplayNames.SequenceEqual(input.PastDisplayNames)
                ) && 
                (
                    this.Presence == input.Presence ||
                    (this.Presence != null &&
                    this.Presence.Equals(input.Presence))
                ) && 
                (
                    this.PlatformHistory == input.PlatformHistory ||
                    this.PlatformHistory != null &&
                    input.PlatformHistory != null &&
                    this.PlatformHistory.SequenceEqual(input.PlatformHistory)
                ) && 
                (
                    this.ProfilePicOverride == input.ProfilePicOverride ||
                    (this.ProfilePicOverride != null &&
                    this.ProfilePicOverride.Equals(input.ProfilePicOverride))
                ) && 
                (
                    this.ProfilePicOverrideThumbnail == input.ProfilePicOverrideThumbnail ||
                    (this.ProfilePicOverrideThumbnail != null &&
                    this.ProfilePicOverrideThumbnail.Equals(input.ProfilePicOverrideThumbnail))
                ) && 
                (
                    this.Pronouns == input.Pronouns ||
                    (this.Pronouns != null &&
                    this.Pronouns.Equals(input.Pronouns))
                ) && 
                (
                    this.PronounsHistory == input.PronounsHistory ||
                    this.PronounsHistory != null &&
                    input.PronounsHistory != null &&
                    this.PronounsHistory.SequenceEqual(input.PronounsHistory)
                ) && 
                (
                    this.QueuedInstance == input.QueuedInstance ||
                    (this.QueuedInstance != null &&
                    this.QueuedInstance.Equals(input.QueuedInstance))
                ) && 
                (
                    this.ReceiveMobileInvitations == input.ReceiveMobileInvitations ||
                    this.ReceiveMobileInvitations.Equals(input.ReceiveMobileInvitations)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.StatusFirstTime == input.StatusFirstTime ||
                    this.StatusFirstTime.Equals(input.StatusFirstTime)
                ) && 
                (
                    this.StatusHistory == input.StatusHistory ||
                    this.StatusHistory != null &&
                    input.StatusHistory != null &&
                    this.StatusHistory.SequenceEqual(input.StatusHistory)
                ) && 
                (
                    this.SteamDetails == input.SteamDetails ||
                    (this.SteamDetails != null &&
                    this.SteamDetails.Equals(input.SteamDetails))
                ) && 
                (
                    this.SteamId == input.SteamId ||
                    (this.SteamId != null &&
                    this.SteamId.Equals(input.SteamId))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TwoFactorAuthEnabled == input.TwoFactorAuthEnabled ||
                    this.TwoFactorAuthEnabled.Equals(input.TwoFactorAuthEnabled)
                ) && 
                (
                    this.TwoFactorAuthEnabledDate == input.TwoFactorAuthEnabledDate ||
                    (this.TwoFactorAuthEnabledDate != null &&
                    this.TwoFactorAuthEnabledDate.Equals(input.TwoFactorAuthEnabledDate))
                ) && 
                (
                    this.Unsubscribe == input.Unsubscribe ||
                    this.Unsubscribe.Equals(input.Unsubscribe)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserIcon == input.UserIcon ||
                    (this.UserIcon != null &&
                    this.UserIcon.Equals(input.UserIcon))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AcceptedTOSVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.AcceptedPrivacyVersion.GetHashCode();
                if (this.AccountDeletionDate != null)
                {
                    hashCode = (hashCode * 59) + this.AccountDeletionDate.GetHashCode();
                }
                if (this.AccountDeletionLog != null)
                {
                    hashCode = (hashCode * 59) + this.AccountDeletionLog.GetHashCode();
                }
                if (this.ActiveFriends != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveFriends.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AgeVerificationStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.AgeVerified.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowAvatarCopying.GetHashCode();
                if (this.AuthToken != null)
                {
                    hashCode = (hashCode * 59) + this.AuthToken.GetHashCode();
                }
                if (this.Badges != null)
                {
                    hashCode = (hashCode * 59) + this.Badges.GetHashCode();
                }
                if (this.Bio != null)
                {
                    hashCode = (hashCode * 59) + this.Bio.GetHashCode();
                }
                if (this.BioLinks != null)
                {
                    hashCode = (hashCode * 59) + this.BioLinks.GetHashCode();
                }
                if (this.ContentFilters != null)
                {
                    hashCode = (hashCode * 59) + this.ContentFilters.GetHashCode();
                }
                if (this.CurrentAvatar != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentAvatar.GetHashCode();
                }
                if (this.CurrentAvatarImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentAvatarImageUrl.GetHashCode();
                }
                if (this.CurrentAvatarThumbnailImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentAvatarThumbnailImageUrl.GetHashCode();
                }
                if (this.CurrentAvatarTags != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentAvatarTags.GetHashCode();
                }
                if (this.DateJoined != null)
                {
                    hashCode = (hashCode * 59) + this.DateJoined.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeveloperType.GetHashCode();
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailVerified.GetHashCode();
                if (this.FallbackAvatar != null)
                {
                    hashCode = (hashCode * 59) + this.FallbackAvatar.GetHashCode();
                }
                if (this.FriendGroupNames != null)
                {
                    hashCode = (hashCode * 59) + this.FriendGroupNames.GetHashCode();
                }
                if (this.FriendKey != null)
                {
                    hashCode = (hashCode * 59) + this.FriendKey.GetHashCode();
                }
                if (this.Friends != null)
                {
                    hashCode = (hashCode * 59) + this.Friends.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasBirthday.GetHashCode();
                hashCode = (hashCode * 59) + this.HideContentFilterSettings.GetHashCode();
                if (this.UserLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.UserLanguage.GetHashCode();
                }
                if (this.UserLanguageCode != null)
                {
                    hashCode = (hashCode * 59) + this.UserLanguageCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.HasLoggedInFromClient.GetHashCode();
                hashCode = (hashCode * 59) + this.HasPendingEmail.GetHashCode();
                if (this.HomeLocation != null)
                {
                    hashCode = (hashCode * 59) + this.HomeLocation.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAdult.GetHashCode();
                hashCode = (hashCode * 59) + this.IsBoopingEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsFriend.GetHashCode();
                if (this.LastActivity != null)
                {
                    hashCode = (hashCode * 59) + this.LastActivity.GetHashCode();
                }
                if (this.LastLogin != null)
                {
                    hashCode = (hashCode * 59) + this.LastLogin.GetHashCode();
                }
                if (this.LastMobile != null)
                {
                    hashCode = (hashCode * 59) + this.LastMobile.GetHashCode();
                }
                if (this.LastPlatform != null)
                {
                    hashCode = (hashCode * 59) + this.LastPlatform.GetHashCode();
                }
                if (this.ObfuscatedEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ObfuscatedEmail.GetHashCode();
                }
                if (this.ObfuscatedPendingEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ObfuscatedPendingEmail.GetHashCode();
                }
                if (this.OculusId != null)
                {
                    hashCode = (hashCode * 59) + this.OculusId.GetHashCode();
                }
                if (this.GoogleId != null)
                {
                    hashCode = (hashCode * 59) + this.GoogleId.GetHashCode();
                }
                if (this.GoogleDetails != null)
                {
                    hashCode = (hashCode * 59) + this.GoogleDetails.GetHashCode();
                }
                if (this.PicoId != null)
                {
                    hashCode = (hashCode * 59) + this.PicoId.GetHashCode();
                }
                if (this.ViveId != null)
                {
                    hashCode = (hashCode * 59) + this.ViveId.GetHashCode();
                }
                if (this.OfflineFriends != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineFriends.GetHashCode();
                }
                if (this.OnlineFriends != null)
                {
                    hashCode = (hashCode * 59) + this.OnlineFriends.GetHashCode();
                }
                if (this.PastDisplayNames != null)
                {
                    hashCode = (hashCode * 59) + this.PastDisplayNames.GetHashCode();
                }
                if (this.Presence != null)
                {
                    hashCode = (hashCode * 59) + this.Presence.GetHashCode();
                }
                if (this.PlatformHistory != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformHistory.GetHashCode();
                }
                if (this.ProfilePicOverride != null)
                {
                    hashCode = (hashCode * 59) + this.ProfilePicOverride.GetHashCode();
                }
                if (this.ProfilePicOverrideThumbnail != null)
                {
                    hashCode = (hashCode * 59) + this.ProfilePicOverrideThumbnail.GetHashCode();
                }
                if (this.Pronouns != null)
                {
                    hashCode = (hashCode * 59) + this.Pronouns.GetHashCode();
                }
                if (this.PronounsHistory != null)
                {
                    hashCode = (hashCode * 59) + this.PronounsHistory.GetHashCode();
                }
                if (this.QueuedInstance != null)
                {
                    hashCode = (hashCode * 59) + this.QueuedInstance.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReceiveMobileInvitations.GetHashCode();
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusFirstTime.GetHashCode();
                if (this.StatusHistory != null)
                {
                    hashCode = (hashCode * 59) + this.StatusHistory.GetHashCode();
                }
                if (this.SteamDetails != null)
                {
                    hashCode = (hashCode * 59) + this.SteamDetails.GetHashCode();
                }
                if (this.SteamId != null)
                {
                    hashCode = (hashCode * 59) + this.SteamId.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TwoFactorAuthEnabled.GetHashCode();
                if (this.TwoFactorAuthEnabledDate != null)
                {
                    hashCode = (hashCode * 59) + this.TwoFactorAuthEnabledDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Unsubscribe.GetHashCode();
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.UserIcon != null)
                {
                    hashCode = (hashCode * 59) + this.UserIcon.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AcceptedTOSVersion (int) minimum
            if (this.AcceptedTOSVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcceptedTOSVersion, must be a value greater than or equal to 0.", new [] { "AcceptedTOSVersion" });
            }

            // AcceptedPrivacyVersion (int) minimum
            if (this.AcceptedPrivacyVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcceptedPrivacyVersion, must be a value greater than or equal to 0.", new [] { "AcceptedPrivacyVersion" });
            }

            yield break;
        }
    }

}
