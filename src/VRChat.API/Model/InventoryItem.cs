/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// InventoryItem
    /// </summary>
    [DataContract(Name = "InventoryItem")]
    public partial class InventoryItem : IEquatable<InventoryItem>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "itemType", IsRequired = true, EmitDefaultValue = true)]
        public InventoryItemType ItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InventoryItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItem" /> class.
        /// </summary>
        /// <param name="collections">collections (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="expiryDate">expiryDate (required).</param>
        /// <param name="flags">flags (required).</param>
        /// <param name="holderId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="imageUrl">imageUrl (required).</param>
        /// <param name="isArchived">isArchived (required).</param>
        /// <param name="isSeen">isSeen (required).</param>
        /// <param name="itemType">itemType (required).</param>
        /// <param name="itemTypeLabel">itemTypeLabel (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="templateId">templateId (required).</param>
        /// <param name="templateCreatedAt">templateCreatedAt (required).</param>
        /// <param name="templateUpdatedAt">templateUpdatedAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public InventoryItem(List<string> collections = default(List<string>), DateTime createdAt = default(DateTime), string description = default(string), DateTime? expiryDate = default(DateTime?), List<string> flags = default(List<string>), string holderId = default(string), string id = default(string), string imageUrl = default(string), bool isArchived = default(bool), bool isSeen = default(bool), InventoryItemType itemType = default(InventoryItemType), string itemTypeLabel = default(string), InventoryMetadata metadata = default(InventoryMetadata), string name = default(string), List<string> tags = default(List<string>), string templateId = default(string), DateTime templateCreatedAt = default(DateTime), DateTime templateUpdatedAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            // to ensure "collections" is required (not null)
            if (collections == null)
            {
                throw new ArgumentNullException("collections is a required property for InventoryItem and cannot be null");
            }
            this.Collections = collections;
            this.CreatedAt = createdAt;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for InventoryItem and cannot be null");
            }
            this.Description = description;
            // to ensure "expiryDate" is required (not null)
            if (expiryDate == null)
            {
                throw new ArgumentNullException("expiryDate is a required property for InventoryItem and cannot be null");
            }
            this.ExpiryDate = expiryDate;
            // to ensure "flags" is required (not null)
            if (flags == null)
            {
                throw new ArgumentNullException("flags is a required property for InventoryItem and cannot be null");
            }
            this.Flags = flags;
            // to ensure "holderId" is required (not null)
            if (holderId == null)
            {
                throw new ArgumentNullException("holderId is a required property for InventoryItem and cannot be null");
            }
            this.HolderId = holderId;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for InventoryItem and cannot be null");
            }
            this.Id = id;
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null)
            {
                throw new ArgumentNullException("imageUrl is a required property for InventoryItem and cannot be null");
            }
            this.ImageUrl = imageUrl;
            this.IsArchived = isArchived;
            this.IsSeen = isSeen;
            this.ItemType = itemType;
            // to ensure "itemTypeLabel" is required (not null)
            if (itemTypeLabel == null)
            {
                throw new ArgumentNullException("itemTypeLabel is a required property for InventoryItem and cannot be null");
            }
            this.ItemTypeLabel = itemTypeLabel;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for InventoryItem and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for InventoryItem and cannot be null");
            }
            this.Name = name;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for InventoryItem and cannot be null");
            }
            this.Tags = tags;
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new ArgumentNullException("templateId is a required property for InventoryItem and cannot be null");
            }
            this.TemplateId = templateId;
            this.TemplateCreatedAt = templateCreatedAt;
            this.TemplateUpdatedAt = templateUpdatedAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets Collections
        /// </summary>
        [DataMember(Name = "collections", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Collections { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name = "expiryDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name = "flags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "holderId", IsRequired = true, EmitDefaultValue = true)]
        public string HolderId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsArchived
        /// </summary>
        [DataMember(Name = "isArchived", IsRequired = true, EmitDefaultValue = true)]
        public bool IsArchived { get; set; }

        /// <summary>
        /// Gets or Sets IsSeen
        /// </summary>
        [DataMember(Name = "isSeen", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSeen { get; set; }

        /// <summary>
        /// Gets or Sets ItemTypeLabel
        /// </summary>
        [DataMember(Name = "itemTypeLabel", IsRequired = true, EmitDefaultValue = true)]
        public string ItemTypeLabel { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public InventoryMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name = "templateId", IsRequired = true, EmitDefaultValue = true)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateCreatedAt
        /// </summary>
        [DataMember(Name = "template_created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime TemplateCreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TemplateUpdatedAt
        /// </summary>
        [DataMember(Name = "template_updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime TemplateUpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryItem {\n");
            sb.Append("  Collections: ").Append(Collections).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  HolderId: ").Append(HolderId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  IsSeen: ").Append(IsSeen).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  ItemTypeLabel: ").Append(ItemTypeLabel).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateCreatedAt: ").Append(TemplateCreatedAt).Append("\n");
            sb.Append("  TemplateUpdatedAt: ").Append(TemplateUpdatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryItem);
        }

        /// <summary>
        /// Returns true if InventoryItem instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Collections == input.Collections ||
                    this.Collections != null &&
                    input.Collections != null &&
                    this.Collections.SequenceEqual(input.Collections)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    input.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.HolderId == input.HolderId ||
                    (this.HolderId != null &&
                    this.HolderId.Equals(input.HolderId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.IsArchived == input.IsArchived ||
                    this.IsArchived.Equals(input.IsArchived)
                ) && 
                (
                    this.IsSeen == input.IsSeen ||
                    this.IsSeen.Equals(input.IsSeen)
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    this.ItemType.Equals(input.ItemType)
                ) && 
                (
                    this.ItemTypeLabel == input.ItemTypeLabel ||
                    (this.ItemTypeLabel != null &&
                    this.ItemTypeLabel.Equals(input.ItemTypeLabel))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.TemplateCreatedAt == input.TemplateCreatedAt ||
                    (this.TemplateCreatedAt != null &&
                    this.TemplateCreatedAt.Equals(input.TemplateCreatedAt))
                ) && 
                (
                    this.TemplateUpdatedAt == input.TemplateUpdatedAt ||
                    (this.TemplateUpdatedAt != null &&
                    this.TemplateUpdatedAt.Equals(input.TemplateUpdatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Collections != null)
                {
                    hashCode = (hashCode * 59) + this.Collections.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                }
                if (this.Flags != null)
                {
                    hashCode = (hashCode * 59) + this.Flags.GetHashCode();
                }
                if (this.HolderId != null)
                {
                    hashCode = (hashCode * 59) + this.HolderId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsArchived.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSeen.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                if (this.ItemTypeLabel != null)
                {
                    hashCode = (hashCode * 59) + this.ItemTypeLabel.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.TemplateCreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateCreatedAt.GetHashCode();
                }
                if (this.TemplateUpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateUpdatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
