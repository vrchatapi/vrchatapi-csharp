/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// * &#x60;hidden&#x60; field is only present if InstanceType is &#x60;hidden&#x60; aka \&quot;Friends+\&quot;, and is instance creator. * &#x60;friends&#x60; field is only present if InstanceType is &#x60;friends&#x60; aka \&quot;Friends\&quot;, and is instance creator. * &#x60;private&#x60; field is only present if InstanceType is &#x60;private&#x60; aka \&quot;Invite\&quot; or \&quot;Invite+\&quot;, and is instance creator.
    /// </summary>
    [DataContract(Name = "Instance")]
    public partial class Instance : IEquatable<Instance>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PhotonRegion
        /// </summary>
        [DataMember(Name = "photonRegion", IsRequired = true, EmitDefaultValue = true)]
        public Region PhotonRegion { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", IsRequired = true, EmitDefaultValue = true)]
        public InstanceRegion Region { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public InstanceType Type { get; set; }

        /// <summary>
        /// Gets or Sets GroupAccessType
        /// </summary>
        [DataMember(Name = "groupAccessType", EmitDefaultValue = false)]
        public GroupAccessType? GroupAccessType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Instance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Instance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Instance" /> class.
        /// </summary>
        /// <param name="active">active (required) (default to true).</param>
        /// <param name="ageGate">ageGate.</param>
        /// <param name="canRequestInvite">canRequestInvite (required) (default to true).</param>
        /// <param name="capacity">capacity (required).</param>
        /// <param name="clientNumber">Always returns \&quot;unknown\&quot;. (required).</param>
        /// <param name="contentSettings">contentSettings (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="full">full (required) (default to false).</param>
        /// <param name="gameServerVersion">gameServerVersion.</param>
        /// <param name="id">InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance. (required).</param>
        /// <param name="instanceId">InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance. (required).</param>
        /// <param name="instancePersistenceEnabled">instancePersistenceEnabled (required).</param>
        /// <param name="location">Represents a unique location, consisting of a world identifier and an instance identifier, or \&quot;offline\&quot; if the user is not on your friends list. (required).</param>
        /// <param name="nUsers">nUsers (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="ownerId">A groupId if the instance type is \&quot;group\&quot;, null if instance type is public, or a userId otherwise.</param>
        /// <param name="permanent">permanent (required) (default to false).</param>
        /// <param name="photonRegion">photonRegion (required).</param>
        /// <param name="platforms">platforms (required).</param>
        /// <param name="playerPersistenceEnabled">playerPersistenceEnabled (required).</param>
        /// <param name="region">region (required).</param>
        /// <param name="secureName">secureName (required).</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="tags">The tags array on Instances usually contain the language tags of the people in the instance.  (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="worldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="hidden">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
        /// <param name="friends">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
        /// <param name="_private">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
        /// <param name="queueEnabled">queueEnabled (required).</param>
        /// <param name="queueSize">queueSize (required).</param>
        /// <param name="recommendedCapacity">recommendedCapacity (required).</param>
        /// <param name="roleRestricted">roleRestricted.</param>
        /// <param name="strict">strict (required).</param>
        /// <param name="userCount">userCount (required).</param>
        /// <param name="world">world (required).</param>
        /// <param name="users">The users field is present on instances created by the requesting user..</param>
        /// <param name="groupAccessType">groupAccessType.</param>
        /// <param name="hasCapacityForYou">hasCapacityForYou.</param>
        /// <param name="nonce">nonce.</param>
        /// <param name="closedAt">closedAt.</param>
        /// <param name="hardClose">hardClose.</param>
        public Instance(bool active = true, bool? ageGate = default(bool?), bool canRequestInvite = true, int capacity = default(int), string clientNumber = default(string), InstanceContentSettings contentSettings = default(InstanceContentSettings), string displayName = default(string), bool full = false, int gameServerVersion = default(int), string id = default(string), string instanceId = default(string), string instancePersistenceEnabled = default(string), string location = default(string), int nUsers = default(int), string name = default(string), string ownerId = default(string), bool permanent = false, Region photonRegion = default(Region), InstancePlatforms platforms = default(InstancePlatforms), bool? playerPersistenceEnabled = default(bool?), InstanceRegion region = default(InstanceRegion), string secureName = default(string), string shortName = default(string), List<string> tags = default(List<string>), InstanceType type = default(InstanceType), string worldId = default(string), string hidden = default(string), string friends = default(string), string _private = default(string), bool queueEnabled = default(bool), int queueSize = default(int), int recommendedCapacity = default(int), bool roleRestricted = default(bool), bool strict = default(bool), int userCount = default(int), World world = default(World), List<LimitedUserInstance> users = default(List<LimitedUserInstance>), GroupAccessType? groupAccessType = default(GroupAccessType?), bool hasCapacityForYou = default(bool), string nonce = default(string), DateTime? closedAt = default(DateTime?), bool? hardClose = default(bool?))
        {
            this.Active = active;
            this.CanRequestInvite = canRequestInvite;
            this.Capacity = capacity;
            // to ensure "clientNumber" is required (not null)
            if (clientNumber == null)
            {
                throw new ArgumentNullException("clientNumber is a required property for Instance and cannot be null");
            }
            this.ClientNumber = clientNumber;
            // to ensure "contentSettings" is required (not null)
            if (contentSettings == null)
            {
                throw new ArgumentNullException("contentSettings is a required property for Instance and cannot be null");
            }
            this.ContentSettings = contentSettings;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for Instance and cannot be null");
            }
            this.DisplayName = displayName;
            this.Full = full;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Instance and cannot be null");
            }
            this.Id = id;
            // to ensure "instanceId" is required (not null)
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId is a required property for Instance and cannot be null");
            }
            this.InstanceId = instanceId;
            // to ensure "instancePersistenceEnabled" is required (not null)
            if (instancePersistenceEnabled == null)
            {
                throw new ArgumentNullException("instancePersistenceEnabled is a required property for Instance and cannot be null");
            }
            this.InstancePersistenceEnabled = instancePersistenceEnabled;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for Instance and cannot be null");
            }
            this.Location = location;
            this.NUsers = nUsers;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Instance and cannot be null");
            }
            this.Name = name;
            this.Permanent = permanent;
            this.PhotonRegion = photonRegion;
            // to ensure "platforms" is required (not null)
            if (platforms == null)
            {
                throw new ArgumentNullException("platforms is a required property for Instance and cannot be null");
            }
            this.Platforms = platforms;
            // to ensure "playerPersistenceEnabled" is required (not null)
            if (playerPersistenceEnabled == null)
            {
                throw new ArgumentNullException("playerPersistenceEnabled is a required property for Instance and cannot be null");
            }
            this.PlayerPersistenceEnabled = playerPersistenceEnabled;
            this.Region = region;
            // to ensure "secureName" is required (not null)
            if (secureName == null)
            {
                throw new ArgumentNullException("secureName is a required property for Instance and cannot be null");
            }
            this.SecureName = secureName;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for Instance and cannot be null");
            }
            this.Tags = tags;
            this.Type = type;
            // to ensure "worldId" is required (not null)
            if (worldId == null)
            {
                throw new ArgumentNullException("worldId is a required property for Instance and cannot be null");
            }
            this.WorldId = worldId;
            this.QueueEnabled = queueEnabled;
            this.QueueSize = queueSize;
            this.RecommendedCapacity = recommendedCapacity;
            this.Strict = strict;
            this.UserCount = userCount;
            // to ensure "world" is required (not null)
            if (world == null)
            {
                throw new ArgumentNullException("world is a required property for Instance and cannot be null");
            }
            this.World = world;
            this.AgeGate = ageGate;
            this.GameServerVersion = gameServerVersion;
            this.OwnerId = ownerId;
            this.ShortName = shortName;
            this.Hidden = hidden;
            this.Friends = friends;
            this.Private = _private;
            this.RoleRestricted = roleRestricted;
            this.Users = users;
            this.GroupAccessType = groupAccessType;
            this.HasCapacityForYou = hasCapacityForYou;
            this.Nonce = nonce;
            this.ClosedAt = closedAt;
            this.HardClose = hardClose;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets AgeGate
        /// </summary>
        [DataMember(Name = "ageGate", EmitDefaultValue = true)]
        public bool? AgeGate { get; set; }

        /// <summary>
        /// Gets or Sets CanRequestInvite
        /// </summary>
        [DataMember(Name = "canRequestInvite", IsRequired = true, EmitDefaultValue = true)]
        public bool CanRequestInvite { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name = "capacity", IsRequired = true, EmitDefaultValue = true)]
        public int Capacity { get; set; }

        /// <summary>
        /// Always returns \&quot;unknown\&quot;.
        /// </summary>
        /// <value>Always returns \&quot;unknown\&quot;.</value>
        [DataMember(Name = "clientNumber", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string ClientNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContentSettings
        /// </summary>
        [DataMember(Name = "contentSettings", IsRequired = true, EmitDefaultValue = true)]
        public InstanceContentSettings ContentSettings { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Full
        /// </summary>
        [DataMember(Name = "full", IsRequired = true, EmitDefaultValue = true)]
        public bool Full { get; set; }

        /// <summary>
        /// Gets or Sets GameServerVersion
        /// </summary>
        [DataMember(Name = "gameServerVersion", EmitDefaultValue = false)]
        public int GameServerVersion { get; set; }

        /// <summary>
        /// InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.
        /// </summary>
        /// <value>InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.
        /// </summary>
        /// <value>InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.</value>
        [DataMember(Name = "instanceId", IsRequired = true, EmitDefaultValue = true)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets InstancePersistenceEnabled
        /// </summary>
        [DataMember(Name = "instancePersistenceEnabled", IsRequired = true, EmitDefaultValue = true)]
        public string InstancePersistenceEnabled { get; set; }

        /// <summary>
        /// Represents a unique location, consisting of a world identifier and an instance identifier, or \&quot;offline\&quot; if the user is not on your friends list.
        /// </summary>
        /// <value>Represents a unique location, consisting of a world identifier and an instance identifier, or \&quot;offline\&quot; if the user is not on your friends list.</value>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets NUsers
        /// </summary>
        [DataMember(Name = "n_users", IsRequired = true, EmitDefaultValue = true)]
        public int NUsers { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A groupId if the instance type is \&quot;group\&quot;, null if instance type is public, or a userId otherwise
        /// </summary>
        /// <value>A groupId if the instance type is \&quot;group\&quot;, null if instance type is public, or a userId otherwise</value>
        [DataMember(Name = "ownerId", EmitDefaultValue = true)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Permanent
        /// </summary>
        [DataMember(Name = "permanent", IsRequired = true, EmitDefaultValue = true)]
        public bool Permanent { get; set; }

        /// <summary>
        /// Gets or Sets Platforms
        /// </summary>
        [DataMember(Name = "platforms", IsRequired = true, EmitDefaultValue = true)]
        public InstancePlatforms Platforms { get; set; }

        /// <summary>
        /// Gets or Sets PlayerPersistenceEnabled
        /// </summary>
        [DataMember(Name = "playerPersistenceEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool? PlayerPersistenceEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SecureName
        /// </summary>
        [DataMember(Name = "secureName", IsRequired = true, EmitDefaultValue = true)]
        public string SecureName { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name = "shortName", EmitDefaultValue = true)]
        public string ShortName { get; set; }

        /// <summary>
        /// The tags array on Instances usually contain the language tags of the people in the instance. 
        /// </summary>
        /// <value>The tags array on Instances usually contain the language tags of the people in the instance. </value>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "worldId", IsRequired = true, EmitDefaultValue = true)]
        public string WorldId { get; set; }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "hidden", EmitDefaultValue = false)]
        public string Hidden { get; set; }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "friends", EmitDefaultValue = false)]
        public string Friends { get; set; }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "private", EmitDefaultValue = false)]
        public string Private { get; set; }

        /// <summary>
        /// Gets or Sets QueueEnabled
        /// </summary>
        [DataMember(Name = "queueEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool QueueEnabled { get; set; }

        /// <summary>
        /// Gets or Sets QueueSize
        /// </summary>
        [DataMember(Name = "queueSize", IsRequired = true, EmitDefaultValue = true)]
        public int QueueSize { get; set; }

        /// <summary>
        /// Gets or Sets RecommendedCapacity
        /// </summary>
        [DataMember(Name = "recommendedCapacity", IsRequired = true, EmitDefaultValue = true)]
        public int RecommendedCapacity { get; set; }

        /// <summary>
        /// Gets or Sets RoleRestricted
        /// </summary>
        [DataMember(Name = "roleRestricted", EmitDefaultValue = true)]
        public bool RoleRestricted { get; set; }

        /// <summary>
        /// Gets or Sets Strict
        /// </summary>
        [DataMember(Name = "strict", IsRequired = true, EmitDefaultValue = true)]
        public bool Strict { get; set; }

        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name = "userCount", IsRequired = true, EmitDefaultValue = true)]
        public int UserCount { get; set; }

        /// <summary>
        /// Gets or Sets World
        /// </summary>
        [DataMember(Name = "world", IsRequired = true, EmitDefaultValue = true)]
        public World World { get; set; }

        /// <summary>
        /// The users field is present on instances created by the requesting user.
        /// </summary>
        /// <value>The users field is present on instances created by the requesting user.</value>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public List<LimitedUserInstance> Users { get; set; }

        /// <summary>
        /// Gets or Sets HasCapacityForYou
        /// </summary>
        [DataMember(Name = "hasCapacityForYou", EmitDefaultValue = true)]
        public bool HasCapacityForYou { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", EmitDefaultValue = false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Gets or Sets ClosedAt
        /// </summary>
        [DataMember(Name = "closedAt", EmitDefaultValue = true)]
        public DateTime? ClosedAt { get; set; }

        /// <summary>
        /// Gets or Sets HardClose
        /// </summary>
        [DataMember(Name = "hardClose", EmitDefaultValue = true)]
        public bool? HardClose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Instance {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AgeGate: ").Append(AgeGate).Append("\n");
            sb.Append("  CanRequestInvite: ").Append(CanRequestInvite).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  ClientNumber: ").Append(ClientNumber).Append("\n");
            sb.Append("  ContentSettings: ").Append(ContentSettings).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("  GameServerVersion: ").Append(GameServerVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  InstancePersistenceEnabled: ").Append(InstancePersistenceEnabled).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  NUsers: ").Append(NUsers).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Permanent: ").Append(Permanent).Append("\n");
            sb.Append("  PhotonRegion: ").Append(PhotonRegion).Append("\n");
            sb.Append("  Platforms: ").Append(Platforms).Append("\n");
            sb.Append("  PlayerPersistenceEnabled: ").Append(PlayerPersistenceEnabled).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  SecureName: ").Append(SecureName).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WorldId: ").Append(WorldId).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Friends: ").Append(Friends).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  QueueEnabled: ").Append(QueueEnabled).Append("\n");
            sb.Append("  QueueSize: ").Append(QueueSize).Append("\n");
            sb.Append("  RecommendedCapacity: ").Append(RecommendedCapacity).Append("\n");
            sb.Append("  RoleRestricted: ").Append(RoleRestricted).Append("\n");
            sb.Append("  Strict: ").Append(Strict).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  World: ").Append(World).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  GroupAccessType: ").Append(GroupAccessType).Append("\n");
            sb.Append("  HasCapacityForYou: ").Append(HasCapacityForYou).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  ClosedAt: ").Append(ClosedAt).Append("\n");
            sb.Append("  HardClose: ").Append(HardClose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Instance);
        }

        /// <summary>
        /// Returns true if Instance instances are equal
        /// </summary>
        /// <param name="input">Instance of Instance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Instance input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.AgeGate == input.AgeGate ||
                    (this.AgeGate != null &&
                    this.AgeGate.Equals(input.AgeGate))
                ) && 
                (
                    this.CanRequestInvite == input.CanRequestInvite ||
                    this.CanRequestInvite.Equals(input.CanRequestInvite)
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    this.Capacity.Equals(input.Capacity)
                ) && 
                (
                    this.ClientNumber == input.ClientNumber ||
                    (this.ClientNumber != null &&
                    this.ClientNumber.Equals(input.ClientNumber))
                ) && 
                (
                    this.ContentSettings == input.ContentSettings ||
                    (this.ContentSettings != null &&
                    this.ContentSettings.Equals(input.ContentSettings))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Full == input.Full ||
                    this.Full.Equals(input.Full)
                ) && 
                (
                    this.GameServerVersion == input.GameServerVersion ||
                    this.GameServerVersion.Equals(input.GameServerVersion)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.InstancePersistenceEnabled == input.InstancePersistenceEnabled ||
                    (this.InstancePersistenceEnabled != null &&
                    this.InstancePersistenceEnabled.Equals(input.InstancePersistenceEnabled))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.NUsers == input.NUsers ||
                    this.NUsers.Equals(input.NUsers)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.Permanent == input.Permanent ||
                    this.Permanent.Equals(input.Permanent)
                ) && 
                (
                    this.PhotonRegion == input.PhotonRegion ||
                    this.PhotonRegion.Equals(input.PhotonRegion)
                ) && 
                (
                    this.Platforms == input.Platforms ||
                    (this.Platforms != null &&
                    this.Platforms.Equals(input.Platforms))
                ) && 
                (
                    this.PlayerPersistenceEnabled == input.PlayerPersistenceEnabled ||
                    (this.PlayerPersistenceEnabled != null &&
                    this.PlayerPersistenceEnabled.Equals(input.PlayerPersistenceEnabled))
                ) && 
                (
                    this.Region == input.Region ||
                    this.Region.Equals(input.Region)
                ) && 
                (
                    this.SecureName == input.SecureName ||
                    (this.SecureName != null &&
                    this.SecureName.Equals(input.SecureName))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.WorldId == input.WorldId ||
                    (this.WorldId != null &&
                    this.WorldId.Equals(input.WorldId))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.Friends == input.Friends ||
                    (this.Friends != null &&
                    this.Friends.Equals(input.Friends))
                ) && 
                (
                    this.Private == input.Private ||
                    (this.Private != null &&
                    this.Private.Equals(input.Private))
                ) && 
                (
                    this.QueueEnabled == input.QueueEnabled ||
                    this.QueueEnabled.Equals(input.QueueEnabled)
                ) && 
                (
                    this.QueueSize == input.QueueSize ||
                    this.QueueSize.Equals(input.QueueSize)
                ) && 
                (
                    this.RecommendedCapacity == input.RecommendedCapacity ||
                    this.RecommendedCapacity.Equals(input.RecommendedCapacity)
                ) && 
                (
                    this.RoleRestricted == input.RoleRestricted ||
                    this.RoleRestricted.Equals(input.RoleRestricted)
                ) && 
                (
                    this.Strict == input.Strict ||
                    this.Strict.Equals(input.Strict)
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    this.UserCount.Equals(input.UserCount)
                ) && 
                (
                    this.World == input.World ||
                    (this.World != null &&
                    this.World.Equals(input.World))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.GroupAccessType == input.GroupAccessType ||
                    this.GroupAccessType.Equals(input.GroupAccessType)
                ) && 
                (
                    this.HasCapacityForYou == input.HasCapacityForYou ||
                    this.HasCapacityForYou.Equals(input.HasCapacityForYou)
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.ClosedAt == input.ClosedAt ||
                    (this.ClosedAt != null &&
                    this.ClosedAt.Equals(input.ClosedAt))
                ) && 
                (
                    this.HardClose == input.HardClose ||
                    (this.HardClose != null &&
                    this.HardClose.Equals(input.HardClose))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.AgeGate != null)
                {
                    hashCode = (hashCode * 59) + this.AgeGate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CanRequestInvite.GetHashCode();
                hashCode = (hashCode * 59) + this.Capacity.GetHashCode();
                if (this.ClientNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ClientNumber.GetHashCode();
                }
                if (this.ContentSettings != null)
                {
                    hashCode = (hashCode * 59) + this.ContentSettings.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Full.GetHashCode();
                hashCode = (hashCode * 59) + this.GameServerVersion.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                if (this.InstancePersistenceEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.InstancePersistenceEnabled.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NUsers.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OwnerId != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Permanent.GetHashCode();
                hashCode = (hashCode * 59) + this.PhotonRegion.GetHashCode();
                if (this.Platforms != null)
                {
                    hashCode = (hashCode * 59) + this.Platforms.GetHashCode();
                }
                if (this.PlayerPersistenceEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerPersistenceEnabled.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Region.GetHashCode();
                if (this.SecureName != null)
                {
                    hashCode = (hashCode * 59) + this.SecureName.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.WorldId != null)
                {
                    hashCode = (hashCode * 59) + this.WorldId.GetHashCode();
                }
                if (this.Hidden != null)
                {
                    hashCode = (hashCode * 59) + this.Hidden.GetHashCode();
                }
                if (this.Friends != null)
                {
                    hashCode = (hashCode * 59) + this.Friends.GetHashCode();
                }
                if (this.Private != null)
                {
                    hashCode = (hashCode * 59) + this.Private.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QueueEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.QueueSize.GetHashCode();
                hashCode = (hashCode * 59) + this.RecommendedCapacity.GetHashCode();
                hashCode = (hashCode * 59) + this.RoleRestricted.GetHashCode();
                hashCode = (hashCode * 59) + this.Strict.GetHashCode();
                hashCode = (hashCode * 59) + this.UserCount.GetHashCode();
                if (this.World != null)
                {
                    hashCode = (hashCode * 59) + this.World.GetHashCode();
                }
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GroupAccessType.GetHashCode();
                hashCode = (hashCode * 59) + this.HasCapacityForYou.GetHashCode();
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.ClosedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedAt.GetHashCode();
                }
                if (this.HardClose != null)
                {
                    hashCode = (hashCode * 59) + this.HardClose.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Capacity (int) minimum
            if (this.Capacity < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Capacity, must be a value greater than or equal to 0.", new [] { "Capacity" });
            }

            // ClientNumber (string) minLength
            if (this.ClientNumber != null && this.ClientNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientNumber, length must be greater than 1.", new [] { "ClientNumber" });
            }

            // NUsers (int) minimum
            if (this.NUsers < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NUsers, must be a value greater than or equal to 0.", new [] { "NUsers" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // SecureName (string) minLength
            if (this.SecureName != null && this.SecureName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SecureName, length must be greater than 1.", new [] { "SecureName" });
            }

            // ShortName (string) minLength
            if (this.ShortName != null && this.ShortName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShortName, length must be greater than 1.", new [] { "ShortName" });
            }

            // QueueSize (int) minimum
            if (this.QueueSize < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QueueSize, must be a value greater than or equal to 0.", new [] { "QueueSize" });
            }

            // RecommendedCapacity (int) minimum
            if (this.RecommendedCapacity < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecommendedCapacity, must be a value greater than or equal to 0.", new [] { "RecommendedCapacity" });
            }

            // UserCount (int) minimum
            if (this.UserCount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserCount, must be a value greater than or equal to 0.", new [] { "UserCount" });
            }

            yield break;
        }
    }

}
