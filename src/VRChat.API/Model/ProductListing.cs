/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// ProductListing
    /// </summary>
    [DataContract(Name = "ProductListing")]
    public partial class ProductListing : IEquatable<ProductListing>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ListingType
        /// </summary>
        [DataMember(Name = "listingType", IsRequired = true, EmitDefaultValue = true)]
        public ProductListingType ListingType { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name = "productType", IsRequired = true, EmitDefaultValue = true)]
        public ProductType ProductType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductListing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListing" /> class.
        /// </summary>
        /// <param name="active">active (required).</param>
        /// <param name="buyerRefundable">buyerRefundable (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="duration">duration.</param>
        /// <param name="durationType">durationType.</param>
        /// <param name="groupIcon">groupIcon.</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="hasAvatar">hasAvatar (required).</param>
        /// <param name="hasUdon">hasUdon (required).</param>
        /// <param name="hydratedProducts">hydratedProducts.</param>
        /// <param name="id">id (required).</param>
        /// <param name="imageId">imageId.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="listingType">listingType (required).</param>
        /// <param name="listingVariants">listingVariants.</param>
        /// <param name="permanent">permanent.</param>
        /// <param name="priceTokens">priceTokens (required).</param>
        /// <param name="productIds">productIds (required).</param>
        /// <param name="productType">productType (required).</param>
        /// <param name="products">products (required).</param>
        /// <param name="quantifiable">quantifiable.</param>
        /// <param name="recurrable">recurrable (required).</param>
        /// <param name="refundable">refundable (required).</param>
        /// <param name="sellerDisplayName">sellerDisplayName (required).</param>
        /// <param name="sellerId">sellerId (required).</param>
        /// <param name="stackable">stackable (required).</param>
        /// <param name="storeIds">storeIds (required).</param>
        /// <param name="tags">tags.</param>
        public ProductListing(bool active = default(bool), bool buyerRefundable = default(bool), string description = default(string), string displayName = default(string), int? duration = default(int?), string durationType = default(string), string groupIcon = default(string), string groupId = default(string), string groupName = default(string), bool hasAvatar = default(bool), bool hasUdon = default(bool), List<Product> hydratedProducts = default(List<Product>), string id = default(string), string imageId = default(string), string imageUrl = default(string), ProductListingType listingType = default(ProductListingType), List<ProductListingVariant> listingVariants = default(List<ProductListingVariant>), bool permanent = default(bool), int priceTokens = default(int), List<string> productIds = default(List<string>), ProductType productType = default(ProductType), List<Object> products = default(List<Object>), bool quantifiable = default(bool), bool recurrable = default(bool), bool refundable = default(bool), string sellerDisplayName = default(string), string sellerId = default(string), bool stackable = default(bool), List<string> storeIds = default(List<string>), List<string> tags = default(List<string>))
        {
            this.Active = active;
            this.BuyerRefundable = buyerRefundable;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ProductListing and cannot be null");
            }
            this.Description = description;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for ProductListing and cannot be null");
            }
            this.DisplayName = displayName;
            this.HasAvatar = hasAvatar;
            this.HasUdon = hasUdon;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ProductListing and cannot be null");
            }
            this.Id = id;
            this.ListingType = listingType;
            this.PriceTokens = priceTokens;
            // to ensure "productIds" is required (not null)
            if (productIds == null)
            {
                throw new ArgumentNullException("productIds is a required property for ProductListing and cannot be null");
            }
            this.ProductIds = productIds;
            this.ProductType = productType;
            // to ensure "products" is required (not null)
            if (products == null)
            {
                throw new ArgumentNullException("products is a required property for ProductListing and cannot be null");
            }
            this.Products = products;
            this.Recurrable = recurrable;
            this.Refundable = refundable;
            // to ensure "sellerDisplayName" is required (not null)
            if (sellerDisplayName == null)
            {
                throw new ArgumentNullException("sellerDisplayName is a required property for ProductListing and cannot be null");
            }
            this.SellerDisplayName = sellerDisplayName;
            // to ensure "sellerId" is required (not null)
            if (sellerId == null)
            {
                throw new ArgumentNullException("sellerId is a required property for ProductListing and cannot be null");
            }
            this.SellerId = sellerId;
            this.Stackable = stackable;
            // to ensure "storeIds" is required (not null)
            if (storeIds == null)
            {
                throw new ArgumentNullException("storeIds is a required property for ProductListing and cannot be null");
            }
            this.StoreIds = storeIds;
            this.Duration = duration;
            this.DurationType = durationType;
            this.GroupIcon = groupIcon;
            this.GroupId = groupId;
            this.GroupName = groupName;
            this.HydratedProducts = hydratedProducts;
            this.ImageId = imageId;
            this.ImageUrl = imageUrl;
            this.ListingVariants = listingVariants;
            this.Permanent = permanent;
            this.Quantifiable = quantifiable;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets BuyerRefundable
        /// </summary>
        [DataMember(Name = "buyerRefundable", IsRequired = true, EmitDefaultValue = true)]
        public bool BuyerRefundable { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets DurationType
        /// </summary>
        [DataMember(Name = "durationType", EmitDefaultValue = true)]
        public string DurationType { get; set; }

        /// <summary>
        /// Gets or Sets GroupIcon
        /// </summary>
        [DataMember(Name = "groupIcon", EmitDefaultValue = false)]
        public string GroupIcon { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "groupId", EmitDefaultValue = false)]
        public string GroupId { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "groupName", EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets HasAvatar
        /// </summary>
        [DataMember(Name = "hasAvatar", IsRequired = true, EmitDefaultValue = true)]
        public bool HasAvatar { get; set; }

        /// <summary>
        /// Gets or Sets HasUdon
        /// </summary>
        [DataMember(Name = "hasUdon", IsRequired = true, EmitDefaultValue = true)]
        public bool HasUdon { get; set; }

        /// <summary>
        /// Gets or Sets HydratedProducts
        /// </summary>
        [DataMember(Name = "hydratedProducts", EmitDefaultValue = false)]
        public List<Product> HydratedProducts { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageId
        /// </summary>
        [DataMember(Name = "imageId", EmitDefaultValue = false)]
        public string ImageId { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ListingVariants
        /// </summary>
        [DataMember(Name = "listingVariants", EmitDefaultValue = false)]
        public List<ProductListingVariant> ListingVariants { get; set; }

        /// <summary>
        /// Gets or Sets Permanent
        /// </summary>
        [DataMember(Name = "permanent", EmitDefaultValue = true)]
        public bool Permanent { get; set; }

        /// <summary>
        /// Gets or Sets PriceTokens
        /// </summary>
        [DataMember(Name = "priceTokens", IsRequired = true, EmitDefaultValue = true)]
        public int PriceTokens { get; set; }

        /// <summary>
        /// Gets or Sets ProductIds
        /// </summary>
        [DataMember(Name = "productIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ProductIds { get; set; }

        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name = "products", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Products { get; set; }

        /// <summary>
        /// Gets or Sets Quantifiable
        /// </summary>
        [DataMember(Name = "quantifiable", EmitDefaultValue = true)]
        public bool Quantifiable { get; set; }

        /// <summary>
        /// Gets or Sets Recurrable
        /// </summary>
        [DataMember(Name = "recurrable", IsRequired = true, EmitDefaultValue = true)]
        public bool Recurrable { get; set; }

        /// <summary>
        /// Gets or Sets Refundable
        /// </summary>
        [DataMember(Name = "refundable", IsRequired = true, EmitDefaultValue = true)]
        public bool Refundable { get; set; }

        /// <summary>
        /// Gets or Sets SellerDisplayName
        /// </summary>
        [DataMember(Name = "sellerDisplayName", IsRequired = true, EmitDefaultValue = true)]
        public string SellerDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets SellerId
        /// </summary>
        [DataMember(Name = "sellerId", IsRequired = true, EmitDefaultValue = true)]
        public string SellerId { get; set; }

        /// <summary>
        /// Gets or Sets Stackable
        /// </summary>
        [DataMember(Name = "stackable", IsRequired = true, EmitDefaultValue = true)]
        public bool Stackable { get; set; }

        /// <summary>
        /// Gets or Sets StoreIds
        /// </summary>
        [DataMember(Name = "storeIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> StoreIds { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductListing {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  BuyerRefundable: ").Append(BuyerRefundable).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  DurationType: ").Append(DurationType).Append("\n");
            sb.Append("  GroupIcon: ").Append(GroupIcon).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  HasAvatar: ").Append(HasAvatar).Append("\n");
            sb.Append("  HasUdon: ").Append(HasUdon).Append("\n");
            sb.Append("  HydratedProducts: ").Append(HydratedProducts).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageId: ").Append(ImageId).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ListingType: ").Append(ListingType).Append("\n");
            sb.Append("  ListingVariants: ").Append(ListingVariants).Append("\n");
            sb.Append("  Permanent: ").Append(Permanent).Append("\n");
            sb.Append("  PriceTokens: ").Append(PriceTokens).Append("\n");
            sb.Append("  ProductIds: ").Append(ProductIds).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Quantifiable: ").Append(Quantifiable).Append("\n");
            sb.Append("  Recurrable: ").Append(Recurrable).Append("\n");
            sb.Append("  Refundable: ").Append(Refundable).Append("\n");
            sb.Append("  SellerDisplayName: ").Append(SellerDisplayName).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  Stackable: ").Append(Stackable).Append("\n");
            sb.Append("  StoreIds: ").Append(StoreIds).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductListing);
        }

        /// <summary>
        /// Returns true if ProductListing instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductListing input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.BuyerRefundable == input.BuyerRefundable ||
                    this.BuyerRefundable.Equals(input.BuyerRefundable)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.DurationType == input.DurationType ||
                    (this.DurationType != null &&
                    this.DurationType.Equals(input.DurationType))
                ) && 
                (
                    this.GroupIcon == input.GroupIcon ||
                    (this.GroupIcon != null &&
                    this.GroupIcon.Equals(input.GroupIcon))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.HasAvatar == input.HasAvatar ||
                    this.HasAvatar.Equals(input.HasAvatar)
                ) && 
                (
                    this.HasUdon == input.HasUdon ||
                    this.HasUdon.Equals(input.HasUdon)
                ) && 
                (
                    this.HydratedProducts == input.HydratedProducts ||
                    this.HydratedProducts != null &&
                    input.HydratedProducts != null &&
                    this.HydratedProducts.SequenceEqual(input.HydratedProducts)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageId == input.ImageId ||
                    (this.ImageId != null &&
                    this.ImageId.Equals(input.ImageId))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ListingType == input.ListingType ||
                    this.ListingType.Equals(input.ListingType)
                ) && 
                (
                    this.ListingVariants == input.ListingVariants ||
                    this.ListingVariants != null &&
                    input.ListingVariants != null &&
                    this.ListingVariants.SequenceEqual(input.ListingVariants)
                ) && 
                (
                    this.Permanent == input.Permanent ||
                    this.Permanent.Equals(input.Permanent)
                ) && 
                (
                    this.PriceTokens == input.PriceTokens ||
                    this.PriceTokens.Equals(input.PriceTokens)
                ) && 
                (
                    this.ProductIds == input.ProductIds ||
                    this.ProductIds != null &&
                    input.ProductIds != null &&
                    this.ProductIds.SequenceEqual(input.ProductIds)
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    this.ProductType.Equals(input.ProductType)
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.Quantifiable == input.Quantifiable ||
                    this.Quantifiable.Equals(input.Quantifiable)
                ) && 
                (
                    this.Recurrable == input.Recurrable ||
                    this.Recurrable.Equals(input.Recurrable)
                ) && 
                (
                    this.Refundable == input.Refundable ||
                    this.Refundable.Equals(input.Refundable)
                ) && 
                (
                    this.SellerDisplayName == input.SellerDisplayName ||
                    (this.SellerDisplayName != null &&
                    this.SellerDisplayName.Equals(input.SellerDisplayName))
                ) && 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.Stackable == input.Stackable ||
                    this.Stackable.Equals(input.Stackable)
                ) && 
                (
                    this.StoreIds == input.StoreIds ||
                    this.StoreIds != null &&
                    input.StoreIds != null &&
                    this.StoreIds.SequenceEqual(input.StoreIds)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.BuyerRefundable.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                if (this.DurationType != null)
                {
                    hashCode = (hashCode * 59) + this.DurationType.GetHashCode();
                }
                if (this.GroupIcon != null)
                {
                    hashCode = (hashCode * 59) + this.GroupIcon.GetHashCode();
                }
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasAvatar.GetHashCode();
                hashCode = (hashCode * 59) + this.HasUdon.GetHashCode();
                if (this.HydratedProducts != null)
                {
                    hashCode = (hashCode * 59) + this.HydratedProducts.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ImageId != null)
                {
                    hashCode = (hashCode * 59) + this.ImageId.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ListingType.GetHashCode();
                if (this.ListingVariants != null)
                {
                    hashCode = (hashCode * 59) + this.ListingVariants.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Permanent.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceTokens.GetHashCode();
                if (this.ProductIds != null)
                {
                    hashCode = (hashCode * 59) + this.ProductIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductType.GetHashCode();
                if (this.Products != null)
                {
                    hashCode = (hashCode * 59) + this.Products.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantifiable.GetHashCode();
                hashCode = (hashCode * 59) + this.Recurrable.GetHashCode();
                hashCode = (hashCode * 59) + this.Refundable.GetHashCode();
                if (this.SellerDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.SellerDisplayName.GetHashCode();
                }
                if (this.SellerId != null)
                {
                    hashCode = (hashCode * 59) + this.SellerId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stackable.GetHashCode();
                if (this.StoreIds != null)
                {
                    hashCode = (hashCode * 59) + this.StoreIds.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
