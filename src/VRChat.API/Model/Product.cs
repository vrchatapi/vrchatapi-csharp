/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract(Name = "Product")]
    public partial class Product : IEquatable<Product>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name = "productType", IsRequired = true, EmitDefaultValue = true)]
        public ProductType ProductType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="archived">archived (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="groupAccess">groupAccess (default to false).</param>
        /// <param name="groupAccessRemove">groupAccessRemove (default to false).</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="groupRoleId">groupRoleId.</param>
        /// <param name="id">id (required).</param>
        /// <param name="imageId">imageId (required).</param>
        /// <param name="parentListings">parentListings (required).</param>
        /// <param name="productType">productType (required).</param>
        /// <param name="sellerDisplayName">sellerDisplayName (required).</param>
        /// <param name="sellerId">sellerId (required).</param>
        /// <param name="tags">tags (required).</param>
        /// <param name="updated">updated (required).</param>
        /// <param name="useForSubscriberList">useForSubscriberList (default to false).</param>
        public Product(bool archived = default(bool), DateTime created = default(DateTime), string description = default(string), string displayName = default(string), bool groupAccess = false, bool groupAccessRemove = false, string groupId = default(string), string groupRoleId = default(string), string id = default(string), string imageId = default(string), List<string> parentListings = default(List<string>), ProductType productType = default(ProductType), string sellerDisplayName = default(string), string sellerId = default(string), List<string> tags = default(List<string>), DateTime? updated = default(DateTime?), bool useForSubscriberList = false)
        {
            this.Archived = archived;
            this.Created = created;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Product and cannot be null");
            }
            this.Description = description;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for Product and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Product and cannot be null");
            }
            this.Id = id;
            // to ensure "imageId" is required (not null)
            if (imageId == null)
            {
                throw new ArgumentNullException("imageId is a required property for Product and cannot be null");
            }
            this.ImageId = imageId;
            // to ensure "parentListings" is required (not null)
            if (parentListings == null)
            {
                throw new ArgumentNullException("parentListings is a required property for Product and cannot be null");
            }
            this.ParentListings = parentListings;
            this.ProductType = productType;
            // to ensure "sellerDisplayName" is required (not null)
            if (sellerDisplayName == null)
            {
                throw new ArgumentNullException("sellerDisplayName is a required property for Product and cannot be null");
            }
            this.SellerDisplayName = sellerDisplayName;
            // to ensure "sellerId" is required (not null)
            if (sellerId == null)
            {
                throw new ArgumentNullException("sellerId is a required property for Product and cannot be null");
            }
            this.SellerId = sellerId;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for Product and cannot be null");
            }
            this.Tags = tags;
            // to ensure "updated" is required (not null)
            if (updated == null)
            {
                throw new ArgumentNullException("updated is a required property for Product and cannot be null");
            }
            this.Updated = updated;
            this.GroupAccess = groupAccess;
            this.GroupAccessRemove = groupAccessRemove;
            this.GroupId = groupId;
            this.GroupRoleId = groupRoleId;
            this.UseForSubscriberList = useForSubscriberList;
        }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name = "archived", IsRequired = true, EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets GroupAccess
        /// </summary>
        [DataMember(Name = "groupAccess", EmitDefaultValue = true)]
        public bool GroupAccess { get; set; }

        /// <summary>
        /// Gets or Sets GroupAccessRemove
        /// </summary>
        [DataMember(Name = "groupAccessRemove", EmitDefaultValue = true)]
        public bool GroupAccessRemove { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "groupId", EmitDefaultValue = false)]
        public string GroupId { get; set; }

        /// <summary>
        /// Gets or Sets GroupRoleId
        /// </summary>
        [DataMember(Name = "groupRoleId", EmitDefaultValue = false)]
        public string GroupRoleId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageId
        /// </summary>
        [DataMember(Name = "imageId", IsRequired = true, EmitDefaultValue = true)]
        public string ImageId { get; set; }

        /// <summary>
        /// Gets or Sets ParentListings
        /// </summary>
        [DataMember(Name = "parentListings", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ParentListings { get; set; }

        /// <summary>
        /// Gets or Sets SellerDisplayName
        /// </summary>
        [DataMember(Name = "sellerDisplayName", IsRequired = true, EmitDefaultValue = true)]
        public string SellerDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets SellerId
        /// </summary>
        [DataMember(Name = "sellerId", IsRequired = true, EmitDefaultValue = true)]
        public string SellerId { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets UseForSubscriberList
        /// </summary>
        [DataMember(Name = "useForSubscriberList", EmitDefaultValue = true)]
        public bool UseForSubscriberList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  GroupAccess: ").Append(GroupAccess).Append("\n");
            sb.Append("  GroupAccessRemove: ").Append(GroupAccessRemove).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupRoleId: ").Append(GroupRoleId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageId: ").Append(ImageId).Append("\n");
            sb.Append("  ParentListings: ").Append(ParentListings).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  SellerDisplayName: ").Append(SellerDisplayName).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  UseForSubscriberList: ").Append(UseForSubscriberList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Archived == input.Archived ||
                    this.Archived.Equals(input.Archived)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.GroupAccess == input.GroupAccess ||
                    this.GroupAccess.Equals(input.GroupAccess)
                ) && 
                (
                    this.GroupAccessRemove == input.GroupAccessRemove ||
                    this.GroupAccessRemove.Equals(input.GroupAccessRemove)
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.GroupRoleId == input.GroupRoleId ||
                    (this.GroupRoleId != null &&
                    this.GroupRoleId.Equals(input.GroupRoleId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageId == input.ImageId ||
                    (this.ImageId != null &&
                    this.ImageId.Equals(input.ImageId))
                ) && 
                (
                    this.ParentListings == input.ParentListings ||
                    this.ParentListings != null &&
                    input.ParentListings != null &&
                    this.ParentListings.SequenceEqual(input.ParentListings)
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    this.ProductType.Equals(input.ProductType)
                ) && 
                (
                    this.SellerDisplayName == input.SellerDisplayName ||
                    (this.SellerDisplayName != null &&
                    this.SellerDisplayName.Equals(input.SellerDisplayName))
                ) && 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.UseForSubscriberList == input.UseForSubscriberList ||
                    this.UseForSubscriberList.Equals(input.UseForSubscriberList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Archived.GetHashCode();
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GroupAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.GroupAccessRemove.GetHashCode();
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                if (this.GroupRoleId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupRoleId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ImageId != null)
                {
                    hashCode = (hashCode * 59) + this.ImageId.GetHashCode();
                }
                if (this.ParentListings != null)
                {
                    hashCode = (hashCode * 59) + this.ParentListings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductType.GetHashCode();
                if (this.SellerDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.SellerDisplayName.GetHashCode();
                }
                if (this.SellerId != null)
                {
                    hashCode = (hashCode * 59) + this.SellerId.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Updated != null)
                {
                    hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseForSubscriberList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
