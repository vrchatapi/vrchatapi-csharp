/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// AccountDeletionLog
    /// </summary>
    [DataContract(Name = "AccountDeletionLog")]
    public partial class AccountDeletionLog : IEquatable<AccountDeletionLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDeletionLog" /> class.
        /// </summary>
        /// <param name="message">Typically \&quot;Deletion requested\&quot; or \&quot;Deletion canceled\&quot;. Other messages like \&quot;Deletion completed\&quot; may exist, but are these are not possible to see as a regular user. (default to &quot;Deletion requested&quot;).</param>
        /// <param name="deletionScheduled">When the deletion is scheduled to happen, standard is 14 days after the request..</param>
        /// <param name="dateTime">Date and time of the deletion request..</param>
        public AccountDeletionLog(string message = "Deletion requested", DateTime? deletionScheduled = default(DateTime?), DateTime dateTime = default(DateTime))
        {
            // use default value if no "message" provided
            this.Message = message ?? "Deletion requested";
            this.DeletionScheduled = deletionScheduled;
            this.DateTime = dateTime;
        }

        /// <summary>
        /// Typically \&quot;Deletion requested\&quot; or \&quot;Deletion canceled\&quot;. Other messages like \&quot;Deletion completed\&quot; may exist, but are these are not possible to see as a regular user.
        /// </summary>
        /// <value>Typically \&quot;Deletion requested\&quot; or \&quot;Deletion canceled\&quot;. Other messages like \&quot;Deletion completed\&quot; may exist, but are these are not possible to see as a regular user.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// When the deletion is scheduled to happen, standard is 14 days after the request.
        /// </summary>
        /// <value>When the deletion is scheduled to happen, standard is 14 days after the request.</value>
        [DataMember(Name = "deletionScheduled", EmitDefaultValue = true)]
        public DateTime? DeletionScheduled { get; set; }

        /// <summary>
        /// Date and time of the deletion request.
        /// </summary>
        /// <value>Date and time of the deletion request.</value>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountDeletionLog {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  DeletionScheduled: ").Append(DeletionScheduled).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDeletionLog);
        }

        /// <summary>
        /// Returns true if AccountDeletionLog instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDeletionLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDeletionLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.DeletionScheduled == input.DeletionScheduled ||
                    (this.DeletionScheduled != null &&
                    this.DeletionScheduled.Equals(input.DeletionScheduled))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.DeletionScheduled != null)
                {
                    hashCode = (hashCode * 59) + this.DeletionScheduled.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
