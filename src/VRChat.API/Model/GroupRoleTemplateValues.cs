/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// GroupRoleTemplateValues
    /// </summary>
    [DataContract(Name = "GroupRoleTemplateValues")]
    public partial class GroupRoleTemplateValues : IEquatable<GroupRoleTemplateValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupRoleTemplateValues" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupRoleTemplateValues() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupRoleTemplateValues" /> class.
        /// </summary>
        /// <param name="basePermissions">basePermissions (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="roles">roles (required).</param>
        public GroupRoleTemplateValues(List<GroupPermissions> basePermissions = default(List<GroupPermissions>), string description = default(string), string name = default(string), GroupRoleTemplateValuesRoles roles = default(GroupRoleTemplateValuesRoles))
        {
            // to ensure "basePermissions" is required (not null)
            if (basePermissions == null)
            {
                throw new ArgumentNullException("basePermissions is a required property for GroupRoleTemplateValues and cannot be null");
            }
            this.BasePermissions = basePermissions;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for GroupRoleTemplateValues and cannot be null");
            }
            this.Description = description;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GroupRoleTemplateValues and cannot be null");
            }
            this.Name = name;
            // to ensure "roles" is required (not null)
            if (roles == null)
            {
                throw new ArgumentNullException("roles is a required property for GroupRoleTemplateValues and cannot be null");
            }
            this.Roles = roles;
        }

        /// <summary>
        /// Gets or Sets BasePermissions
        /// </summary>
        [DataMember(Name = "basePermissions", IsRequired = true, EmitDefaultValue = true)]
        public List<GroupPermissions> BasePermissions { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", IsRequired = true, EmitDefaultValue = true)]
        public GroupRoleTemplateValuesRoles Roles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupRoleTemplateValues {\n");
            sb.Append("  BasePermissions: ").Append(BasePermissions).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupRoleTemplateValues);
        }

        /// <summary>
        /// Returns true if GroupRoleTemplateValues instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupRoleTemplateValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupRoleTemplateValues input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BasePermissions == input.BasePermissions ||
                    this.BasePermissions != null &&
                    input.BasePermissions != null &&
                    this.BasePermissions.SequenceEqual(input.BasePermissions)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Roles == input.Roles ||
                    (this.Roles != null &&
                    this.Roles.Equals(input.Roles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BasePermissions != null)
                {
                    hashCode = (hashCode * 59) + this.BasePermissions.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Roles != null)
                {
                    hashCode = (hashCode * 59) + this.Roles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
