/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// UserSubscriptionEligible
    /// </summary>
    [DataContract(Name = "UserSubscriptionEligible")]
    public partial class UserSubscriptionEligible : IEquatable<UserSubscriptionEligible>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSubscriptionEligible" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserSubscriptionEligible() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSubscriptionEligible" /> class.
        /// </summary>
        /// <param name="activeCancelledSubscription">activeCancelledSubscription (required).</param>
        /// <param name="giftEligible">giftEligible (required).</param>
        /// <param name="nonExtendVendorWillLoseGiftTime">nonExtendVendorWillLoseGiftTime (required).</param>
        /// <param name="purchaseEligible">purchaseEligible (required).</param>
        /// <param name="subscriptionEligible">subscriptionEligible (required).</param>
        /// <param name="subscriptionOnAltAccount">subscriptionOnAltAccount (required).</param>
        public UserSubscriptionEligible(bool activeCancelledSubscription = default(bool), bool giftEligible = default(bool), bool nonExtendVendorWillLoseGiftTime = default(bool), bool purchaseEligible = default(bool), bool subscriptionEligible = default(bool), bool subscriptionOnAltAccount = default(bool))
        {
            this.ActiveCancelledSubscription = activeCancelledSubscription;
            this.GiftEligible = giftEligible;
            this.NonExtendVendorWillLoseGiftTime = nonExtendVendorWillLoseGiftTime;
            this.PurchaseEligible = purchaseEligible;
            this.SubscriptionEligible = subscriptionEligible;
            this.SubscriptionOnAltAccount = subscriptionOnAltAccount;
        }

        /// <summary>
        /// Gets or Sets ActiveCancelledSubscription
        /// </summary>
        [DataMember(Name = "activeCancelledSubscription", IsRequired = true, EmitDefaultValue = true)]
        public bool ActiveCancelledSubscription { get; set; }

        /// <summary>
        /// Gets or Sets GiftEligible
        /// </summary>
        [DataMember(Name = "giftEligible", IsRequired = true, EmitDefaultValue = true)]
        public bool GiftEligible { get; set; }

        /// <summary>
        /// Gets or Sets NonExtendVendorWillLoseGiftTime
        /// </summary>
        [DataMember(Name = "nonExtendVendorWillLoseGiftTime", IsRequired = true, EmitDefaultValue = true)]
        public bool NonExtendVendorWillLoseGiftTime { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseEligible
        /// </summary>
        [DataMember(Name = "purchaseEligible", IsRequired = true, EmitDefaultValue = true)]
        public bool PurchaseEligible { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionEligible
        /// </summary>
        [DataMember(Name = "subscriptionEligible", IsRequired = true, EmitDefaultValue = true)]
        public bool SubscriptionEligible { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionOnAltAccount
        /// </summary>
        [DataMember(Name = "subscriptionOnAltAccount", IsRequired = true, EmitDefaultValue = true)]
        public bool SubscriptionOnAltAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSubscriptionEligible {\n");
            sb.Append("  ActiveCancelledSubscription: ").Append(ActiveCancelledSubscription).Append("\n");
            sb.Append("  GiftEligible: ").Append(GiftEligible).Append("\n");
            sb.Append("  NonExtendVendorWillLoseGiftTime: ").Append(NonExtendVendorWillLoseGiftTime).Append("\n");
            sb.Append("  PurchaseEligible: ").Append(PurchaseEligible).Append("\n");
            sb.Append("  SubscriptionEligible: ").Append(SubscriptionEligible).Append("\n");
            sb.Append("  SubscriptionOnAltAccount: ").Append(SubscriptionOnAltAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSubscriptionEligible);
        }

        /// <summary>
        /// Returns true if UserSubscriptionEligible instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSubscriptionEligible to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSubscriptionEligible input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActiveCancelledSubscription == input.ActiveCancelledSubscription ||
                    this.ActiveCancelledSubscription.Equals(input.ActiveCancelledSubscription)
                ) && 
                (
                    this.GiftEligible == input.GiftEligible ||
                    this.GiftEligible.Equals(input.GiftEligible)
                ) && 
                (
                    this.NonExtendVendorWillLoseGiftTime == input.NonExtendVendorWillLoseGiftTime ||
                    this.NonExtendVendorWillLoseGiftTime.Equals(input.NonExtendVendorWillLoseGiftTime)
                ) && 
                (
                    this.PurchaseEligible == input.PurchaseEligible ||
                    this.PurchaseEligible.Equals(input.PurchaseEligible)
                ) && 
                (
                    this.SubscriptionEligible == input.SubscriptionEligible ||
                    this.SubscriptionEligible.Equals(input.SubscriptionEligible)
                ) && 
                (
                    this.SubscriptionOnAltAccount == input.SubscriptionOnAltAccount ||
                    this.SubscriptionOnAltAccount.Equals(input.SubscriptionOnAltAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ActiveCancelledSubscription.GetHashCode();
                hashCode = (hashCode * 59) + this.GiftEligible.GetHashCode();
                hashCode = (hashCode * 59) + this.NonExtendVendorWillLoseGiftTime.GetHashCode();
                hashCode = (hashCode * 59) + this.PurchaseEligible.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriptionEligible.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriptionOnAltAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
