/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// RegisterUserAccountRequest
    /// </summary>
    [DataContract(Name = "RegisterUserAccountRequest")]
    public partial class RegisterUserAccountRequest : IEquatable<RegisterUserAccountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUserAccountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterUserAccountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUserAccountRequest" /> class.
        /// </summary>
        /// <param name="username">Display Name / Username (Username is a sanitized version) (required).</param>
        /// <param name="password">Password (required).</param>
        /// <param name="email">Email address (required).</param>
        /// <param name="year">Birth year (required).</param>
        /// <param name="month">Birth month of year (required).</param>
        /// <param name="day">Birth day of month (required).</param>
        /// <param name="captchaCode">Captcha code (required).</param>
        /// <param name="subscribe">Whether to recieve promotional emails (required).</param>
        /// <param name="acceptedTOSVersion">The most recent version of the TOS (required).</param>
        public RegisterUserAccountRequest(string username = default(string), string password = default(string), string email = default(string), string year = default(string), string month = default(string), string day = default(string), string captchaCode = default(string), bool subscribe = default(bool), int acceptedTOSVersion = default(int))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for RegisterUserAccountRequest and cannot be null");
            }
            this.Username = username;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for RegisterUserAccountRequest and cannot be null");
            }
            this.Password = password;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for RegisterUserAccountRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "year" is required (not null)
            if (year == null)
            {
                throw new ArgumentNullException("year is a required property for RegisterUserAccountRequest and cannot be null");
            }
            this.Year = year;
            // to ensure "month" is required (not null)
            if (month == null)
            {
                throw new ArgumentNullException("month is a required property for RegisterUserAccountRequest and cannot be null");
            }
            this.Month = month;
            // to ensure "day" is required (not null)
            if (day == null)
            {
                throw new ArgumentNullException("day is a required property for RegisterUserAccountRequest and cannot be null");
            }
            this.Day = day;
            // to ensure "captchaCode" is required (not null)
            if (captchaCode == null)
            {
                throw new ArgumentNullException("captchaCode is a required property for RegisterUserAccountRequest and cannot be null");
            }
            this.CaptchaCode = captchaCode;
            this.Subscribe = subscribe;
            this.AcceptedTOSVersion = acceptedTOSVersion;
        }

        /// <summary>
        /// Display Name / Username (Username is a sanitized version)
        /// </summary>
        /// <value>Display Name / Username (Username is a sanitized version)</value>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Email address
        /// </summary>
        /// <value>Email address</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Birth year
        /// </summary>
        /// <value>Birth year</value>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public string Year { get; set; }

        /// <summary>
        /// Birth month of year
        /// </summary>
        /// <value>Birth month of year</value>
        [DataMember(Name = "month", IsRequired = true, EmitDefaultValue = true)]
        public string Month { get; set; }

        /// <summary>
        /// Birth day of month
        /// </summary>
        /// <value>Birth day of month</value>
        [DataMember(Name = "day", IsRequired = true, EmitDefaultValue = true)]
        public string Day { get; set; }

        /// <summary>
        /// Captcha code
        /// </summary>
        /// <value>Captcha code</value>
        [DataMember(Name = "captchaCode", IsRequired = true, EmitDefaultValue = true)]
        public string CaptchaCode { get; set; }

        /// <summary>
        /// Whether to recieve promotional emails
        /// </summary>
        /// <value>Whether to recieve promotional emails</value>
        [DataMember(Name = "subscribe", IsRequired = true, EmitDefaultValue = true)]
        public bool Subscribe { get; set; }

        /// <summary>
        /// The most recent version of the TOS
        /// </summary>
        /// <value>The most recent version of the TOS</value>
        [DataMember(Name = "acceptedTOSVersion", IsRequired = true, EmitDefaultValue = true)]
        public int AcceptedTOSVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterUserAccountRequest {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  CaptchaCode: ").Append(CaptchaCode).Append("\n");
            sb.Append("  Subscribe: ").Append(Subscribe).Append("\n");
            sb.Append("  AcceptedTOSVersion: ").Append(AcceptedTOSVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterUserAccountRequest);
        }

        /// <summary>
        /// Returns true if RegisterUserAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterUserAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterUserAccountRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.CaptchaCode == input.CaptchaCode ||
                    (this.CaptchaCode != null &&
                    this.CaptchaCode.Equals(input.CaptchaCode))
                ) && 
                (
                    this.Subscribe == input.Subscribe ||
                    this.Subscribe.Equals(input.Subscribe)
                ) && 
                (
                    this.AcceptedTOSVersion == input.AcceptedTOSVersion ||
                    this.AcceptedTOSVersion.Equals(input.AcceptedTOSVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Year != null)
                {
                    hashCode = (hashCode * 59) + this.Year.GetHashCode();
                }
                if (this.Month != null)
                {
                    hashCode = (hashCode * 59) + this.Month.GetHashCode();
                }
                if (this.Day != null)
                {
                    hashCode = (hashCode * 59) + this.Day.GetHashCode();
                }
                if (this.CaptchaCode != null)
                {
                    hashCode = (hashCode * 59) + this.CaptchaCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Subscribe.GetHashCode();
                hashCode = (hashCode * 59) + this.AcceptedTOSVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Username (string) maxLength
            if (this.Username != null && this.Username.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 15.", new [] { "Username" });
            }

            // Username (string) minLength
            if (this.Username != null && this.Username.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be greater than 4.", new [] { "Username" });
            }

            // Password (string) minLength
            if (this.Password != null && this.Password.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be greater than 8.", new [] { "Password" });
            }

            yield break;
        }
    }

}
