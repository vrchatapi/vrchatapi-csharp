/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// Status information for a service request
    /// </summary>
    [DataContract(Name = "ServiceStatus")]
    public partial class ServiceStatus : IEquatable<ServiceStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceStatus" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="id">The id of this service, NOT the id of the thing this service was requested for. (required).</param>
        /// <param name="progress">progress (required).</param>
        /// <param name="requesterUserId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="subjectId">The id of the thing this service was requested for. (required).</param>
        /// <param name="subjectType">The kind of the thing this service was requested for. (required).</param>
        /// <param name="type">The kind of service that was requested. (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public ServiceStatus(DateTime createdAt = default(DateTime), string id = default(string), List<Object> progress = default(List<Object>), string requesterUserId = default(string), string state = default(string), string subjectId = default(string), string subjectType = default(string), string type = default(string), DateTime updatedAt = default(DateTime))
        {
            this.CreatedAt = createdAt;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ServiceStatus and cannot be null");
            }
            this.Id = id;
            // to ensure "progress" is required (not null)
            if (progress == null)
            {
                throw new ArgumentNullException("progress is a required property for ServiceStatus and cannot be null");
            }
            this.Progress = progress;
            // to ensure "requesterUserId" is required (not null)
            if (requesterUserId == null)
            {
                throw new ArgumentNullException("requesterUserId is a required property for ServiceStatus and cannot be null");
            }
            this.RequesterUserId = requesterUserId;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for ServiceStatus and cannot be null");
            }
            this.State = state;
            // to ensure "subjectId" is required (not null)
            if (subjectId == null)
            {
                throw new ArgumentNullException("subjectId is a required property for ServiceStatus and cannot be null");
            }
            this.SubjectId = subjectId;
            // to ensure "subjectType" is required (not null)
            if (subjectType == null)
            {
                throw new ArgumentNullException("subjectType is a required property for ServiceStatus and cannot be null");
            }
            this.SubjectType = subjectType;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ServiceStatus and cannot be null");
            }
            this.Type = type;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The id of this service, NOT the id of the thing this service was requested for.
        /// </summary>
        /// <value>The id of this service, NOT the id of the thing this service was requested for.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name = "progress", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Progress { get; set; }

        /// <summary>
        /// A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
        /// </summary>
        /// <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        [DataMember(Name = "requesterUserId", IsRequired = true, EmitDefaultValue = true)]
        public string RequesterUserId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// The id of the thing this service was requested for.
        /// </summary>
        /// <value>The id of the thing this service was requested for.</value>
        [DataMember(Name = "subjectId", IsRequired = true, EmitDefaultValue = true)]
        public string SubjectId { get; set; }

        /// <summary>
        /// The kind of the thing this service was requested for.
        /// </summary>
        /// <value>The kind of the thing this service was requested for.</value>
        [DataMember(Name = "subjectType", IsRequired = true, EmitDefaultValue = true)]
        public string SubjectType { get; set; }

        /// <summary>
        /// The kind of service that was requested.
        /// </summary>
        /// <value>The kind of service that was requested.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceStatus {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  RequesterUserId: ").Append(RequesterUserId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectType: ").Append(SubjectType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceStatus);
        }

        /// <summary>
        /// Returns true if ServiceStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Progress == input.Progress ||
                    this.Progress != null &&
                    input.Progress != null &&
                    this.Progress.SequenceEqual(input.Progress)
                ) && 
                (
                    this.RequesterUserId == input.RequesterUserId ||
                    (this.RequesterUserId != null &&
                    this.RequesterUserId.Equals(input.RequesterUserId))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.SubjectId == input.SubjectId ||
                    (this.SubjectId != null &&
                    this.SubjectId.Equals(input.SubjectId))
                ) && 
                (
                    this.SubjectType == input.SubjectType ||
                    (this.SubjectType != null &&
                    this.SubjectType.Equals(input.SubjectType))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Progress != null)
                {
                    hashCode = (hashCode * 59) + this.Progress.GetHashCode();
                }
                if (this.RequesterUserId != null)
                {
                    hashCode = (hashCode * 59) + this.RequesterUserId.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.SubjectId != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectId.GetHashCode();
                }
                if (this.SubjectType != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectType.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
